Automatically generated by Mendeley Desktop 1.13-rel.build.test
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@misc{CODICESOFTWARE,
annote = {
        From Duplicate 2 ( 
        
          SEMANTIC MERGE
        
         - CODICE SOFTWARE )

        
        

        From Duplicate 2 ( 
        
        
          SEMANTIC MERGE
        
        
         - CODICE SOFTWARE )

        
        

        

        

        

        

      },
author = {{CODICE SOFTWARE}},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/CODICE SOFTWARE - 2013 - SEMANTIC MERGE.pdf:pdf;:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/CODICE SOFTWARE - 2013 - SEMANTIC MERGE.html:html},
pages = {1--15},
title = {{Semantic Merge}},
url = {http://www.semanticmerge.com/ http://www.semanticmerge.com/documents/semanticmerge-intro-guide.pdf},
urldate = {07/10/13},
year = {2013},
howpublished = {\url{http://www.semanticmerge.com/}},
note = {Accessed: August 2014}
}
@article{DeRoover2007,
annote = {        From Duplicate 1 (                           Behavioral similarity matching using concrete source code templates in logic queries                         - De Roover, Coen; D'Hondt, Theo; Brichau, Johan; Noguera, Carlos; Duchien, Laurence )
                
        
        
      },
author = {{De Roover}, Coen and D'Hondt, Theo and Brichau, Johan and Noguera, Carlos and Duchien, Laurence},
doi = {10.1145/1244381.1244398},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/De Roover et al. - 2007 - Behavioral similarity matching using concrete source code templates in logic queries.pdf:pdf},
isbn = {9781595936202},
journal = {Proceedings of the 2007 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation - PEPM '07},
keywords = {Templates,logic meta programming,pattern de-,program analysis,program querying,program vali-,source code templates,tection},
mendeley-tags = {Templates},
pages = {92},
publisher = {ACM Press},
title = {{Behavioral similarity matching using concrete source code templates in logic queries}},
url = {http://portal.acm.org/citation.cfm?doid=1244381.1244398},
year = {2007}
}
@article{Dig2007,
annote = {        From Duplicate 1 (                           Refactoring-Aware Configuration Management for Object-Oriented Programs                         - Dig, Danny; Manzoor, Kashif; Johnson, Ralph E; Nguyen, Tien N )
                
        
        
      },
author = {Dig, Danny and Manzoor, Kashif and Johnson, Ralph E. and Nguyen, Tien N.},
doi = {10.1109/ICSE.2007.71},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dig et al. - 2007 - Refactoring-Aware Configuration Management for Object-Oriented Programs.pdf:pdf},
isbn = {0-7695-2828-7},
issn = {0270-5257},
journal = {29th International Conference on Software Engineering (ICSE'07)},
month = may,
pages = {427--436},
publisher = {Ieee},
title = {{Refactoring-Aware Configuration Management for Object-Oriented Programs}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4222604},
year = {2007}
}
@article{Bois2005,
abstract = { Program comprehension is a fundamental requirement for all but the most trivial maintenance activities. Previous research has demonstrated key principles for improving comprehension. Among others, these consist of the introduction of beacons as indexes into knowledge, and the chunking of low-level structures into higher-level abstractions. These principles are naturally reflected in the reverse engineering pattern Refactor to Understand, which uses incremental renaming and extracting of program elements as the means to decipher cryptic code. In this paper, we discuss a controlled experiment to explore differences in program comprehension between the application of Refactor to Understand and the traditional Read to Understand pattern. Our results support added value of Refactor to Understand regarding specific aspects of program comprehension and specific types of source code. These findings illustrate the need for further experiments to provide clear guidelines on the application of refactorings for improving program comprehension.},
annote = {        From Duplicate 1 (                           Does the "Refactor to Understand" reverse engineering pattern improve program comprehension?                         - Bois, B Du; Demeyer, S; Verelst, J )
                
        
        
      },
author = {Bois, B. Du and Demeyer, S. and Verelst, J.},
doi = {10.1109/CSMR.2005.25},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bois, Demeyer, Verelst - 2005 - Does the Refactor to Understand reverse engineering pattern improve program comprehension.pdf:pdf},
isbn = {0-7695-2304-8},
issn = {1534-5351},
journal = {Ninth European Conference on Software Maintenance and Reengineering},
title = {{Does the "Refactor to Understand" reverse engineering pattern improve program comprehension?}},
year = {2005}
}
@article{Storey,
annote = {        From Duplicate 1 (                   SHriMP Views : An Interactive Environment for Exploring Multiple Hierarchical Views of a Java Program Exploring a Java program                 - Storey, Margaret-Anne D )
                
        
        
      },
author = {Storey, Margaret-Anne D.},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Storey - Unknown - SHriMP Views An Interactive Environment for Exploring Multiple Hierarchical Views of a Java Program Exploring a Java.pdf:pdf},
pages = {1--4},
title = {{SHriMP Views : An Interactive Environment for Exploring Multiple Hierarchical Views of a Java Program Exploring a Java program}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=5970199\&tag=1}
}
@inproceedings{Freese2006,
annote = {        From Duplicate 2 (                           Refactoring-Aware Version Control Towards Refactoring Support in API Evolution and Team Development                         - Freese, Tammo )
                
        
        
      },
author = {Freese, Tammo},
booktitle = {Proceeding of the 28th international conference on Software engineering - ICSE '06},
doi = {10.1145/1134285.1134461},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Freese - 2006 - Refactoring-Aware Version Control Towards Refactoring Support in API Evolution and Team Development.pdf:pdf},
isbn = {1595933751},
keywords = {application,application programming interface,eclipse,library,programming interface,refactoring,software evolution,subversion,version control},
month = may,
pages = {953--956},
publisher = {ACM Press},
title = {{Refactoring-Aware Version Control Towards Refactoring Support in API Evolution and Team Development}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=1134285.1134461},
year = {2006}
}
@article{Mund2002,
abstract = {An important application of the dynamic program slicing technique is program debugging. In applications such as interactive debugging, the dynamic slicing algorithm needs to be efficient. In this context, we propose a new dynamic program slicing technique that is more efficient than the related algorithms reported in the literature. We use the program dependence graph as an intermediate program representation, and modify it by introducing the concepts of stable and unstable edges. Our algorithm is based on marking and unmarking the unstable edges as and when the dependences arise and cease during run-time. We call this algorithm edge-marking algorithm. After an execution of a node x, an unstable edge (x, y) is marked if the node x uses the value of the variable defined at node y. A marked unstable edge (x, y) is unmarked after an execution of a node z if the nodes y and z define the same variable var, and the value of var computed at the node y does not affect the present value of var defined at the node z. We show that our algorithm is more time and space efficient than the existing ones. The worst case space complexity of our algorithm is O(n2), where n is the number of statements in the program. We also briefly discuss an implementation of our algorithm.},
annote = {        From Duplicate 2 (                           An efficient dynamic program slicing technique                         - Mund, G B B; Mall, R; Sarkar, S )
                
        
        
      },
author = {Mund, G.B B B and Mall, R and Sarkar, S},
doi = {10.1016/S0950-5849(01)00224-5},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mund, Mall, Sarkar - 2002 - An efficient dynamic program slicing technique.pdf:pdf},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {control,dynamic slicing,ow graph,program debugging,program dependence graph,program slicing,static slicing},
month = feb,
number = {2},
pages = {123--132},
publisher = {Elsevier},
title = {{An efficient dynamic program slicing technique}},
url = {http://www.ingentaconnect.com/content/els/09505849/2002/00000044/00000002/art00224},
volume = {44},
year = {2002}
}
@article{Foote1997,
annote = {        From Duplicate 2 (                           Big Ball of Mud                         - Foote, Brian )
                
        
        
      },
author = {Foote, Brian},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Foote - 1997 - Big Ball of Mud.pdf:pdf},
title = {{Big Ball of Mud}},
year = {1997}
}
@inproceedings{Shao2009,
author = {Shao, Danhua and Khurshid, Sarfraz and Perry, Dewayne E.},
booktitle = {Proceedings of the 7th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering on European software engineering conference and foundations of software engineering symposium - E},
doi = {10.1145/1595696.1595747},
isbn = {9781605580012},
keywords = {data flow,semantic analysis,version management},
month = aug,
pages = {291},
publisher = {ACM Press},
title = {{SCA}},
url = {http://dl.acm.org/citation.cfm?id=1595696.1595747},
year = {2009}
}
@inproceedings{Lee2012,
annote = {        From Duplicate 2 (                   Marco: Safe, Expressive Macros for Any Language                 - Lee, Byeongcheol; Grimm, Robert; Hirzel, Martin; McKinley, Kathryn S )
                
        
        
      },
author = {Lee, Byeongcheol and Grimm, Robert and Hirzel, Martin and McKinley, Kathryn S.},
booktitle = {ECOOP 2012 – Object-Oriented Programming},
doi = {10.1007/978-3-642-31057-7},
editor = {Noble, James},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lee et al. - 2012 - Marco Safe, Expressive Macros for Any Language.pdf:pdf},
isbn = {978-3-642-31056-0},
keywords = {Marco},
mendeley-tags = {Marco},
month = jun,
pages = {589--613},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{Marco: Safe, Expressive Macros for Any Language}},
url = {http://dl.acm.org/citation.cfm?id=2367163.2367199},
volume = {7313},
year = {2012}
}
@inproceedings{Oqvist2013,
author = {\"{O}qvist, Jesper and Hedin, G\"{o}rel},
booktitle = {Proceedings of the 2013 International Conference on Principles and Practices of Programming on the Java Platform Virtual Machines, Languages, and Tools - PPPJ '13},
doi = {10.1145/2500828.2500843},
isbn = {9781450321112},
keywords = {Java,attribute grammars,compiler design},
month = sep,
pages = {147--152},
publisher = {ACM Press},
title = {{Extending the JastAdd extensible Java compiler to Java 7}},
url = {http://dl.acm.org/citation.cfm?id=2500828.2500843},
year = {2013}
}
@article{Wirfs-Brock,
annote = {        From Duplicate 1 (                           How designs differ                         - Wirfs-Brock, Rebecca J )
                
        
        
      },
author = {Wirfs-Brock, Rebecca J.},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wirfs-Brock - 1994 - How designs differ.pdf:pdf},
journal = {Report on Object Analysis and Design},
number = {4},
title = {{How designs differ}},
url = {http://wirfs-brock.com/PDFs/How Designs Differ.pdf http://wirfs-brock.com/PDFs/How Designs Differ.pdf},
volume = {1},
year = {1994}
}
@article{Dig2008,
abstract = {Current text based Software Configuration Management (SCM) systems have trouble with refactorings. Refactorings result in global changes which lead to merge conflicts. A refactoring-aware SCM system reduces merge conflicts. This paper describes MolhadoRef, a refactoring-aware SCM system and the merge algorithm at its core. MolhadoRef records change operations (refactorings and edits) used to produce one version, and replays them when merging versions. Since refactorings are change operations with well defined semantics, MolhadoRef treats them intelligently. A case study and a controlled experiment show that MolhadoRef automatically solves more merge conflicts than CVS while resulting in fewer merge errors.},
author = {Dig, Danny and Manzoor, K. and Johnson, Ralph E R.E. Ralph E. and Nguyen, T.N. N},
doi = {10.1109/TSE.2008.29},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dig et al. - 2008 - Effective software merging in the presence of object-oriented refactorings.pdf:pdf},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Configuration Management,MolhadoRef records,Restructuring,Version control,and reengineering,object-oriented programming,object-oriented refactorings,refactoring-aware SCM system,reverse engineering,software configuration management,software engineering,software merging},
month = may,
number = {3},
pages = {321--335},
shorttitle = {Software Engineering, IEEE Transactions on},
title = {{Effective software merging in the presence of object-oriented refactorings}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=4509441 http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4509441},
volume = {34},
year = {2008}
}
@misc{Foundation2014,
author = {{The Eclipse Foundation}},
title = {{JGit}},
url = {http://download.eclipse.org/jgit/docs/jgit-2.0.0.201206130900-r/apidocs/org/eclipse/jgit/diff/HistogramDiff.html},
urldate = {August 2014},
year = {2014},
howpublished = {\url{http://download.eclipse.org/jgit/docs/jgit-2.0.0.201206130900-r/apidocs/org/eclipse/jgit/diff/HistogramDiff.html}},
note = {Accessed: August 2014}
}
@article{Bhargava1991,
abstract = {The tomato-tomahto problem (known as the synonymy problem in the database literature) arises in the context of model management when different names are used in different models for what should be identical variables, and these different models are to be integrated or combined into a larger model. When this problem occurs, it is said that the unique names assumption has been violated. We propose a method by which violations of the unique names assumption can be automatically detected. The method relies on declaring four kinds of information and modeling variables: dimensional information, laws relating dimensional expressions, information (called the quiddity) about the intended interpretation of the variables, and laws relating quiddity expressions. We present and discuss the method and the principles and theory behind it, and we describe our (prototype) implementation of the method, as an additional function of an existing model management system. INFORMS Journal on Computing, ISSN 1091-9856, was published as ORSA Journal on Computing from 1989 to 1995 under ISSN 0899-1499.},
annote = {        From Duplicate 1 (                           Unique Names Violations, a Problem for Model Integration or You Say Tomato, I Say Tomahto                         - Bhargava, H. K.; Kimbrough, S. O.; Krishnan, R. )
And  Duplicate 2 (                           Unique Names Violations, a Problem for Model Integration or You Say Tomato, I Say Tomahto                         - Bhargava, H K; Kimbrough, S O; Krishnan, R )
                
        
        
      },
author = {Bhargava, HK K. and Kimbrough, S. O. and Krishnan, R.},
doi = {10.1287/ijoc.3.2.107},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bhargava - 1991 - Unique names violations, a problem for model integration or you say tomato, I say tomahto.pdf:pdf},
issn = {1091-9856},
journal = {INFORMS Journal on Computing},
month = jan,
number = {2},
pages = {107--120},
title = {{Unique Names Violations, a Problem for Model Integration or You Say Tomato, I Say Tomahto}},
url = {http://joc.journal.informs.org/content/3/2/107.short},
volume = {3},
year = {1991}
}
@article{Korel1998a,
abstract = {Presents a classification of existing dynamic slicing methods and discusses the algorithms to compute dynamic slices. Overview of basic computer program slicing related terminology; General overview of dynamic program slicing; Major existing dynamic slicing algorithms; Comparison of the existing dynamic slicing methods and algorithms.},
annote = {        From Duplicate 1 (                   Dynamic Program Slicing Methods                 - Korel, Bogdan; Rilling, Jurgen )
                
        
        
      },
author = {Korel, Bogdan and Rilling, Jurgen},
doi = {10.1016/S0950-5849(98)00089-5},
editor = {Harman, Mark and Gallagher, Keith},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Korel, Rilling - 1998 - Dynamic Program Slicing Methods.pdf:pdf},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {classification,comparison,dynamic program slicing,dynamic slicing algorithms},
number = {11-12},
pages = {647--659},
publisher = {Elsevier},
title = {{Dynamic Program Slicing Methods}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0950584998000895},
volume = {40},
year = {1998}
}
@inproceedings{Bertino2012,
author = {Bertino, Nic},
booktitle = {Proceedings of the ACM SIGUCCS 40th annual conference on Special interest group on university and college computing services - SIGUCCS '12},
doi = {10.1145/2382456.2382510},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bertino - 2012 - Modern version control.pdf:pdf},
isbn = {9781450314947},
keywords = {automated deployment,decentralized,decentralized version control,git,issue tracking,redmine,source control,version control},
month = oct,
pages = {219--222},
publisher = {ACM Press},
title = {{Modern version control}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=2382456.2382510},
year = {2012}
}
@book{Fowler1999,
author = {Fowler, Martin and Beck, Kent and Brant, John and Opdyke, William and Roberts, Don},
isbn = {0201485672},
pages = {464},
publisher = {Addison-Wesley Professional},
title = {{Refactoring: Improving the Design of Existing Code}},
url = {http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672},
year = {1999}
}
@article{Grundy1993,
annote = {        From Duplicate 1 (                           Constructing multi-view editing environments using MViews                         - Grundy, John C; Hosking, John G )
                
        
        
      },
author = {Grundy, John C and Hosking, John G},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Grundy, Hosking - 1993 - Constructing multi-view editing environments using MViews.pdf:pdf},
journal = {Visual Languages, 1993., \ldots},
title = {{Constructing multi-view editing environments using MViews}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=269600},
year = {1993}
}
@inproceedings{Advani2006,
annote = {        From Duplicate 1 (                           Extracting refactoring trends from open-source software and a possible solution to the 'related refactoring' conundrum                         - Advani, Deepak; Hassoun, Youssef; Counsell, Steve )
                
        
        
      },
author = {Advani, Deepak and Hassoun, Youssef and Counsell, Steve},
booktitle = {Proceedings of the 2006 ACM symposium on Applied computing - SAC '06},
doi = {10.1145/1141277.1141685},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Advani, Hassoun, Counsell - 2006 - Extracting refactoring trends from open-source software and a possible solution to the 'related refac.pdf:pdf},
isbn = {1595931082},
keywords = {dependencies,empirical analysis,object-oriented,refactoring,tool},
month = apr,
pages = {1713},
publisher = {ACM Press},
title = {{Extracting refactoring trends from open-source software and a possible solution to the 'related refactoring' conundrum}},
url = {http://dl.acm.org/citation.cfm?id=1141277.1141685},
year = {2006}
}
@article{Mens2002a,
annote = {        From Duplicate 1 (                   A state-of-the-art survey on software merging                 - Mens, T )
                
        
        
      },
author = {Mens, T.},
doi = {10.1109/TSE.2002.1000449},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mens - 2002 - A state-of-the-art survey on software merging.pdf:pdf},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
month = may,
number = {5},
pages = {449--462},
title = {{A state-of-the-art survey on software merging}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1000449},
volume = {28},
year = {2002}
}
@inproceedings{Storey2011,
abstract = {A decade ago, projects in the program comprehension community investigated how software visualization could enhance the exploration and navigation of large software systems. At IWPC in 2001, we demonstrated the SHriMP (Simple Hierarchical Multiple Perspective) visualization tool, which provided a navigable interface integrating a variety of graph-based layouts with hypertext versions of source code and documentation. At the time, there were a number of tools that shared some of SHriMP's features and researchers shared challenges when implementing these tools, as well as in understanding how they could evaluate these tools for future adoption. In this talk, I will review SHriMP's early features and demonstrate how the tool was eventually integrated with the Eclipse Integrated Development Environment. I will also discuss some of the successful and unsuccessful approaches we used to evaluate this and other visualization tools. I will conclude by discussing the many lessons we learned throughout the SHriMP research project, while highlighting some of the challenges that are still relevant in today's research.},
annote = {        From Duplicate 1 (                           An interactive visualization environment for exploring Java programs: SHriMP views revisited                         - Storey, Margaret-Anne D )
                
        
        
      },
author = {Storey, Margaret-Anne D.},
booktitle = {2011 IEEE 19th International Conference on Program Comprehension},
doi = {10.1109/ICPC.2011.51},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Storey - 2011 - An interactive visualization environment for exploring Java programs SHriMP views revisited.pdf:pdf},
isbn = {978-1-61284-308-7},
issn = {1092-8138},
keywords = {Java,Java programs,SHriMP views,data visualisation,graph-based layouts,interactive systems,interactive visualization environment,simple hierarchical multiple perspective,software visualization},
month = jun,
pages = {xviii--xviii},
publisher = {IEEE},
shorttitle = {Program Comprehension (ICPC), 2011 IEEE 19th Inter},
title = {{An interactive visualization environment for exploring Java programs: SHriMP views revisited}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5970199},
year = {2011}
}
@misc{Pace,
author = {Pace, Jeff},
title = {{JDiff}},
url = {https://github.com/jpace/diffj},
urldate = {August 2014},
howpublished = {\url{https://github.com/jpace/diffj}},
note = {Accessed: August 2014}
}
@article{Binkley2006a,
abstract = {This paper presents a theory of dynamic slicing, which reveals that the relationship between static and dynamic slicing is more subtle than previously thought. The definitions of dynamic slicing are formulated in terms of the projection theory of slicing. This shows that existing forms of dynamic slicing contain three orthogonal dimensions in their slicing criteria and allows for a lattice-theoretic study of the subsumption relationship between these dimensions and their relationship to static slicing formulations. (C) 2006 Elsevier B.V. All rights reserved.},
annote = {        From Duplicate 2 (                           Theoretical foundations of dynamic program slicing                         - Binkley, D; Danicic, S; Gyimothy, T; Harman, M; Kiss, A; Korel, B )
                
        
        
      },
author = {Binkley, D and Danicic, S and Gyimothy, T and Harman, M and Kiss, A and Korel, B},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Binkley et al. - 2006 - Theoretical foundations of dynamic program slicing.pdf:pdf},
journal = {Theoretical Computer Science},
keywords = {dynamic slicing,program slicing},
number = {1-3},
pages = {23--41},
publisher = {Elsevier},
title = {{Theoretical foundations of dynamic program slicing}},
url = {http://dx.doi.org/10.1016/j.tcs.2006.01.012},
volume = {360},
year = {2006}
}
@inproceedings{Storey2002,
annote = {        From Duplicate 1 (                   SHriMP views                 - Storey, Margaret-Anne D; Best, Casey; Michaud, Jeff; Rayside, Derek; Litoiu, Marin; Musen, Mark )
                
        
        
      },
author = {Storey, Margaret-Anne D. and Best, Casey and Michaud, Jeff and Rayside, Derek and Litoiu, Marin and Musen, Mark},
booktitle = {CHI '02 extended abstracts on Human factors in computing systems - CHI '02},
doi = {10.1145/506443.506459},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Storey et al. - 2002 - SHriMP views.pdf:pdf},
isbn = {1581134541},
keywords = {are applied to software,diagram visualization,engineering,flow diagrams,information navigation,information visualization,knowledge engineering and flow,knowledge management,methods and how they,shrimp has been designed,software tools,using the javabean component},
month = apr,
pages = {520},
publisher = {ACM Press},
title = {{SHriMP views}},
url = {http://dl.acm.org/citation.cfm?id=506443.506459},
year = {2002}
}
@article{Baumgartner1996,
annote = {        From Duplicate 2 (                           On the Interaction of Object-Oriented Design Patterns and Programming Languages                         - Baumgartner, Gerald; Rego, Vernon J )
                
        
        
      },
author = {Baumgartner, Gerald and Rego, Vernon J},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Baumgartner, Rego - 1996 - On the Interaction of Object-Oriented Design Patterns and Programming Languages.pdf:pdf},
title = {{On the Interaction of Object-Oriented Design Patterns and Programming Languages}},
year = {1996}
}
@article{Jackson2013a,
annote = {        From Duplicate 2 (                   Why CSCW needs science policy (and vice versa)                 - Jackson, Steven J; Steinhardt, Stephanie B; Buyuktur, Ayse )
                
        
        
      },
author = {Jackson, Steven J. and Steinhardt, Stephanie B. and Buyuktur, Ayse},
doi = {10.1145/2441776.2441902},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Jackson, Steinhardt, Buyuktur - 2013 - Why CSCW needs science policy (and vice versa).pdf:pdf},
isbn = {9781450313315},
journal = {Proceedings of the 2013 conference on Computer supported cooperative work - CSCW '13},
keywords = {collaboration,collaborative tools,cyberinfrastructure,e-research,policy,science},
month = feb,
pages = {1113},
publisher = {ACM Press},
title = {{Why CSCW needs science policy (and vice versa)}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=2441776.2441902 http://dl.acm.org/citation.cfm?doid=2441776.2441902},
year = {2013}
}
@article{Wirfs-Brock2008,
annote = {        From Duplicate 2 (                   Designing Then and Now                 - Wirfs-Brock, Rebecca J )
                
        
        
      },
author = {Wirfs-Brock, Rebecca J.},
doi = {10.1109/MS.2008.146},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wirfs-Brock - 2008 - Designing Then and Now.pdf:pdf},
issn = {0740-7459},
journal = {IEEE Software},
month = nov,
number = {6},
pages = {29--31},
title = {{Designing Then and Now}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4670709},
volume = {25},
year = {2008}
}
@article{Ekman2004,
author = {Ekman, Torbj\"{o}rn and Asklund, Ulf},
doi = {10.1016/j.entcs.2004.02.048},
file = {:home/paran/Documents/Study/Articles/1-s2.0-S1571066104051916-main.pdf:pdf},
issn = {15710661},
journal = {Electronic Notes in Theoretical Computer Science},
month = dec,
pages = {57--69},
title = {{Refactoring-aware versioning in Eclipse}},
url = {http://www.researchgate.net/publication/220369963\_Refactoring-aware\_versioning\_in\_Eclipse?ev=prf\_cit},
volume = {107},
year = {2004}
}
@inproceedings{Ludwig2008b,
annote = {        From Duplicate 1 (                   Versioning in distributed semantic registries                 - Ludwig, Christoph; K\"{u}ster, Marc Wilhelm; Moore, Graham )
                
        
        
      },
author = {Ludwig, Christoph and K\"{u}ster, Marc Wilhelm and Moore, Graham},
booktitle = {Proceedings of the 10th International Conference on Information Integration and Web-based Applications \& Services - iiWAS '08},
doi = {10.1145/1497308.1497398},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ludwig, K\"{u}ster, Moore - 2008 - Versioning in distributed semantic registries.pdf:pdf},
isbn = {9781605583495},
keywords = {ontology evolution,semantic registries,semantic web,topic maps,versioning},
month = nov,
pages = {493},
publisher = {ACM Press},
title = {{Versioning in distributed semantic registries}},
url = {http://dl.acm.org/citation.cfm?id=1497308.1497398},
year = {2008}
}
@book{Arslan2010,
author = {Arslan, Abdullah N.},
doi = {10.1007/978-3-642-13089-2},
editor = {Dediu, Adrian-Horia and Fernau, Henning and Mart\'{\i}n-Vide, Carlos},
isbn = {978-3-642-13088-5},
keywords = {algorithm,dynamic programming,edit distance,longest common extension,longest common subsequence,lowest common ancestor,string,suffix array,suffix tree},
mendeley-tags = {longest common subsequence},
month = may,
pages = {82--93},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{Language and Automata Theory and Applications}},
url = {http://dl.acm.org/citation.cfm?id=2166651.2166660},
volume = {6031},
year = {2010}
}
@inproceedings{Gallagher1991,
address = {New York, New York, USA},
annote = {        From Duplicate 1 (                   Conditions to assure semantically consistent software merges in linear time                 - Gallagher, Keith )
                
        
        
      },
author = {Gallagher, Keith},
booktitle = {Proceedings of the 3rd international workshop on Software configuration management -},
doi = {10.1145/111062.111072},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gallagher - 1991 - Conditions to assure semantically consistent software merges in linear time.pdf:pdf},
isbn = {08979144295},
month = may,
pages = {80--83},
publisher = {ACM Press},
title = {{Conditions to assure semantically consistent software merges in linear time}},
url = {http://dl.acm.org/citation.cfm?id=111062.111072},
year = {1991}
}
@article{Sendrier,
annote = {        From Duplicate 1 (                   How Easy is Code Equivalence over GF ( q ) ?                 - Sendrier, Nicolas; Paris-rocquencourt, Inria )
                
        
        
      },
author = {Sendrier, Nicolas and Paris-rocquencourt, Inria},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sendrier, Paris-rocquencourt - Unknown - How Easy is Code Equivalence over GF ( q ).pdf:pdf},
pages = {1--2},
title = {{How Easy is Code Equivalence over GF ( q ) ?}}
}
@article{Hu1999,
annote = {        From Duplicate 1 (                           Towards a Practical Visual Object-Oriented Programming Environment: Desirable Functionalities and their Implementation.                         - Hu, C H; Wang, F J )
                
        
        
      },
author = {Hu, CH H and Wang, FJ J},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hu, Wang - 1999 - Towards a Practical Visual Object-Oriented Programming Environment Desirable Functionalities and their Implementation.pdf:pdf},
journal = {J. Inf. Sci. Eng.},
keywords = {c,incremental program development,integrated programming environment,object-oriented,techniques,visual programming},
pages = {585--614},
title = {{Towards a Practical Visual Object-Oriented Programming Environment: Desirable Functionalities and their Implementation.}},
url = {http://www.iis.sinica.edu.tw/page/jise/1999/199907\_07.pdf},
year = {1999}
}
@article{Jang2012,
annote = {        From Duplicate 1 (                           Automatic code overlay generation and partially redundant code fetch elimination                         - Jang, Choonki; Lee, Jaejin; Egger, Bernhard; Ryu, Soojung )
                
        
        
      },
author = {Jang, Choonki and Lee, Jaejin and Egger, Bernhard and Ryu, Soojung},
doi = {10.1145/2207222.2207226},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Jang et al. - 2012 - Automatic code overlay generation and partially redundant code fetch elimination.pdf:pdf},
issn = {15443566},
journal = {ACM Transactions on Architecture and Code Optimization},
keywords = {Code overlays,Partial redundancy elimination,Path expressions,Static temporal relationship graphs},
month = jun,
number = {2},
pages = {1--32},
publisher = {ACM},
title = {{Automatic code overlay generation and partially redundant code fetch elimination}},
url = {http://dl.acm.org/citation.cfm?id=2207222.2207226},
volume = {9},
year = {2012}
}
@article{Hendrix2004,
annote = {        From Duplicate 2 (                           An extensible framework for providing dynamic data structure visualizations in a lightweight IDE                         - Hendrix, T Dean; Ii, James H Cross; Barowski, Larry A; Cross, James H )
                
        
        
      },
author = {Hendrix, T. Dean and Ii, James H Cross and Barowski, Larry A. and Cross, James H.},
doi = {10.1145/1028174.971433},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hendrix et al. - 2004 - An extensible framework for providing dynamic data structure visualizations in a lightweight IDE.pdf:pdf},
isbn = {1-58113-798-2},
issn = {00978418},
journal = {ACM SIGCSE Bulletin},
keywords = {IDE,algorithm animation,data structures,program visualization},
mendeley-tags = {IDE},
month = mar,
number = {1},
pages = {387},
publisher = {ACM},
title = {{An extensible framework for providing dynamic data structure visualizations in a lightweight IDE}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=1028174.971433},
volume = {36},
year = {2004}
}
@article{Loeliger2006,
abstract = {At the heart of collaboration using git is the ability to use public repositories as the basis for your own development, and in turn to publish your repository so others may use it. This article introduces the means to base your development on public git repositories and details the installation and configuration procedures for publishing your own repositories.},
annote = {        From Duplicate 2 (                           Collaborating With Git                         - Loeliger, Jon )
                
        
        
      },
author = {Loeliger, Jon},
journal = {Linux Magazine},
keywords = {git,msr},
mendeley-tags = {git,msr},
pages = {32--35},
title = {{Collaborating With Git}},
url = {http://www.linux-mag.com/id/2695},
volume = {46},
year = {2006}
}
@inproceedings{Kats2012,
address = {New York, New York, USA},
annote = {        From Duplicate 2 (                   Software development environments on the web                 - Kats, Lennart C L L; Kalleberg, Karl Trygve; Vogelij, Richard G; Visser, Eelco )
                
        
        
      },
author = {Kats, Lennart C.L. L L and Kalleberg, Karl Trygve and Vogelij, Richard G. and Visser, Eelco},
booktitle = {Proceedings of the ACM international symposium on New ideas, new paradigms, and reflections on programming and software - Onward! '12},
doi = {10.1145/2384592.2384603},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kats et al. - 2012 - Software development environments on the web.pdf:pdf},
isbn = {9781450315623},
keywords = {allows ubiquitous access,and avoids installation and,cloud,cloud9,collaboration,con-,ide,instant collaboration,integrated de-,integrated development environment,integration,interactive development environment,online,spoofax,velopment environment,web,with other online services},
month = oct,
pages = {99},
publisher = {ACM Press},
title = {{Software development environments on the web}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=2384592.2384603},
year = {2012}
}
@article{Jacob2010,
address = {New York, New York, USA},
annote = {        From Duplicate 2 (                   Code template inference using language models                 - Jacob, Ferosh; Tairas, Robert )
                
        
        
      },
author = {Jacob, Ferosh and Tairas, Robert},
doi = {10.1145/1900008.1900143},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Jacob, Tairas - 2010 - Code template inference using language models.pdf:pdf},
isbn = {9781450300643},
journal = {Proceedings of the 48th Annual Southeast Regional Conference on - ACM SE '10},
keywords = {Templates},
mendeley-tags = {Templates},
pages = {1},
publisher = {ACM Press},
title = {{Code template inference using language models}},
url = {http://portal.acm.org/citation.cfm?doid=1900008.1900143},
year = {2010}
}
@misc{Vagac2012,
abstract = {The maintenance of a software system represents an important part in its$\backslash$nlifetime. In general, each software system is the subject of different$\backslash$nkinds of changes. Bug fixes and a new functionality extensions are the$\backslash$nmost common reasons for a change. Usually, a change is accomplished by$\backslash$nsource code modifications. To make such a modification, correct$\backslash$nunderstanding the current state of a system is required.$\backslash$nThis paper presents the innovative approach to the simplification of$\backslash$nprogram comprehension. Based on the presented method, the affected$\backslash$nsoftware system is analysed and metamodel for the selected feature is$\backslash$ncreated. The feature represents functional aspect of a system being the$\backslash$nsubject of the analysis and change. The main benefit is that by focusing$\backslash$non well known (and precisely described) parts of program implementation,$\backslash$nit is possible to create metamodel for implementation parts$\backslash$nautomatically. The level of metamodel is at a higher level of$\backslash$nabstraction than implementation.},
annote = {        From Duplicate 1 (                           Improving program comprehension by automatic metamodel abstraction                         - Vagac, Michal; Koll\'{a}r, J\'{a}n )
                
        
        
      },
author = {Vagac, Michal and Koll\'{a}r, J\'{a}n},
booktitle = {Computer Science and Information Systems},
doi = {10.2298/CSIS110406047V},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Vagac, Koll\'{a}r - 2012 - Improving program comprehension by automatic metamodel abstraction.pdf:pdf},
issn = {1820-0214},
pages = {235--247},
title = {{Improving program comprehension by automatic metamodel abstraction}},
volume = {9},
year = {2012}
}
@article{Chacon2009,
abstract = {Git is the version control system developed by Linus Torvalds for Linux kernel development. It took the open source world by storm since its inception in 2005, and is used by small development shops and giants like Google, Red Hat, and IBM, and of course many open source projects. A book by Git experts to turn you into a Git expert Introduces the world of distributed version control Shows how to build a Git development workflow What you’ll learn Use Git as a programmer or a project leader Become a fluent Git user Use distributed features of Git to the full Acquire the ability to insert Git in the development workflow Migrate programming projects from other SCMs to Git Learn how to extend Git Who this book is for This book is for all open source developers: you are bound to encounter Git somewhere in the course of your working life. Proprietary software developers will appreciate Git’s enormous scalability, since it is used for the Linux project, which comprises thousands of developers and testers. Table of Contents Getting Started Git Basics Git Branching Git on the Server Distributed Git Git Tools Customizing Git Git and Other Systems Git Internals},
annote = {        From Duplicate 1 (                           Pro Git                         - Chacon, Scott )
                
        From Duplicate 2 (                           Pro Git                         - Chacon, Scott )
                
        
        
        
        
      },
author = {Chacon, Scott and Cornell, Gary and Gennick, Jonathan and Lowman, Michelle and Moodie, Matthew and Pepper, Jeffrey and Pohlmann, Frank and Renow-clarke, Ben and Shakeshaft, Dominic and Wade, Matt and Welsh, Tom},
doi = {10.1007/978-1-4302-1834-0},
file = {:home/paran/Documents/Study/Articles/progit.en.pdf:pdf;:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Chacon - 2009 - Pro Git(2).pdf:pdf;:home/paran/Documents/Study/Articles/bok\%3A978-1-4302-1834-0.pdf:pdf},
isbn = {978-1-4302-1833-3},
issn = {978-1-4302-1833-3},
journal = {Control},
keywords = {Computers / Software Development \& Engineering / T,DVCS,Folder - Informatika,Folder - modelling (methods) - Git,MATLAB,Project Report,Utilities,code,coding,collaboration,dropbox,git,git revision control,git\_doc,manual,msr,open source,printed,programming,project,scm,software development,vcs,version control,version control system,科学@蝉},
mendeley-tags = {Computers / Software Development \& Engineering / T,DVCS,Folder - Informatika,Folder - modelling (methods) - Git,MATLAB,Project Report,Utilities,code,coding,collaboration,dropbox,git,git revision control,git\_doc,manual,msr,open source,printed,programming,project,scm,software development,vcs,version control,version control system,科学@蝉},
pages = {1--210},
pmid = {10591480},
title = {{Pro Git}},
url = {http://www.springerlink.com/index/10.1007/978-1-4302-1834-0$\backslash$nhttp://books.google.com/books?hl=en\&amp;lr=\&amp;id=qJsXefpx1AUC\&amp;oi=fnd\&amp;pg=PR14\&amp;dq=pro+Git\&amp;ots=jPHxpHDZKg\&amp;sig=kbOrJBUjX2jP8grGqw295Wx9z9A$\backslash$nhttp://books.google.com/books?hl=en\&amp$\backslash$nlr=\&amp$\backslash$nid=qJsXefpx1AUC\&amp$\backslash$noi=fnd\&amp$\backslash$npg=PR14\&amp$\backslash$ndq=pro+Git\&amp$\backslash$nots=jPHxpHDZKg\&amp$\backslash$nsig=kbOrJBUjX2jP8grGqw295Wx9z9A http://www.springerlink.com/index/10.1007/978-1-4302-1834-0},
year = {2009}
}
@article{Tichy1982,
author = {Tichy, Walter F.},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tichy - 1982 - Design, implementation, and evaluation of a Revision Control System.pdf:pdf},
month = sep,
pages = {58--67},
publisher = {IEEE Computer Society Press},
title = {{Design, implementation, and evaluation of a Revision Control System}},
url = {http://dl.acm.org/citation.cfm?id=800254.807748},
year = {1982}
}
@article{Dig2006b,
annote = {        From Duplicate 1 (                           How do APIs evolve? A story of refactoring                         - Dig, Danny; Johnson, Ralph E )
                
        
        
      },
author = {Dig, Danny and Johnson, Ralph E.},
doi = {10.1002/smr.328},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dig, Johnson - 2006 - How do APIs evolve A story of refactoring.pdf:pdf},
issn = {1532-060X},
journal = {Journal of Software Maintenance and Evolution: Research and Practice},
month = mar,
number = {2},
pages = {83--107},
title = {{How do APIs evolve? A story of refactoring}},
url = {http://doi.wiley.com/10.1002/smr.328},
volume = {18},
year = {2006}
}
@inproceedings{Milea2014,
address = {New York, New York, USA},
author = {Milea, Narcisa Andreea and Jiang, Lingxiao and Khoo, Siau-Cheng},
booktitle = {Proceedings of the 2014 International Symposium on Software Testing and Analysis - ISSTA 2014},
doi = {10.1145/2610384.2610394},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Milea, Jiang, Khoo - 2014 - Scalable detection of missed cross-function refactorings.pdf:pdf},
isbn = {9781450326452},
keywords = {Refactoring,Software Evolution,Vector-based representation},
month = jul,
pages = {138--148},
publisher = {ACM Press},
title = {{Scalable detection of missed cross-function refactorings}},
url = {http://dl.acm.org/citation.cfm?id=2610384.2610394},
year = {2014}
}
@inproceedings{Bruch2009a,
address = {New York, New York, USA},
annote = {        From Duplicate 2 (                           Learning from examples to improve code completion systems                         - Bruch, Marcel; Monperrus, Martin; Mezini, Mira )
                
        
        
      },
author = {Bruch, Marcel and Monperrus, Martin and Mezini, Mira},
booktitle = {Proceedings of the 7th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering on European software engineering conference and foundations of software engineering symposium - E},
doi = {10.1145/1595696.1595728},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bruch, Monperrus, Mezini - 2009 - Learning from examples to improve code completion systems.pdf:pdf},
isbn = {9781605580012},
keywords = {code completion,code recommender,content assist,integrated development environment},
month = aug,
pages = {213},
publisher = {ACM Press},
title = {{Learning from examples to improve code completion systems}},
url = {http://dl.acm.org/citation.cfm?id=1595696.1595728},
year = {2009}
}
@article{Tang2009,
abstract = {This paper presents the capturing and recording of reasoning behind software architecture design to encourage architects to more carefully consider design decisions and better support future maintenance.},
annote = {        From Duplicate 1 (                           Software Architecture Design Reasoning: A Case for Improved Methodology Support                         - Tang, A; Han, J; Vasa, R; Architecture, Software )
                
        
        
      },
author = {Tang, A. and Han, J. and Vasa, R. and Architecture, Software},
doi = {10.1109/MS.2009.46},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tang et al. - 2009 - Software Architecture Design Reasoning A Case for Improved Methodology Support.pdf:pdf},
isbn = {0740-7459},
issn = {0740-7459},
journal = {IEEE Software},
keywords = {1SD,2Software Design Fundamentals,3Enabling Techniques,AREL,Architectural Knowledge,Capturing,Computer architecture,Context,Decision making,Design methodology,MA Tom,Process design,Productivity,Software design,UML,design,design decisions,design rationale,design reasoning,improved methodology support,r4,service interactions,software,software architecture,software architecture design reasoning,software engineering,software maintenance,software-architecture,software-engineering,speech acts,stujb},
mendeley-tags = {1SD,2Software Design Fundamentals,3Enabling Techniques,AREL,Architectural Knowledge,Capturing,Computer architecture,Context,Decision making,Design methodology,MA Tom,Process design,Productivity,Software design,UML,design,design decisions,design rationale,design reasoning,improved methodology support,r4,service interactions,software,software architecture,software architecture design reasoning,software engineering,software maintenance,software-architecture,software-engineering,speech acts,stujb},
pages = {43--49},
pmid = {23000436},
title = {{Software Architecture Design Reasoning: A Case for Improved Methodology Support}},
volume = {26},
year = {2009}
}
@inproceedings{Kim2006b,
address = {New York, New York, USA},
annote = {        From Duplicate 1 (                           TA-RE                         - Kim, Sunghun; Zimmermann, Thomas; Kim, Miryung; Hassan, Ahmed; Mockus, Audris; Girba, Tudor; Pinzger, Martin; Whitehead, E James; Zeller, Andreas )
                
        
        
      },
author = {Kim, Sunghun and Zimmermann, Thomas and Kim, Miryung and Hassan, Ahmed and Mockus, Audris and Girba, Tudor and Pinzger, Martin and Whitehead, E. James and Zeller, Andreas},
booktitle = {Proceedings of the 2006 international workshop on Mining software repositories - MSR '06},
doi = {10.1145/1137983.1137990},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kim et al. - 2006 - TA-RE.pdf:pdf},
isbn = {1595933972},
keywords = {analysis,corpus,prediction,software repository mining},
month = may,
pages = {22},
publisher = {ACM Press},
title = {{TA-RE}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=1137983.1137990 http://dl.acm.org/citation.cfm?id=1137983.1137990},
year = {2006}
}
@article{Tjortjis2003,
abstract = {Program comprehension is an important part of software maintenance, especially when program structure is complex and documentation is unavailable or outdated. Data mining can produce structural views of source code thus facilitating legacy systems understanding. This paper presents a method for mining association rules from code aiming at capturing program structure and achieving better system understanding. A tool was implemented to assess this method. It inputs data extracted from code and derives association rules. Rules are then processed to abstract programs into groups containing interrelated entities. Entities are grouped together if their attributes participate in common rules. The abstraction is performed at the function level, in contrast to other approaches, that work at the program level. The method was evaluated using real, working programs. Programs are fed into a code analyser which produces the input needed for the mining tool. Results show that the method facilitates program comprehension by only using source code where domain knowledge and reliable documentation are not available or reliable.},
author = {Tjortjis, C and Sinos, L and Layzell, P},
doi = {10.1109/WPC.2003.1199196},
isbn = {0769518834},
issn = {10928138},
journal = {Program},
pages = {125--132},
title = {{Facilitating program comprehension by mining association rules from source code}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1199196},
year = {2003}
}
@article{Murphy-Hill2008,
abstract = {Refactoring is the process of changing the structure of code without changing its behavior. Refactoring can be semi-automated with tools, which should make it easier for programmers to refactor quickly and correctly. However, we have observed that many tools do a poor job of communicating errors triggered by the refactoring process and that programmers using them sometimes refactor slowly, conservatively, and incorrectly. In this paper we characterize problems with current refactoring tools, demonstrate three new tools to assist in refactoring, and report on a user study that compares these new tools against existing tools. The results of the study show that speed, accuracy, and user satisfaction can be significantly increased. From the new tools we induce a set of usability recommendations that we hope will help inspire a new generation of programmer-friendly refactoring tools.},
author = {Murphy-Hill, E. and Black, A.},
doi = {10.1145/1368088.1368146},
isbn = {978-1-60558-079-1},
issn = {0270-5257},
journal = {2008 ACM/IEEE 30th International Conference on Software Engineering},
keywords = {code structure,environments,extract method,programmer-friendly refactoring tools,refactoring,refactoring process,software tools,tools,usability},
mendeley-tags = {code structure,extract method,programmer-friendly refactoring tools,refactoring process,software tools},
title = {{Breaking the barriers to successful refactoring}},
pages =	"421--430",
year = {2008}
}
@article{Grundya,
annote = {        From Duplicate 2 (                           Constructing Integrated Software Development Environments with MViews                         - Grundy, John C; Hosking, John G )
                
        
        
      },
author = {Grundy, John C and Hosking, John G},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Grundy, Hosking - 1996 - Constructing Integrated Software Development Environments with MViews.pdf:pdf},
journal = {International Journal of Applied Software Technology},
keywords = {MViews},
mendeley-tags = {MViews},
number = {3/4},
pages = {133--160},
title = {{Constructing Integrated Software Development Environments with MViews}},
volume = {2},
year = {1996}
}
@inproceedings{Williams2008,
address = {New York, New York, USA},
author = {Williams, Chadd C. and Spacco, Jaime W.},
booktitle = {Proceedings of the 2008 international workshop on Mining software repositories - MSR '08},
doi = {10.1145/1370750.1370754},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Williams, Spacco - 2008 - Branching and merging in the repository.pdf:pdf},
isbn = {9781605580241},
keywords = {change,diff,mining,repository,subversion},
month = may,
pages = {19},
publisher = {ACM Press},
title = {{Branching and merging in the repository}},
url = {http://dl.acm.org/citation.cfm?id=1370750.1370754},
year = {2008}
}
@article{Myers1986,
author = {Myers, Eugene W.},
doi = {10.1007/BF01840446},
issn = {0178-4617},
journal = {Algorithmica},
keywords = {difference algorithm},
mendeley-tags = {difference algorithm},
month = nov,
number = {1-4},
pages = {251--266},
title = {{AnO(ND) difference algorithm and its variations}},
url = {http://link.springer.com/10.1007/BF01840446},
volume = {1},
year = {1986}
}
@article{Bruch2006,
annote = {        From Duplicate 2 (                           FrUiT: IDE support for framework understanding                         - Bruch, Marcel; Sch\"{a}fer, T; Mezini, Mira )
                
        
        
      },
author = {Bruch, Marcel and Sch\"{a}fer, T and Mezini, Mira},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bruch, Sch\"{a}fer, Mezini - 2006 - FrUiT IDE support for framework understanding.pdf:pdf},
journal = {\ldots of the 2006 OOPSLA workshop on \ldots},
keywords = {IDE},
mendeley-tags = {IDE},
title = {{FrUiT: IDE support for framework understanding}},
url = {http://dl.acm.org/citation.cfm?id=1188847},
year = {2006}
}
@article{Grundy2004a,
annote = {        From Duplicate 2 (                           Domain-specific visual languages for specifying and generating data mapping systems                         - Grundy, John C; Hosking, John G; Amor, R W; Mugridge, W B; Li, Y )
                
        
        
      },
author = {Grundy, John C and Hosking, John G and Amor, R.W. W and Mugridge, W.B. B and Li, Y.},
doi = {10.1016/j.jvlc.2004.01.003},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Grundy et al. - 2004 - Domain-specific visual languages for specifying and generating data mapping systems.pdf:pdf},
issn = {1045926X},
journal = {Journal of Visual Languages \& Computing},
month = jun,
number = {3-4},
pages = {243--263},
title = {{Domain-specific visual languages for specifying and generating data mapping systems}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S1045926X04000102},
volume = {15},
year = {2004}
}
@book{Tracz1995,
author = {Tracz, Will},
isbn = {0201633698},
pages = {233},
publisher = {Addison Wesley Longman},
title = {{Confessions of a Used Program Salesman}},
url = {http://www.amazon.com/Confessions-Used-Program-Salesman-Tracz/dp/0201633698},
year = {1995}
}
@inproceedings{Apel2011,
address = {New York, New York, USA},
annote = {        From Duplicate 2 (                           Semistructured merge                         - Apel, Sven; Liebig, J\"{o}rg; Brandl, Benjamin; Lengauer, Christian; K\"{a}stner, Christian )
                
        
        
      },
author = {Apel, Sven and Liebig, J\"{o}rg and Brandl, Benjamin and Lengauer, Christian and K\"{a}stner, Christian},
booktitle = {Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering - SIGSOFT/FSE '11},
doi = {10.1145/2025113.2025141},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Apel et al. - 2011 - Semistructured merge.pdf:pdf},
isbn = {9781450304436},
keywords = {featurehouse,fstmerge,revision control,semistructured merge,software merging,version control},
month = sep,
pages = {190 -- 200},
publisher = {ACM Press},
title = {{Semistructured merge}},
url = {http://dl.acm.org/citation.cfm?id=2025113.2025141},
year = {2011}
}
@inproceedings{Seguin2000,
annote = {        From Duplicate 1 (                           Refactoring tool challenges in a strongly typed language (poster session)                         - Seguin, Christopher )
                
        
        
      },
author = {Seguin, Christopher},
booktitle = {Addendum to the 2000 proceedings of the conference on Object-oriented programming, systems, languages, and applications (Addendum) - OOPSLA '00},
doi = {10.1145/367845.367992},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Seguin - 2000 - Refactoring tool challenges in a strongly typed language (poster session).pdf:pdf},
isbn = {1581133073},
month = jan,
pages = {101--102},
publisher = {ACM Press},
title = {{Refactoring tool challenges in a strongly typed language (poster session)}},
url = {http://dl.acm.org/citation.cfm?id=367845.367992},
year = {2000}
}
@article{Johnson1992,
address = {New York, New York, USA},
annote = {        From Duplicate 1 (                           Documenting frameworks using patterns                         - Johnson, Ralph E )
                
        
        
      },
author = {Johnson, Ralph E.},
doi = {10.1145/141936.141943},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Johnson - 1992 - Documenting frameworks using patterns.pdf:pdf},
isbn = {0201533723},
issn = {03621340},
journal = {conference proceedings on Object-oriented programming systems, languages, and applications - OOPSLA '92},
month = oct,
number = {10},
pages = {63--76},
publisher = {ACM Press},
title = {{Documenting frameworks using patterns}},
url = {http://portal.acm.org/citation.cfm?doid=141936.141943 http://dl.acm.org/citation.cfm?id=141937.141943},
volume = {27},
year = {1992}
}
@article{Fan2012,
author = {Fan, Hongfei and Sun, Chengzheng},
doi = {10.1145/2340416.2340420},
file = {:home/paran/Documents/Study/Articles/p39-fan.pdf:pdf},
issn = {15596915},
journal = {ACM SIGAPP Applied Computing Review},
keywords = {conflict prevention,dependency graph,dependency relationship,locking,locking state maintenance,real-time collaborative programming,semantic conflict,semantic consistency},
month = jun,
number = {2},
pages = {39--52},
publisher = {ACM},
title = {{Supporting semantic conflict prevention in real-time collaborative programming environments}},
url = {http://dl.acm.org/citation.cfm?id=2340416.2340420},
volume = {12},
year = {2012}
}
@article{Bolat2009,
abstract = {A program segment such as a function or a basic block sequence may display different behaviors during the execution of the program. For example, a basic block sequence may consistently show few cache misses during the first 10 times it is executed, while the same basic block sequence may experience high number of cache misses when the sequence is invoked in the next 100 times. The divergence within the runtime behavior of program segment implies that different optimization choices should be made even for a single code segment if it shows different behaviors under different runtime contexts. However, traditional compilation technique rarely, if ever, takes advantage of that optimization opportunity. This concept is different from the finding of hot path, which has been done in both static compilation and dynamic optimization, whose purpose is to find the most frequently executed code segment and then to apply more aggressive and more expensive optimizations on that code segment. For the most part, behavior divergence other than execution frequency is not a factor in the determination of which optimizations to be applied to the segment. In this paper, we propose a novel feedback-driven program optimization technique that profiles and determines the runtime behaviors of code segments in a program to find the different patterns of behavior, correlates different runtime behaviors of a program segment with its program source code, and uses an empirical search method to customize the choice of optimization for same program segments under different runtime behaviors. We implement our optimization technique in LLVM and test our approach with SPEC2000 and SPEC2006 benchmarks. The preliminary results show promising performance improvement compared with the standard optimization settings used by the benchmarks.},
author = {Bolat, M. and Li, Xiaoming Li Xiaoming},
doi = {10.1109/PCCC.2009.5403838},
isbn = {978-1-4244-5737-3},
issn = {1097-2641},
journal = {Performance Computing and Communications Conference (IPCCC), 2009 IEEE 28th International},
title = {{Context-aware code optimization}},
year = {2009}
}
@article{Arimoto2008a,
address = {New York, New York, USA},
author = {Arimoto, Maur\'{\i}cio Massaru and Cagnin, Maria Istela and de Camargo, Valter Vieira},
doi = {10.1145/1363686.1363862},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Arimoto, Cagnin, de Camargo - 2008 - Version control in crosscutting framework-based development.pdf:pdf},
isbn = {9781595937537},
journal = {Proceedings of the 2008 ACM symposium on Applied computing - SAC '08},
keywords = {2,7,Aspect-Oriented Framework,Control Version,Framew,aspect-oriented frameworks,crosscutting frameworks,d,distribution,enhancement,framework,maintenance and,management,software configuration management,software engineering,standardization,theory,version control},
month = mar,
pages = {753},
publisher = {ACM Press},
title = {{Version control in crosscutting framework-based development}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=1363686.1363862 http://portal.acm.org/citation.cfm?doid=1363686.1363862},
year = {2008}
}
@book{Pissanetzky2006,
abstract = {This electronic book discusses refactoring with support from the relational model of computer programs. Code in all programming languages needs refactoring, and a multi-language refactoring engine is needed to refactor that code. Refactoring is about structure, and the book is about structure. The book proceeds to discuss the structure of code, argues that it needs to be identified, separated from language constructs, and encapsulated into a container. The encapsulated structure is preserved in a pristine state and serves as an invariant point of reference for the refactoring transformations.The book defines "bad" code as one with a damaged structure and "good" code as one with a properly encapsulated and logically sound structure. The book proposes the relational model as the container for the structure of the program and to serve as a language-independent, non-object-oriented repository with sufficient information to support refactoring. Relations are covered as a fundamental mathematical tool used to describe structure. The model can be created from existing code by a specialized parser, and a sparse matrix partitioning algorithm can create the refactored classes by recursively encapsulating user types. The combination of the model and the algorithm makes automatic polyglot refactoring of computer code possible. The model provides for integration of refactoring tools and development tools into one platform.The book also demonstrates that deep refactoring converts "bad" code into Strong Ownership code, a programming style described in the book, and demonstrates that the need for refactoring may be reduced by following the Strong Ownership prescriptions during development. The book includes many practical examples, presents experimental evidence, discusses various applications and possible implementations, and covers details of the process of refactoring with relational support, as well as the conversion from the model to final object-oriented code.Relational support for refactoring is a new concept. The production of tools will take time, meanwhile, developers are advised to mind Strong Ownership techniques. This is an 83-page eBook in PDF format presenting refactoring in a new light and a much larger scale. Downloads are provided and a page sample is available from SciControls.com. The page sample is a pdf file with the preface, table of contents, index, and some selected pages.},
author = {Pissanetzky, Sergio Jr.},
isbn = {0976277549},
pages = {83},
publisher = {Sergio Pissanetzky},
title = {{Refactoring with Relations. A New Method for Refactoring Object-Oriented Software}},
url = {http://books.google.com/books?id=9b5KEn052usC\&pgis=1},
year = {2006}
}
@misc{Vinz2008,
author = {Vinz, Bradley L. and Etzkorn, Letha H.},
booktitle = {Knowledge-Based Systems},
doi = {10.1016/j.knosys.2008.03.033},
issn = {09507051},
pages = {813--825},
title = {{Improving program comprehension by combining code understanding with comment understanding}},
volume = {21},
year = {2008}
}
@book{Kerievsky2004,
author = {Kerievsky, Joshua},
isbn = {0321213351},
pages = {400},
publisher = {Addison-Wesley Professional},
title = {{Refactoring to Patterns}},
url = {http://www.amazon.com/Refactoring-Patterns-Joshua-Kerievsky/dp/0321213351},
year = {2004}
}
@article{Parnin,
annote = {        From Duplicate 1 (                           Building Usage Contexts During Program Comprehension Georgia Institute of Technology                         - Parnin, Chris; Carsten, G )
                
        
        
      },
author = {Parnin, Chris and Carsten, G},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Parnin, Carsten - Unknown - Building Usage Contexts During Program Comprehension Georgia Institute of Technology.pdf:pdf},
title = {{Building Usage Contexts During Program Comprehension Georgia Institute of Technology}}
}
@article{Perry2001,
annote = {        From Duplicate 2 (                   Parallel changes in large-scale software development: an observational case study                 - Perry, Dewayne E; Siy, Harvey P; Votta, Lawrence G )
                
        
        
      },
author = {Perry, Dewayne E. and Siy, Harvey P. and Votta, Lawrence G.},
doi = {10.1145/383876.383878},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Perry, Siy, Votta - 2001 - Parallel changes in large-scale software development an observational case study.pdf:pdf},
issn = {1049331X},
journal = {ACM Transactions on Software Engineering and Methodology},
keywords = {change management,merging interfering and noninterfering versions,parallel versions,parallel/concurrent changes,software integration},
month = jul,
number = {3},
pages = {308--337},
publisher = {ACM},
title = {{Parallel changes in large-scale software development: an observational case study}},
url = {http://dl.acm.org/citation.cfm?id=383876.383878},
volume = {10},
year = {2001}
}
@article{Czarnecki2008,
abstract = {We present probabilistic feature models (PFMs) and illustrate their use by discussing modeling, mining and interactive configuration. PFMs are formalized as a set of formulas in a certain probabilistic logic. Such formulas can express both hard and soft constraints and have a well defined semantics by denoting a set of joint probability distributions over features. We show how PFMs can be mined from a given set of feature configurations using data mining techniques. Finally, we demonstrate how PFMs can be used in configuration in order to provide automated support for choice propagation based on both hard and soft constraints. We believe that these results constitute solid foundations for the construction of reverse engineering tools for software product lines and configurators using soft constraints.},
annote = {        From Duplicate 1 (                           Sample Spaces and Feature Models: There and Back Again                         - Czarnecki, Krzysztof; She, Steven; Wasowski, Andrzej )
                
 From Duplicate 1 ( Sample Spaces and Feature Models: There and Back Again - Czarnecki, Krzysztof; She, Steven; Wasowski, Andrzej )
        
        
        
        
        
        From Duplicate 2 (                           Sample Spaces and Feature Models: There and Back Again                         - Czarnecki, Krzysztof; She, Steven; Wasowski, Andrzej )
                
        From Duplicate 1 (                           Sample Spaces and Feature Models: There and Back Again                         - Czarnecki, Krzysztof; She, Steven; Wasowski, Andrzej )
                
        
        
        
        
      },
author = {Czarnecki, Krzysztof and She, Steven and Wasowski, Andrzej},
doi = {10.1109/SPLC.2008.49},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Czarnecki, She, Wasowski - 2008 - Sample Spaces and Feature Models There and Back Again.pdf:pdf},
isbn = {978-0-7695-3303-2},
journal = {2008 12th International Software Product Line Conference},
keywords = {Data mining,Gears,Law,Legal factors,North America,Probabilistic logic,Reverse engineering,Software tools,Solids,Wire,automated support,configuration,data mining techniques,feature configurations,feature models,joint probability distributions,model mining,model-driven development,probabilistic feature models,probability,reverse engineering tools,software product lines,variability modeling},
month = sep,
pages = {22--31},
publisher = {Ieee},
shorttitle = {Software Product Line Conference, 2008. SPLC '08.},
title = {{Sample Spaces and Feature Models: There and Back Again}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4626837},
year = {2008}
}
@inproceedings{Wardrip2013,
address = {New York, New York, USA},
annote = {        From Duplicate 2 (                   CSCW and education                 - Wardrip, Peter Samuelson; Shapiro, R Benjamin; Forte, Andrea; Maroulis, Spiro; Brennan, Karen; Roque, Ricarose )
                
        
        
      },
author = {Wardrip, Peter Samuelson and Shapiro, R. Benjamin and Forte, Andrea and Maroulis, Spiro and Brennan, Karen and Roque, Ricarose},
booktitle = {Proceedings of the 2013 conference on Computer supported cooperative work companion - CSCW '13},
doi = {10.1145/2441955.2442035},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wardrip et al. - 2013 - CSCW and education.pdf:pdf},
isbn = {9781450313322},
keywords = {CSCW,education,work practice},
mendeley-tags = {CSCW},
month = feb,
pages = {333},
publisher = {ACM Press},
title = {{CSCW and education}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=2441955.2442035},
year = {2013}
}
@article{Amor1995,
annote = {        From Duplicate 1 (                           Mappings: the glue in an integrated system                         - Amor, R W; Hosking, John G )
                
        
        
      },
author = {Amor, R.W. W and Hosking, John G},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Amor, Hosking - 1995 - Mappings the glue in an integrated system.pdf:pdf},
journal = {Product and process modelling in the \ldots},
title = {{Mappings: the glue in an integrated system}},
url = {https://www.cs.auckland.ac.nz/~trebor/papers/AMOR94G.pdf},
year = {1995}
}
@inproceedings{Park2013,
address = {New York, New York, USA},
annote = {        From Duplicate 2 (                           Detecting Source Code Similarity Using Code Abstraction Categories and Subject Descriptors                         - Park, Seongsoo; Ko, Seungcheol; Choi, Jongmoo Jungsik; Han, Hwansoo; Cho, Seong-Je )
                
        
        
      },
author = {Park, Seongsoo and Ko, Seungcheol and Choi, Jongmoo Jungsik and Han, Hwansoo and Cho, Seong-Je},
booktitle = {Proceedings of the 7th International Conference on Ubiquitous Information Management and Communication - ICUIMC '13},
doi = {10.1145/2448556.2448630},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Park et al. - 2013 - Detecting Source Code Similarity Using Code Abstraction Categories and Subject Descriptors.pdf:pdf},
isbn = {9781450319584},
keywords = {large scale software,similarity,source code abstraction},
month = jan,
pages = {1--9},
publisher = {ACM Press},
title = {{Detecting Source Code Similarity Using Code Abstraction Categories and Subject Descriptors}},
url = {http://dl.acm.org/citation.cfm?id=2448556.2448630},
year = {2013}
}
@article{Kagdi2007c,
annote = {        From Duplicate 2 (                   A survey and taxonomy of approaches for mining software repositories in the context of software evolution                 - Kagdi, Huzefa; Collard, Michael L; Maletic, Jonathan I )
                
        
        
      },
author = {Kagdi, Huzefa and Collard, Michael L. and Maletic, Jonathan I.},
doi = {10.1002/smr.344},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kagdi, Collard, Maletic - 2007 - A survey and taxonomy of approaches for mining software repositories in the context of software evoluti.pdf:pdf},
issn = {1532060X},
journal = {Journal of Software Maintenance and Evolution: Research and Practice},
month = mar,
number = {2},
pages = {77--131},
title = {{A survey and taxonomy of approaches for mining software repositories in the context of software evolution}},
url = {http://doi.wiley.com/10.1002/smr.344},
volume = {19},
year = {2007}
}
@article{Buckley2005b,
annote = {        From Duplicate 2 (                   Towards a taxonomy of software change                 - Buckley, Jim; Mens, Tom; Zenger, Matthias; Rashid, Awais; Kniesel, G\"{u}nter )
                
        
        
      },
author = {Buckley, Jim and Mens, Tom and Zenger, Matthias and Rashid, Awais and Kniesel, G\"{u}nter},
doi = {10.1002/smr.319},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Buckley et al. - 2005 - Towards a taxonomy of software change.pdf:pdf},
issn = {1532-060X},
journal = {Journal of Software Maintenance and Evolution: Research and Practice},
month = sep,
number = {5},
pages = {309--332},
title = {{Towards a taxonomy of software change}},
url = {http://doi.wiley.com/10.1002/smr.319},
volume = {17},
year = {2005}
}
@article{Murphy-hill2011,
abstract = {Although broadly available in major software development envi- ronments, refactoring tools are still underused. One of the reasons for this underuse is that existing refactoring tools assume that a developer recognizes that she is going to refactor before she even begins. In this paper, we present a flexible refactoring tool called BeneFactor that can be invoked after refactoring begins to safely complete a refactoring change.},
author = {Murphy-hill, Emerson},
doi = {10.1145/2048147.2048157},
isbn = {9781450309400},
journal = {Source},
keywords = {refactoring,usability},
mendeley-tags = {refactoring,usability},
pages = {19--20},
title = {{BeneFactor : A Flexible Refactoring Tool for Eclipse}},
year = {2011}
}
@misc{bramcohen,
author = {Cohan, Bram},
title = {{Patience Diff Advantages}},
url = {http://bramcohen.livejournal.com/73318.html},
urldate = {August 2014},
year = {2010},
  howpublished = {\url{http://bramcohen.livejournal.com/73318.html}},
  note = {Accessed: August 2014}
}
@misc{Torvalds2007,
abstract = {Linus Torvalds visits Google to share his thoughts on git, the source control management system he created two years ago.},
author = {Torvalds, Linus},
booktitle = {Git SCM Wiki},
keywords = {Folder - distributed databases,Google,distributed version control,engineering,git,scm,talks,tech},
mendeley-tags = {Folder - distributed databases,Google,distributed version control,engineering,git,scm,talks,tech},
title = {{Tech Talk: Linus Torvalds on git}},
url = {http://www.youtube.com/watch?v=4XpnKHJAok8},
year = {2007}
}
@inproceedings{Lawrie2011,
abstract = {Maintaining modern software requires significant tool support. Effective tools exploit a variety of information and techniques to aid a software maintainer. One area of recent interest in tool development exploits the natural language information found in source code. Such Information Retrieval (IR) based tools compliment traditional static analysis tools and have tackled problems, such as feature location, that otherwise require considerable human effort. To reap the full benefit of IR-based techniques, the language used across all software artifacts (e.g., requirements, design, change requests, tests, and source code) must be consistent. Unfortunately, there is a significant proportion of invented vocabulary in source code. Vocabulary normalization aligns the vocabulary found in the source code with that found in other software artifacts. Most existing work related to normalization has focused on splitting an identifier into its constituent parts. The next step is to expand each part into a (dictionary) word that matches the vocabulary used in other software artifacts. Building on a successful approach to splitting identifiers, an implementation of an expansion algorithm is presented. Experiments on two systems find that up to 66\% of identifiers are correctly expanded, which is within about 20\% of the current system's best-case performance. Not only is this performance comparable to previous techniques, but the result is achieved in the absence of special purpose rules and not limited to restricted syntactic contexts. Results from these experiments also show the impact that varying levels of documentation (including both internal documentation such as the requirements and design, and external, or user-level, documentation) have on the algorithm's performance.},
author = {Lawrie, Dawn and Binkley, Dave},
booktitle = {2011 27th IEEE International Conference on Software Maintenance (ICSM)},
doi = {10.1109/ICSM.2011.6080778},
isbn = {978-1-4577-0664-6},
issn = {1063-6773},
month = sep,
pages = {113--122},
publisher = {IEEE},
shorttitle = {Software Maintenance (ICSM), 2011 27th IEEE Intern},
title = {{Expanding identifiers to normalize source code vocabulary}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6080778},
year = {2011}
}
@inproceedings{Kiefer2007,
annote = {        From Duplicate 2 (                   Mining Software Repositories with iSPAROL and a Software Evolution Ontology                 - Kiefer, Christoph; Bernstein, Abraham; Tappolet, Jonas )
                
        
        
      },
author = {Kiefer, Christoph and Bernstein, Abraham and Tappolet, Jonas},
booktitle = {Fourth International Workshop on Mining Software Repositories (MSR'07:ICSE Workshops 2007)},
doi = {10.1109/MSR.2007.21},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kiefer, Bernstein, Tappolet - 2007 - Mining Software Repositories with iSPAROL and a Software Evolution Ontology.pdf:pdf},
isbn = {0-7695-2950-X},
month = may,
pages = {10},
publisher = {IEEE},
title = {{Mining Software Repositories with iSPAROL and a Software Evolution Ontology}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=1268983.1269048},
year = {2007}
}
@book{Gamma1995,
abstract = {Capturing a wealth of experience about the design of object-oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves. The authors begin by describing what patterns are and how they can help you design object-oriented software. They then go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems. With Design Patterns as your guide, you will learn how these important patterns fit into the software development process, and how you can leverage them to solve your own design problems most efficiently. Each pattern describes the circumstances in which it is applicable, when it can be applied in view of other design constraints, and the consequences and trade-offs of using the pattern within a larger design. All patterns are compiled from real systems and are based on real-world examples. Each pattern also includes code that demonstrates how it may be implemented in object-oriented programming languages like C++ or Smalltalk. 0201633612B07092001},
annote = {        From Duplicate 2 (                           Design patterns: elements of reusable object-oriented software                         - Gamma, Erich; Helm, Richard; Johnson, Ralph E; Vlissides, John )
                
        
        
      },
author = {Gamma, Erich and Helm, Richard and Johnson, Ralph E. and Vlissides, John},
booktitle = {Design},
doi = {10.1093/carcin/bgs084},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gamma et al. - 1995 - Design patterns elements of reusable object-oriented software.pdf:pdf},
isbn = {0201633612},
issn = {02016361},
keywords = {\#buyed,(Computer,1.,1994,2.,2004,@Someday,B-SWDesign,BA-Paul,BASICS,BIS,C++,Coding,Computer software,Computer software - Reusability,Computer software/ Reusability,Computers / General,Computers / Programming / Object Oriented,Computers / Programming / Software Development,DCs,DEMO,DISS,Databehandling,Desarrollo,Electronic books,Folder - AMIA 2012,Folder - AMIA 2013,Folder - Architecture,Folder - Books,Folder - B\"{u}cher,Folder - C++,Folder - Camera Ready References,Folder - Design patterns,Folder - Digital History,Folder - Humanities - Design,Folder - KTI Logismata,Folder - MDD - Imported,Folder - Patterns,Folder - Programming Style,Folder - SCXML,Folder - Thesis\_Partl,Folder - Thesis\_Streit,Folder - java,Folder - knowledge representation - design pattern,Folder - ooplss,Folder - tstp,Folder - value model paper den 11 januari 2012 07:,Framework,GHJV95,Gamma-DesignPatterns:ElementsReusableObject-Orient,Gamma1994,Gamma95,GammaHelmVli94,GoF1995,INFO2005,INTRODUCTION,IPs,ISDA 2010,LLSE,LLSE17,Nadjet,OVERVIEW,Object-Oriented Design,Object-oriented programming (Computer science),Objektorienterad,Objektorientert programmering,Objektorientert-design,Objektorientert-programmering,PAMB Library,Programacao de computadores |2 larpcal,Programaci\'{o}n orientada a objetos,Programdesign,Programming methods,RES.Book,Reusability.,SE10,Sensor.Network Visualization,Simulationsframework,Smalltalk,Software Development,Software patterns,Softwarewiederverwendung - Objektorientierte Progr,TLT 2011,Tesi,Tizen,abm,architectural design,available\_dei,bibtex-import,book,books,c\#,cited,computacao (metodologia e tecnicas) |2 larpcal,computer,computer\_science,computerlinguistik,design,design and implementation,design pattern,design patterns,design-patterns,design.patterns object.oriented,design\_patterns,designpatterns,devel,development,eip-patterns,fork,g4f,gamma et. al,gamma1994dper,gamma94design,gang of four,gangoffour,gjenbruk,gof,hci,in\_eBook,inf 315 CC 3846,informatik,java,library,malo,master,methodology,misc,mvc,object-oriented,object-oriented programming,objektorientert,onlinebook,oo,oop,p01811,pat99,pattern,pattern\_language,patterns,patterns.,phd,programmering,programming,programvare,reusability,reusable object orientated software,science,science),se,semwiki,seriousgame,software,software engineering,software reuse,software\_design,software\_design\_patterns,software\_engineering,softwareengineering,software–reusability,speciale,spl,survey reference,systemdesign,to-review,to\_eBook,uml,untested,vocational,wh,zz\_ref1921047,–},
mendeley-tags = {\#buyed,(Computer,1.,1994,2.,2004,@Someday,B-SWDesign,BA-Paul,BASICS,BIS,C++,Coding,Computer software,Computer software - Reusability,Computer software/ Reusability,Computers / General,Computers / Programming / Object Oriented,Computers / Programming / Software Development,DCs,DEMO,DISS,Databehandling,Desarrollo,Electronic books,Folder - AMIA 2012,Folder - AMIA 2013,Folder - Architecture,Folder - Books,Folder - B\"{u}cher,Folder - C++,Folder - Camera Ready References,Folder - Design patterns,Folder - Digital History,Folder - Humanities - Design,Folder - KTI Logismata,Folder - MDD - Imported,Folder - Patterns,Folder - Programming Style,Folder - SCXML,Folder - Thesis\_Partl,Folder - Thesis\_Streit,Folder - java,Folder - knowledge representation - design pattern,Folder - ooplss,Folder - tstp,Folder - value model paper den 11 januari 2012 07:,Framework,GHJV95,Gamma-DesignPatterns:ElementsReusableObject-Orient,Gamma1994,Gamma95,GammaHelmVli94,GoF1995,INFO2005,INTRODUCTION,IPs,ISDA 2010,LLSE,LLSE17,Nadjet,OVERVIEW,Object-Oriented Design,Object-oriented programming (Computer science),Objektorienterad,Objektorientert programmering,Objektorientert-design,Objektorientert-programmering,PAMB Library,Programacao de computadores |2 larpcal,Programaci\'{o}n orientada a objetos,Programdesign,Programming methods,RES.Book,Reusability.,SE10,Sensor.Network Visualization,Simulationsframework,Smalltalk,Software Development,Software patterns,Softwarewiederverwendung - Objektorientierte Progr,TLT 2011,Tesi,Tizen,abm,architectural design,available\_dei,bibtex-import,book,books,c\#,cited,computacao (metodologia e tecnicas) |2 larpcal,computer,computer\_science,computerlinguistik,design,design and implementation,design pattern,design patterns,design-patterns,design.patterns object.oriented,design\_patterns,designpatterns,devel,development,eip-patterns,fork,g4f,gamma et. al,gamma1994dper,gamma94design,gang of four,gangoffour,gjenbruk,gof,hci,in\_eBook,inf 315 CC 3846,informatik,java,library,malo,master,methodology,misc,mvc,object-oriented,object-oriented programming,objektorientert,onlinebook,oo,oop,p01811,pat99,pattern,pattern\_language,patterns,patterns.,phd,programmering,programming,programvare,reusability,reusable object orientated software,science,science),se,semwiki,seriousgame,software,software engineering,software reuse,software\_design,software\_design\_patterns,software\_engineering,softwareengineering,software–reusability,speciale,spl,survey reference,systemdesign,to-review,to\_eBook,uml,untested,vocational,wh,zz\_ref1921047,–},
pages = {395},
pmid = {22693012},
title = {{Design patterns: elements of reusable object-oriented software}},
url = {http://www.cs.up.ac.za/cs/aboake/sws780/references/patternstoarchitecture/Gamma-DesignPatternsIntro.pdf},
volume = {206},
year = {1995}
}
@article{Foote1995,
author = {Foote, Brian and Opdyke, William F.},
isbn = {0-201-60734-4},
month = sep,
pages = {239--257},
publisher = {ACM Press/Addison-Wesley Publishing Co.},
title = {{Lifecycle and refactoring patterns that support evolution and reuse}},
url = {http://dl.acm.org/citation.cfm?id=218662.218680},
year = {1995}
}
@article{German2004b,
annote = {        From Duplicate 2 (                           Using software trails to reconstruct the evolution of software                         - German, Daniel M )
                
        
        
      },
author = {German, Daniel M.},
doi = {10.1002/smr.301},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/German - 2004 - Using software trails to reconstruct the evolution of software.pdf:pdf},
issn = {1532-060X},
journal = {Journal of Software Maintenance and Evolution: Research and Practice},
month = nov,
number = {6},
pages = {367--384},
title = {{Using software trails to reconstruct the evolution of software}},
url = {http://doi.wiley.com/10.1002/smr.301},
volume = {16},
year = {2004}
}
@article{Marshall1999,
annote = {        From Duplicate 2 (                           Understanding Code For Reuse                         - Marshall, Stuart )
                
        
        
      },
author = {Marshall, Stuart},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Marshall - 1999 - Understanding Code For Reuse.pdf:pdf},
title = {{Understanding Code For Reuse}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.25.2317},
year = {1999}
}
@inproceedings{Namoun2012,
address = {New York, New York, USA},
annote = {        From Duplicate 2 (                           User-centered design of a visual data mapping tool                         - Namoun, Abdallah; Wajid, Usman; Mehandjiev, Nikolay; Owrak, Ali )
                
        
        
      },
author = {Namoun, Abdallah and Wajid, Usman and Mehandjiev, Nikolay and Owrak, Ali},
booktitle = {Proceedings of the International Working Conference on Advanced Visual Interfaces - AVI '12},
doi = {10.1145/2254556.2254646},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Namoun et al. - 2012 - User-centered design of a visual data mapping tool.pdf:pdf},
isbn = {9781450312875},
keywords = {VML,business documents,end user development,observational studies,user-centered design,visual data mapping tool},
mendeley-tags = {VML},
month = may,
pages = {473},
publisher = {ACM Press},
title = {{User-centered design of a visual data mapping tool}},
url = {http://dl.acm.org/citation.cfm?id=2254556.2254646},
year = {2012}
}
@article{Apel2012,
address = {New York, New York, USA},
annote = {        From Duplicate 1 (                           Structured merge with auto-tuning: balancing precision and performance                         - Apel, Sven; Le\ss enich, Olaf; Lengauer, Christian )
                
        
        
      },
author = {Apel, Sven and Le\ss enich, Olaf and Lengauer, Christian},
doi = {10.1145/2351676.2351694},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Apel, Le\ss enich, Lengauer - 2012 - Structured merge with auto-tuning balancing precision and performance.pdf:pdf},
isbn = {9781450312042},
journal = {Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering - ASE 2012},
keywords = {jdime,software merging,structured merge,version control},
pages = {120 -- 129},
publisher = {ACM Press},
title = {{Structured merge with auto-tuning: balancing precision and performance}},
url = {http://dl.acm.org/citation.cfm?doid=2351676.2351694},
year = {2012}
}
@article{Zschaler2011,
address = {New York, New York, USA},
annote = {        From Duplicate 2 (                   Towards modular code generators using symmetric language-aware aspects                 - Zschaler, Steffen; Rashid, Awais )
                
        
        
      },
author = {Zschaler, Steffen and Rashid, Awais},
doi = {10.1145/2068776.2068782},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Zschaler, Rashid - 2011 - Towards modular code generators using symmetric language-aware aspects.pdf:pdf},
isbn = {9781450308922},
journal = {Proceedings of the 1st International Workshop on Free Composition - FREECO '11},
keywords = {code generation,model-driven engineering,symmetric aspects},
month = jul,
pages = {1--5},
publisher = {ACM Press},
title = {{Towards modular code generators using symmetric language-aware aspects}},
url = {http://dl.acm.org.helicon.vuw.ac.nz/citation.cfm?id=2068776.2068782 http://dl.acm.org/citation.cfm?doid=2068776.2068782},
year = {2011}
}
@inproceedings{Taylor2007,
abstract = {The design of software has been a focus of software engineering research since the field's beginning. This paper explores key aspects of this research focus and shows why design will remain a principal focus. The intrinsic elements of software design, both process and product, are discussed: concept formation, use of experience, and means for representation, reasoning, and directing the design activity. Design is presented as being an activity engaged by a wide range of stakeholders, acting throughout most of a system's lifecycle, making a set of key choices which constitute the application's architecture. Directions for design research are outlined, including: (a) drawing lessons, inspiration, and techniques from design fields outside of computer science, (b) emphasizing the design of application "character" (functionality and style) as well as the application's structure, and (c) expanding the notion of software to encompass the design of additional kinds of intangible complex artifacts.},
annote = {        From Duplicate 1 (                           Software Design and Architecture The once and future focus of software engineering                         - Taylor, Richard N; Hoek, Andr\'{e} Van Der; van der Hoek, Andre )
                
 From Duplicate 1 ( Software Design and Architecture The once and future focus of software engineering - Taylor, Richard N.; van der Hoek, Andre; Hoek, Andr\'{e} Van Der )
        
From Duplicate 2 ( Software Design and Architecture The once and future focus of software engineering - Taylor, Richard N.; van der Hoek, Andre )
        
Although this discusses several different perspectives and paradigms it still claims that there should be one chosen answer that everyone should ascribe to 
        
        
        
        
        
        From Duplicate 2 (                           Software Design and Architecture The once and future focus of software engineering                         - Taylor, Richard N.; Hoek, Andr\'{e} Van Der; van der Hoek, Andre )
                
        From Duplicate 1 (                           Software Design and Architecture The once and future focus of software engineering                         - Taylor, Richard N.; van der Hoek, Andre; Hoek, Andr\'{e} Van Der )
                
        From Duplicate 2 (                           Software Design and Architecture The once and future focus of software engineering                         - Taylor, Richard N.; van der Hoek, Andre )
                
Although this discusses several different perspectives and paradigms it still claims that there should be one chosen answer that everyone should ascribe to  
        
        
        
        
        
      },
author = {Taylor, Richard N. and Hoek, Andr\'{e} Van Der and van der Hoek, Andre},
booktitle = {Future of Software Engineering (FOSE '07)},
doi = {10.1109/FOSE.2007.21},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Taylor, Hoek, van der Hoek - 2007 - Software Design and Architecture The once and future focus of software engineering.pdf:pdf},
isbn = {0-7695-2829-5},
keywords = {Application software,Computer architecture,Computer science,Floors,Informatics,Programming,Service awards,Software architecture,Software design,Software engineering,systems analysis},
month = may,
pages = {226--243},
publisher = {IEEE},
shorttitle = {Future of Software Engineering, 2007. FOSE '07},
title = {{Software Design and Architecture The once and future focus of software engineering}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4221623},
year = {2007}
}
@article{Aldous1999,
author = {Aldous, David and Diaconis, Persi},
doi = {10.1090/S0273-0979-99-00796-X},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Aldous, Diaconis - 1999 - Longest increasing subsequences from patience sorting to the Baik-Deift-Johansson theorem.pdf:pdf},
issn = {0273-0979},
journal = {Bulletin of the American Mathematical Society},
month = jul,
number = {04},
pages = {413--433},
title = {{Longest increasing subsequences: from patience sorting to the
Baik-Deift-Johansson theorem}},
url = {http://www.ams.org/bull/1999-36-04/S0273-0979-99-00796-X/},
volume = {36},
year = {1999}
}
@inproceedings{DannyDig,
author = {Dig, Danny and Manzoor, Kashif and Nguyen, Tien N. and Johnson, Ralph E.},
booktitle = {Proceedings of the 2006 OOPSLA workshop on eclipse technology eXchange - eclipse '06},
doi = {10.1145/1188835.1188841},
file = {:home/paran/Documents/Study/Articles/23.pdf:pdf},
isbn = {1595936211},
pages = {25--29},
publisher = {ACM Press},
title = {{MolhadoRef: A Refactoring-aware Infrastructure for OO Programs}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.133.632 http://www.mendeley.com/research/molhadoref-refactoringaware-infrastructure-oo-programs/},
year = {2006}
}
@article{LeBenich2012,
annote = {        From Duplicate 1 (                           Master Thesis Adjustable Syntactic Merge of Java Programs                         - Le\ss enich, Olaf )
                
From Duplicate 1 ( 
        
        
Master Thesis Adjustable Syntactic Merge of Java Programs
        
        
- LeBenich, Olaf )
        
        
        
        
From Duplicate 2 ( 
        
        
Master Thesis Adjustable Syntactic Merge of Java Programs
        
        
- LeBenich, Olaf )
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        From Duplicate 2 (                           Master Thesis Adjustable Syntactic Merge of Java Programs                         - Le\ss enich, Olaf )
                
        From Duplicate 1 (                           Master Thesis Adjustable Syntactic Merge of Java Programs                         - LeBenich, Olaf )
                
        From Duplicate 2 (                           Master Thesis Adjustable Syntactic Merge of Java Programs                         - LeBenich, Olaf )
                
        
        
        
        
        
        
      },
author = {Le\ss enich, Olaf},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Le\ss enich - 2012 - Master Thesis Adjustable Syntactic Merge of Java Programs.pdf:pdf},
number = {February},
title = {{Master Thesis Adjustable Syntactic Merge of Java Programs}},
year = {2012}
}
@article{freese2007operation,
annote = {        From Duplicate 2 (                           Operation-based merging of development histories                         - Freese, Tammo )
                
        
        
      },
author = {Freese, Tammo},
file = {:home/paran/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Freese - 2007 - Operation-based merging of development histories.pdf:pdf},
journal = {Refactoring Tools (WRT'07)},
pages = {47},
title = {{Operation-based merging of development histories}},
url = {http://www.eecs.tu-berlin.de/fileadmin/f4/TechReports/2007/2007-08.pdf\#page=55},
year = {2007}
}
