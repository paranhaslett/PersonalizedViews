<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://leoeditor.com/leo_toc.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="paranhaslett.20130826181255.2958" a="E"><vh>Thesis</vh>
<v t="paran.20140813185646.2169"><vh>Raw results</vh>
<v t="paran.20140813185646.2179"><vh>&lt;&lt;diffj raw results&gt;&gt;</vh></v>
<v t="paran.20140813185646.2177"><vh>&lt;&lt;java-object-diff raw results&gt;&gt;</vh></v>
<v t="paran.20140813185646.2175"><vh>&lt;&lt;ast-java raw results&gt;&gt;</vh></v>
<v t="paran.20140813185646.2171"><vh>&lt;&lt;Jasm raw results&gt;&gt;</vh></v>
<v t="paran.20140813185646.2173"><vh>&lt;&lt;Jpp raw results&gt;&gt;</vh></v>
</v>
<v t="paran.20140803142459.2009"><vh>Plan debug</vh>
<v t="paran.20140803142459.2010" a="E"><vh>1st Test Case</vh>
<v t="paran.20140803142459.2048" a="E"><vh>Comments</vh>
<v t="paran.20140803142459.2051"><vh>Delete</vh></v>
<v t="paran.20140803142459.2052"><vh>Insert</vh></v>
<v t="paran.20140803142459.2053"><vh>Modify</vh></v>
</v>
<v t="paran.20140803142459.2049" a="E"><vh>Whitespace</vh>
<v t="paran.20140803142459.2050"><vh>Modify</vh></v>
</v>
<v t="paran.20140803142459.2055" a="E"><vh>Java</vh>
<v t="paran.20140803142459.2056"><vh>Delete</vh></v>
<v t="paran.20140803142459.2057"><vh>Insert</vh></v>
<v t="paran.20140803142459.2058"><vh>Modify</vh></v>
<v t="paran.20140803142459.2060"><vh>Move</vh></v>
<v t="paran.20140803142459.2061"><vh>Renamed</vh></v>
<v t="paran.20140803142459.2059"><vh>Equivilent</vh></v>
</v>
</v>
<v t="paran.20140803142459.2011"><vh>2nd Test Case</vh>
<v t="paran.20140803142459.2062" a="E"><vh>Comment</vh>
<v t="paran.20140803142459.2063"><vh>Delete</vh></v>
<v t="paran.20140803142459.2064"><vh>Modify</vh></v>
</v>
<v t="paran.20140803142459.2065" a="E"><vh>Whitespace</vh>
<v t="paran.20140803142459.2066"><vh>Modify</vh></v>
</v>
<v t="paran.20140803142459.2067" a="E"><vh>Java</vh>
<v t="paran.20140803142459.2068"><vh>Delete</vh></v>
<v t="paran.20140803142459.2069"><vh>Insert</vh></v>
<v t="paran.20140803142459.2070"><vh>Modify</vh></v>
<v t="paran.20140803142459.2071"><vh>Renamed</vh></v>
<v t="paran.20140803142459.2072"><vh>Equivlent</vh></v>
</v>
</v>
<v t="paran.20140803142459.2012"><vh>3rd Test Case</vh>
<v t="paran.20140803142459.2073" a="E"><vh>Comment</vh>
<v t="paran.20140803142459.2076"><vh>Delete</vh></v>
<v t="paran.20140803142459.2077"><vh>Modify</vh></v>
</v>
<v t="paran.20140803142459.2074" a="E"><vh>Whitespace</vh>
<v t="paran.20140803142459.2078"><vh>Modify</vh></v>
</v>
<v t="paran.20140803142459.2075" a="E"><vh>Java</vh>
<v t="paran.20140803142459.2079"><vh>Delete</vh></v>
<v t="paran.20140803142459.2080"><vh>Insert</vh></v>
<v t="paran.20140803142459.2081"><vh>Modify</vh></v>
<v t="paran.20140803142459.2082"><vh>Renamed</vh></v>
<v t="paran.20140803142459.2083"><vh>Equivlent</vh></v>
</v>
</v>
<v t="paran.20140803142459.2013"><vh>4th Test Case</vh>
<v t="paran.20140803142459.2085" a="E"><vh>Comment</vh>
<v t="paran.20140803142459.2088"><vh>Delete</vh></v>
<v t="paran.20140803142459.2089"><vh>Insert</vh></v>
<v t="paran.20140803142459.2091"><vh>Modify</vh></v>
</v>
<v t="paran.20140803142459.2086" a="E"><vh>Whitespace</vh>
<v t="paran.20140803142459.2092"><vh>Modify</vh></v>
</v>
<v t="paran.20140803142459.2087" a="E"><vh>Java</vh>
<v t="paran.20140803142459.2093"><vh>Delete</vh></v>
<v t="paran.20140803142459.2094"><vh>Insert</vh></v>
<v t="paran.20140803142459.2095"><vh>Modify</vh></v>
<v t="paran.20140803142459.2096"><vh>renamed</vh></v>
<v t="paran.20140803142459.2097"><vh>Equivalent</vh></v>
</v>
</v>
<v t="paran.20140803142459.2014"><vh>5th Test Case</vh>
<v t="paran.20140803142459.2018" a="E"><vh>Comment</vh>
<v t="paran.20140803142459.2021"><vh>Delete</vh></v>
<v t="paran.20140803142459.2022"><vh>Insert</vh></v>
<v t="paran.20140803142459.2023"><vh>Modify</vh></v>
</v>
<v t="paran.20140803142459.2019" a="E"><vh>Whitespace</vh>
<v t="paran.20140803142459.2024"><vh>Modify</vh></v>
<v t="paran.20140803142459.2026"><vh>Equivalent</vh></v>
</v>
<v t="paran.20140803142459.2020" a="E"><vh>Java</vh>
<v t="paran.20140803142459.2027"><vh>Delete</vh></v>
<v t="paran.20140803142459.2028"><vh>Insert</vh></v>
<v t="paran.20140803142459.2029"><vh>Modify</vh></v>
<v t="paran.20140803142459.2030"><vh>MOve</vh></v>
<v t="paran.20140803142459.2031"><vh>Renamed</vh></v>
</v>
</v>
</v>
<v t="hasletpara.20131128093200.1990"><vh>ScratchPad</vh>
<v t="hasletpara.20131128093200.1969" a="E"><vh>Old</vh>
<v t="paran.20140723095158.2026"><vh>lcs</vh></v>
<v t="paran.20140618094449.2025"><vh>&lt;&lt;Git&gt;&gt;</vh></v>
<v t="hasletpara.20131129101631.1874"><vh>Templates</vh>
<v t="hasletpara.20131129101631.1875" a="E"><vh>@shadow ./notes/Tex/Thesis.cls</vh></v>
<v t="hasletpara.20131129101631.1884"
expanded="hasletpara.20131129101631.1886,"><vh>@shadow ./notes/Tex/main.tex</vh></v>
<v t="hasletpara.20131129101631.1899"
expanded="hasletpara.20131129101631.1915,"><vh>@shadow ./notes/format.rst</vh></v>
</v>
<v t="paranhaslett.20130826181255.2960"
expanded="paranhaslett.20130826181255.2963,paranhaslett.20130826181255.2964,"><vh>@shadow ./notes/Tex/oldThesis.tex</vh></v>
<v t="hasletpara.20131128093200.1860"
expanded="hasletpara.20131128093200.1863,hasletpara.20131128093200.1864,hasletpara.20131128093200.1865,hasletpara.20131128093200.1866,hasletpara.20131128093200.1873,hasletpara.20131128093200.1883,"><vh>@shadow ./notes/Tex/Thesis.tex</vh></v>
</v>
<v t="hasletpara.20131127121911.1852"
expanded="hasletpara.20131128093200.1989,paranhaslett.20130826181255.3120,paranhaslett.20130826181255.3139,"><vh>@shadow ./notes/ScratchPad.rst</vh></v>
</v>
<v t="paranhaslett.20130826181255.2959" a="E"><vh>Documents</vh>
<v t="hasletpara.20131128093200.1957"><vh>Proposal</vh>
<v t="hasletpara.20130905084546.1629" a="E"
expanded="hasletpara.20130905084546.1632,hasletpara.20130905084546.1650,hasletpara.20130905084546.1662,hasletpara.20130905084546.1652,"><vh>@shadow ./fmpp/Tex/Proposal/Proposal.tex</vh></v>
</v>
<v t="hasletpara.20131128093200.1956" a="E"><vh>Thesis</vh>
<v t="paran.20140603095349.1947"><vh>Outline</vh>
<v t="paran.20140604132703.2057" a="E"><vh>&lt;&lt;Background&gt;&gt;</vh>
<v t="paran.20140604132703.2058" a="E"><vh>&lt;&lt;VersionControlSystems&gt;&gt;</vh>
<v t="paran.20140604132703.2059"><vh>&lt;&lt;Reasons for using version control&gt;&gt;</vh></v>
<v t="paran.20140604132703.2064"><vh>&lt;&lt;LockvsMerge&gt;&gt;</vh></v>
<v t="paran.20140604132703.2070"><vh>&lt;&lt;architecture&gt;&gt;</vh></v>
</v>
<v t="paran.20140604132703.2074"><vh>&lt;&lt;GitHub&gt;&gt;</vh></v>
<v t="paran.20140604132703.2075"><vh>&lt;&lt;LCS&gt;&gt;</vh></v>
<v t="paran.20140604132703.2083"><vh>&lt;&lt;Refactoring&gt;&gt;</vh></v>
<v t="paran.20140604132703.2088"><vh>&lt;&lt;JDime&gt;&gt;</vh>
<v t="paran.20140604132703.2089"><vh>&lt;&lt;What Jdime can be used for&gt;&gt;</vh></v>
<v t="paran.20140604132703.2090"><vh>&lt;&lt;How Jdime works&gt;&gt;</vh></v>
<v t="paran.20140604132703.2091"><vh>&lt;&lt;Testing Jdimes suitability&gt;&gt;</vh></v>
<v t="paran.20140604132703.2092"><vh>&lt;&lt;Conclusion&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="paran.20140605091816.1990" a="E"><vh>Thesis</vh>
<v t="paranhaslett.20131205091806.1894"><vh>Plan for today</vh>
<v t="hasletpara.20140227093334.1831"><vh>To normalise or not to normalise that is the question</vh></v>
<v t="hasletpara.20140227093334.1830"><vh>To detect code moves</vh></v>
<v t="paran.20140423092515.1913"><vh>Datsets</vh></v>
</v>
<v t="paran.20140605091816.1995" a="E"><vh>@shadow thes.tex</vh></v>
<v t="paran.20140801074838.2010"><vh>@shadow thesis-acknowledge.tex</vh></v>
<v t="hasletpara.20131202100421.2130" a="E"><vh>@shadow Chapters/thesis-introduction.tex</vh></v>
<v t="hasletpara.20131202100421.2132" a="E"><vh>Chapters</vh>
<v t="paran.20140515173914.6982" a="E"
expanded="paran.20140528183434.1974,paran.20140530135904.1945,paran.20140529075353.1935,paran.20140528183434.2055,paran.20140530135904.1946,paran.20140528183434.2009,paran.20140528183434.2010,paran.20140528183434.2011,paran.20140530135904.1958,paran.20140528183434.2021,paran.20140604093616.2026,"><vh>@shadow Background.tex</vh></v>
<v t="paran.20140731220748.2032" a="E"
expanded="paran.20140731220748.2034,paran.20140731220748.2038,paran.20140804074630.2143,"><vh>@shadow Motivation.tex</vh></v>
<v t="paran.20140514103950.1918" a="E"
expanded="paran.20140606104644.2007,paran.20140816070821.2183,paran.20140805175513.2166,paran.20140605081907.1972,"><vh>@shadow theTool.tex</vh></v>
<v t="paran.20140605081907.1988" a="E"
expanded="paran.20140813185646.2165,paran.20140814214911.2176,paran.20140814214911.2178,"><vh>@shadow expirimentalResults.tex</vh></v>
<v t="paran.20140605081907.1978"><vh>@shadow futureWork.tex</vh></v>
</v>
<v t="hasletpara.20131202100421.2131"><vh>@shadow Chapters/thesis-conclusion.tex</vh></v>
</v>
</v>
</v>
<v t="paranhaslett.20130826181255.3062" a="E"><vh>Web Pages</vh>
<v t="hasletpara.20131127144906.1860" a="E"><vh>Fmpp</vh>
<v t="hasletpara.20131121100256.1776" a="E"><vh>Data</vh>
<v t="hasletpara.20131121100256.1777"><vh>@shadow ./fmpp/data/tabbedPages.csv</vh></v>
</v>
<v t="hasletpara.20130905134207.1647"><vh>@shadow ./create.sh</vh></v>
<v t="hasletpara.20131121100256.1774"><vh>@shadow ./config.fmpp</vh></v>
</v>
<v t="paranhaslett.20130826181255.3063"><vh>Personal Uni Home</vh>
<v t="hasletpara.20130905131851.1629"><vh>@shadow ./config.fmpp</vh></v>
<v t="hasletpara.20130905134207.1629"
expanded="hasletpara.20130905134207.1633,"><vh>@shadow ./fmpp/public_html/generic.html</vh></v>
</v>
<v t="paranhaslett.20130826181255.3068" a="E"><vh>Ema Wiki</vh>
<v t="paranhaslett.20130826181255.3069"><vh>@shadow ./fmpp/ema/T_Study.txt</vh></v>
<v t="paranhaslett.20130826181255.3073"
expanded="paranhaslett.20130826181255.3074,paranhaslett.20130826181255.3103,paranhaslett.20130826181255.3110,"><vh>@shadow ./fmpp/ema/T_Notes.txt</vh></v>
<v t="hasletpara.20131202100421.2178" a="E"><vh>@shadow ./fmpp/ema/T_To_Do.txt</vh></v>
<v t="paranhaslett.20130826181255.3151"
expanded="paranhaslett.20130826181255.3057,"><vh>@shadow ./fmpp/ema/T_Structures.txt</vh></v>
<v t="hasletpara.20131202100421.2203" a="E"><vh>Thesis</vh>
<v t="paranhaslett.20130826181255.3070"><vh>@shadow ./fmpp/ema/T_Thesis.txt</vh></v>
<v t="hasletpara.20131202100421.2139"><vh>@shadow ./fmpp/ema/T_Chapters.txt</vh></v>
<v t="hasletpara.20131202100421.2146" a="E"><vh>Chapters</vh>
<v t="hasletpara.20131202100421.2155" a="E"
expanded="hasletpara.20131202100421.2130,"><vh>@shadow ./fmpp/ema/T_Intro.txt</vh></v>
<v t="hasletpara.20131202100421.2144" a="E"><vh>@shadow ./fmpp/ema/T_Testing.txt</vh></v>
<v t="hasletpara.20131202100421.2151"><vh>@shadow ./fmpp/ema/T_Conclusion.txt</vh></v>
</v>
</v>
</v>
<v t="paranhaslett.20130826181255.3157"><vh>Grad Wiki</vh>
<v t="paranhaslett.20130826181255.3158" a="E"
expanded="paranhaslett.20130826181255.3120,paranhaslett.20130826181255.3139,"><vh>@shadow ./fmpp/GradWiki/Wiki.txt</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="hasletpara.20131121100256.1776"></t>
<t tx="hasletpara.20131127144906.1860"></t>
<t tx="hasletpara.20131128093200.1956"></t>
<t tx="hasletpara.20131128093200.1957"></t>
<t tx="hasletpara.20131128093200.1969">RCS was one of the original versioning systems 

Instead of keeping multiple copies of the file that had changed it kept the original file and any of the subsequent change sets.
This meant that any revision could be revisited and changed.

By recording both the original file and the change sets the amount of disk space used was reduced. 
differed form sccs because it used backwards revision rather than forward revisions

It allowed a small amount of collaboration by locking files that had been checked out.
This ensured that the checked out file could only be edited by one person at a time.

This is a limitation which would not suit companies that have many developers working on the same source code.  
There has to be a lot of communication and agreement about who is working on what.</t>
<t tx="hasletpara.20131128093200.1990"></t>
<t tx="hasletpara.20131129101631.1874"></t>
<t tx="hasletpara.20131202100421.2132">@path Chapters</t>
<t tx="hasletpara.20131202100421.2146"></t>
<t tx="hasletpara.20131202100421.2203"></t>
<t tx="hasletpara.20140227093334.1830">Do the deletes make any change to the code?
Do the inserts make any change to the code?</t>
<t tx="hasletpara.20140227093334.1831">
I think that I am going to have to put all the changes in the merge
need to figure out where the top diff is enacted so that the file can be checked for the following

Is it Java?
what line number region are we comparing
have we got all the change-sets</t>
<t tx="paran.20140423092515.1913">Possible datasets
&lt;A HREF="https://github.com/clojure/clojure" &gt;clojure/clojure · GitHub&lt;/A&gt;
A lisp like language written in Java and targeting the JVM
&lt;A HREF="https://github.com/rzwitserloot/lombok" &gt;rzwitserloot/lombok · GitHub&lt;/A&gt;
A Java library that uses annotations to simplify commonly written code
&lt;A HREF="https://github.com/maandree/jpp" &gt;maandree/jpp · GitHub&lt;/A&gt;
A preprocessor for Java
&lt;A HREF="https://github.com/klangner/ast-java"&gt;klangner/ast-java · GitHub&lt;/A&gt;
parses and represents Java as an AST
&lt;A HREF="https://github.com/antlr/antlr4"&gt;antlr/antlr4 · GitHub&lt;/A&gt;
A parser for any language you have language definition for</t>
<t tx="paran.20140603095349.1947">Outline
 Background
  &lt;&lt;Background&gt;&gt;</t>
<t tx="paran.20140604132703.2057">Present some of the background needed to understand the tool.  This background includes an introduction to version control, merging, along with what refactoring is and how it dramatically can change the source code.   We will then look at the issues with the current Longest Common subsquence method of determining differences. Finally we will look at JDime that has some form of managing two copies of the same program that have been refactored differently. We will look inot Jdimes shortcomings for refactoring aware version control  

 Version Control Systems
  &lt;&lt;VersionControlSystems&gt;&gt;

 Collaborating online
  &lt;&lt;GitHub&gt;&gt;

 Longest Common Subsequence
  &lt;&lt;LCS&gt;&gt;

 Refactoring
  &lt;&lt;Refactoring&gt;&gt;

 JDime
  &lt;&lt;JDime&gt;&gt;
 
 


</t>
<t tx="paran.20140604132703.2058">Introduce what version control is and how it can be used. Show how it is different to other revision-like systems. Explain some of the features and differences between different types of version control. Finally talk about the history of version control and how it is changed.

What is version control and why should we use it
&lt;&lt;Reasons for using version control&gt;&gt;

Dealing with conflicts
&lt;&lt;LockvsMerge&gt;&gt;

Architecture
&lt;&lt;architecture&gt;&gt;

</t>
<t tx="paran.20140604132703.2059">Explain that it can be used for backups braching associating matadata to a change and collaboration with examples


</t>
<t tx="paran.20140604132703.2064">Go through the methods of dealing with conflicts including locking and merging

Locking

 Explain what locking is and how it works

Smaller structured units
 Talk about using smaller items of granuality than a file or file based locking
 
Merging two documents
 Describe merging of two documents and how a 3 way merge can be done automatically.
</t>
<t tx="paran.20140604132703.2070">Explain the difference between centrailised and distributed version control systems </t>
<t tx="paran.20140604132703.2074">Describe how github provides more collaboration and how because of this finding better ways to merge code becomes important  

put down the number of collaborators for a particular project</t>
<t tx="paran.20140604132703.2075">Describe the longest common subsequence algorithm and the issue that it attemts to resolve. Point out the reordering issues it has difficulty with.
 
 


</t>
<t tx="paran.20140604132703.2083">Describe refactoring with examples.  Potential global changes can have a large impact upon the code. 
</t>
<t tx="paran.20140604132703.2088">Describe JDime and explain how it is not suitable

&lt;&lt;What Jdime can be used for&gt;&gt;

&lt;&lt;How Jdime works&gt;&gt;

&lt;&lt;Testing Jdimes suitability&gt;&gt;

&lt;&lt;Conclusion&gt;&gt;





 







</t>
<t tx="paran.20140604132703.2089">Explain what Jdime is</t>
<t tx="paran.20140604132703.2090">Explain How Jdime works</t>
<t tx="paran.20140604132703.2091">go through the test to show that the methods are not outputted in order

</t>
<t tx="paran.20140604132703.2092">Come to the conclusion it  </t>
<t tx="paran.20140605091816.1990">@path ./fmpp/Tex/Thesis

</t>
<t tx="paran.20140618094449.2025">Git is a repository which is used mostly for software development.

This is done by combining all the changes to a document in a process called merging. 
In order to merge, any change an editor makes needs to be recorded and compared against the changes made by other editors.
If it is possible for those changes to co-exist then the changes will be made.
An example of changes that are considered to be able to co-exist is if all editors change a different part of the document.
If it is not possible for those changes to co-exist then there is a \"merge conflict\".
An example of a merge conflict is if any two changes on the document overlap with different values.
Before any merging can be done all of the changes need to be determined

In GIT there are a number of changes recorded for a file differences,  A file could be added, deleted, moved, copied, or modified.  The same is not true of changes within the file with only insert, delete, and modify being available.</t>
<t tx="paran.20140723095158.2026">

@ 
change this to diagrams
@c

\begin{verbatim}

"The quick brown fox jumps over the lazy dog"

"The lazy brown dog jumps over the quick fox"

\end{verbatim}

The longest common subsequence of this would be

\begin{verbatim}
"The \"," brown ","o"," jumps over the ","o"
\end{verbatim}

Without further analysing the changes it is possible to conclude that instead of swapping certain words that:

\begin{verbatim}
"quick" transforms into "lazy"
"f" transforms into "d"
\"x\" transforms into \"g\"
\"lazy d\" transforms into \"quick f\"
\"g\" transforms into \"x\"
\end{verbatim}

What this thesis aims to do is to more accurately portray these changes.
In order to do this we require some information about the structure of the document.
For the above example if the computer was aware that the sentence was structured into words rather than characters the result would have been slightly different.

\begin{verbatim}
\"The \",?,\" brown \",?,\"jumps \", \"over \", \"the \",?,?
\end{verbatim}

in this situation in becomes easier to recognise that words have been swapped by comparing each of the changes with each other.  

\begin{verbatim}
\"quick \" transforms into \"lazy \" matches \"lazy\" transforms into \"quick\"
\"fox \" transforms into \"dog\" matches \"dog\" transforms into \"fox\" 
\end{verbatim}

The English language is also far too complex to notice anything that is more basic than a word for word swap.
There are words and sentences that have similar meanings but are spelled and structured differently.</t>
<t tx="paran.20140803142459.2009">REFACTOR CATEGORIES:COMMENT:DELETE
-----Added another t:/Main.java:(438273, 438276)-----
				
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(438273, 442372)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				
------------------------------------
-----Added another t:/Main.java:(438273, 438276)-----
				
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(438273, 442372)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				
------------------------------------
-----Yet another bug:/ClassFileReader.java:(3047425, 3047427)-----
			
&gt;&gt;&gt;&gt;&gt;Another bug fix:/ClassFileReader.java:(2969601, 2973699)&gt;&gt;&gt;&gt;&gt;
			// skip attribute for now
			
------------------------------------
Git diff =0  Refactor Categories =10

REFACTOR CATEGORIES:COMMENT:INSERT
-----Added another t:/TypeAnalysis.java:(995329, 1003523)-----
			// This is a fall back, since it is permitted to perform an array
			// load / store on the null type.
			
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991233, 991235)&gt;&gt;&gt;&gt;&gt;
			
------------------------------------
-----Added another t:/TypeAnalysis.java:(995329, 1003523)-----
			// This is a fall back, since it is permitted to perform an array
			// load / store on the null type.
			
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991233, 991235)&gt;&gt;&gt;&gt;&gt;
			
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1880065, 1884162)-----
		// TODO: I'm slightly unsure whether or not this is a good idea!
		
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880065, 1880066)&gt;&gt;&gt;&gt;&gt;
		
------------------------------------
Git diff =0  Refactor Categories =5

REFACTOR CATEGORIES:COMMENT:MODIFY
-----Minor bug fix f:/TypeAnalysis.java:(970755, 970758)-----
if (
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(970755, 970757)&gt;&gt;&gt;&gt;&gt;
if(
------------------------------------
-----Minor bug fixes:/Code.java:(155649, 159745)-----
 * This represents the Code attribute from the JVM Specification.
 
&gt;&gt;&gt;&gt;&gt;Added classfile:/Code.java:(163841, 167937)&gt;&gt;&gt;&gt;&gt;
 * This represents the Code attribute from the JVM Spec.
 
------------------------------------
-----Minor bug fixes:/JKitValidTests.java:(368645, 368678)-----
new ClassFileVerifier().apply(cf);
&gt;&gt;&gt;&gt;&gt;Added classfile:/JKitValidTests.java:(364545, 372737)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				// new TypeAnalysis().apply(cf);
	
------------------------------------
Git diff =0  Refactor Categories =95

REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----More little twe:/TypeAnalysis.java:(1069101, 1073153)-----
		
	
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(1093636, 1097729)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1884205, 1888257)-----

	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880065, 1880066)&gt;&gt;&gt;&gt;&gt;
		
------------------------------------
-----Another bug fix:/ClassFileReader.java:(3551236, 3555329)-----

	
&gt;&gt;&gt;&gt;&gt;Added some miss:/ClassFileReader.java:(3420171, 3424259)&gt;&gt;&gt;&gt;&gt;
 			
			
------------------------------------
Git diff =0  Refactor Categories =13

REFACTOR CATEGORIES:JAVA:DELETE
-----Minor bug fix f:/TypeAnalysis.java:(1884183, 1884191)-----
code.type
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880082, 1880090)&gt;&gt;&gt;&gt;&gt;
code.type
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768902, 2768940)-----
"expected type " + t1 + ", found type "
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2756666, 2756681)&gt;&gt;&gt;&gt;&gt;
"expected type "
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768944, 2768945)-----
t2
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2760712, 2760713)&gt;&gt;&gt;&gt;&gt;
t1
------------------------------------
Git diff =0  Refactor Categories =106

REFACTOR CATEGORIES:JAVA:INSERT
-----Minor bug fix f:/TypeAnalysis.java:(1884199, 1884202)-----
orig
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880097, 1880101)&gt;&gt;&gt;&gt;&gt;
index
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768902, 2768940)-----
"expected type " + t1 + ", found type "
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2756666, 2756681)&gt;&gt;&gt;&gt;&gt;
"expected type "
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768944, 2768945)-----
t2
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2760712, 2760713)&gt;&gt;&gt;&gt;&gt;
t1
------------------------------------
Git diff =0  Refactor Categories =10

GIT DIFF:JAVA:MODIFY
====================================
-----Added another t:/Main.java:(438273, 442369)-----
				new ClassFileVerifier().apply(cf);				
	
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(438273, 446465)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				new TypeAnalysis().apply(cf);				
	
------------------------------------
-----Added another t:/TypeAnalysis.java:(995329, 1007617)-----
			// This is a fall back, since it is permitted to perform an array
			// load / store on the null type.
			store.push(JvmTypes.T_VOID);
	
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991233, 999425)&gt;&gt;&gt;&gt;&gt;
			throw new VerificationException(method, index, store,
					"arrayload expected array type");
	
------------------------------------
-----More little twe:/ClassFileReader.java:(5513217, 5517313)-----
		JvmType owner = null;
	
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/ClassFileReader.java:(5513217, 5517313)&gt;&gt;&gt;&gt;&gt;
		JvmType.Clazz owner = null;
	
------------------------------------

REFACTOR CATEGORIES:JAVA:MODIFY
-----Added another t:/Main.java:(438277, 438299)-----
new ClassFileVerifier()
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(442373, 442390)&gt;&gt;&gt;&gt;&gt;
new TypeAnalysis()
------------------------------------
-----Added another t:/Main.java:(438307, 438308)-----
cf
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(442398, 442399)&gt;&gt;&gt;&gt;&gt;
cf
------------------------------------
-----Added another t:/TypeAnalysis.java:(1003524, 1003551)-----
store.push(JvmTypes.T_VOID);
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991236, 995366)&gt;&gt;&gt;&gt;&gt;
throw new VerificationException(method, index, store,
					"arrayload expected array type");
------------------------------------
Git diff =335  Refactor Categories =249

REFACTOR CATEGORIES:JAVA:MOVE
-----Minor bug fix f:/TypeAnalysis.java:(1884178, 1884181)-----
type
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880092, 1880095)&gt;&gt;&gt;&gt;&gt;
type
------------------------------------
Git diff =0  Refactor Categories =1

REFACTOR CATEGORIES:JAVA:RENAMED
-----Minor bug fix f:/TypeAnalysis.java:(970822, 974849)-----
{
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(970789, 974849)&gt;&gt;&gt;&gt;&gt;
{
	
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(1634345, 1638401)-----
{
	
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(1634341, 1638401)&gt;&gt;&gt;&gt;&gt;
{
	
------------------------------------
-----Added classfile:/ClassFileVerifier.java:(229377, 233473)-----
public class ClassFileVerifier {
	
&gt;&gt;&gt;&gt;&gt;Merge pull requ:/Validation.java:(229377, 233473)&gt;&gt;&gt;&gt;&gt;
public class Validation {
	
------------------------------------
Git diff =0  Refactor Categories =27

REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----More little twe:/TypeAnalysis.java:(970753, 974849)-----
		if (type instanceof JvmType.Array) {
	
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(970753, 974849)&gt;&gt;&gt;&gt;&gt;
		if (type instanceof JvmType.Array || type instanceof JvmType.Null) {
	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1069057, 1073153)-----
		if(type instanceof JvmType.Array || type instanceof JvmType.Null) {
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1069057, 1073153)&gt;&gt;&gt;&gt;&gt;
		if(type instanceof JvmType.Array) {
	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1708033, 1712129)-----
		if (!(type instanceof JvmType.Array || type instanceof JvmType.Null)) {
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1708033, 1712129)&gt;&gt;&gt;&gt;&gt;
		if (!(type instanceof JvmType.Array)) {
	
------------------------------------
Git diff =0  Refactor Categories =54
</t>
<t tx="paran.20140803142459.2010"></t>
<t tx="paran.20140803142459.2011"></t>
<t tx="paran.20140803142459.2012"></t>
<t tx="paran.20140803142459.2013"></t>
<t tx="paran.20140803142459.2014"></t>
<t tx="paran.20140803142459.2018"></t>
<t tx="paran.20140803142459.2019"></t>
<t tx="paran.20140803142459.2020"></t>
<t tx="paran.20140803142459.2021">REFACTOR CATEGORIES:COMMENT:DELETE
-----Refactored Bean:/BeanDifferShould.java:(180245, 184321)-----

	
&gt;&gt;&gt;&gt;&gt;Simplified Diff:/BeanDifferShould.java:(155668, 155669)&gt;&gt;&gt;&gt;&gt;
) 
------------------------------------
-----Introduced flue:/MapDifferTest.java:(647210, 651266)-----

		
&gt;&gt;&gt;&gt;&gt;Improved interg:/MapDifferTest.java:(663642, 679938)&gt;&gt;&gt;&gt;&gt;


		// this part is needed to reproduce a special error case where the parent node got added as its own
		// child and caused an infinite loop. this wouldn't happen if the parent node didn't have any changes
		
------------------------------------
-----Cleaned up Opti:/Options.java:(200741, 204801)-----



&gt;&gt;&gt;&gt;&gt;Added more JRub:/Options.java:(217139, 237572)&gt;&gt;&gt;&gt;&gt;


    /**
     * The brief option.
     */
    
------------------------------------
Git diff =0  Refactor Categories =13</t>
<t tx="paran.20140803142459.2022">REFACTOR CATEGORIES:COMMENT:INSERT
-----More migration :/Block.java:(94245, 102408)-----

        // this.tokens = new TokenList(blk);
        
&gt;&gt;&gt;&gt;&gt;Further integra:/Block.java:(77884, 81928)&gt;&gt;&gt;&gt;&gt;

        
------------------------------------
-----Added debugging:/Options.java:(262186, 282628)-----


    /**
     * Whether to blather.
     */
    
&gt;&gt;&gt;&gt;&gt;Removed Ant fil:/Options.java:(262179, 266241)&gt;&gt;&gt;&gt;&gt;



------------------------------------
-----Continued work :/Options.java:(139309, 159748)-----


    /**
     * Whether to show the version.
     */
    
&gt;&gt;&gt;&gt;&gt;More work on th:/Options.java:(139308, 143361)&gt;&gt;&gt;&gt;&gt;



------------------------------------
Git diff =0  Refactor Categories =4</t>
<t tx="paran.20140803142459.2023">REFACTOR CATEGORIES:COMMENT:MODIFY
-----Added another t:/Main.java:(438273, 438276)-----
				
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(438273, 442372)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				
------------------------------------
-----Added another t:/TypeAnalysis.java:(995329, 1003523)-----
			// This is a fall back, since it is permitted to perform an array
			// load / store on the null type.
			
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991233, 991235)&gt;&gt;&gt;&gt;&gt;
			
------------------------------------
-----More little twe:/ClassFileReader.java:(5562369, 5562371)-----
			
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/ClassFileReader.java:(5562369, 5562371)&gt;&gt;&gt;&gt;&gt;
			
------------------------------------
Git diff =0  Refactor Categories =3348</t>
<t tx="paran.20140803142459.2024">REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----Updated ClassFi:/ClassFileReader.java:(4087809, 4087810)-----
		
&gt;&gt;&gt;&gt;&gt;ClassFileReader:/ClassFileReader.java:(4034561, 4038657)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----Working on the :/JKitValidTests.java:(98341, 106496)-----



&gt;&gt;&gt;&gt;&gt;Added the JKit :/JKitValidTests.java:(98337, 102400)&gt;&gt;&gt;&gt;&gt;


------------------------------------
-----Working on the :/JKitValidTests.java:(135197, 143360)-----



&gt;&gt;&gt;&gt;&gt;Added the JKit :/JKitValidTests.java:(98337, 102400)&gt;&gt;&gt;&gt;&gt;


------------------------------------
Git diff =0  Refactor Categories =283</t>
<t tx="paran.20140803142459.2026">REFACTOR CATEGORIES:WHITESPACE:EQUIVALENT
-----Cleaned up code:/Options.java:(40989, 45057)-----



&gt;&gt;&gt;&gt;&gt;Began integrati:/Options.java:(36865, 40961)&gt;&gt;&gt;&gt;&gt;



------------------------------------
-----Code cleanup, a:/FileDiff.java:(28711, 32769)-----



&gt;&gt;&gt;&gt;&gt;Updated to work:/FileDiff.java:(28673, 32769)&gt;&gt;&gt;&gt;&gt;



------------------------------------
-----Updated to work:/JavaFileDiff.java:(40986, 45057)-----



&gt;&gt;&gt;&gt;&gt;Cleaned up code:/JavaFileDiff.java:(53249, 57345)&gt;&gt;&gt;&gt;&gt;



------------------------------------
Git diff =0  Refactor Categories =3</t>
<t tx="paran.20140803142459.2027">REFACTOR CATEGORIES:JAVA:DELETE
-----Minor bug fix f:/TypeAnalysis.java:(1884183, 1884191)-----
code.type
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880082, 1880090)&gt;&gt;&gt;&gt;&gt;
code.type
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768902, 2768940)-----
"expected type " + t1 + ", found type "
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2756666, 2756681)&gt;&gt;&gt;&gt;&gt;
"expected type "
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768944, 2768945)-----
t2
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2760712, 2760713)&gt;&gt;&gt;&gt;&gt;
t1
------------------------------------
Git diff =0  Refactor Categories =2133</t>
<t tx="paran.20140803142459.2028">REFACTOR CATEGORIES:JAVA:INSERT
-----Minor bug fix f:/TypeAnalysis.java:(1884199, 1884202)-----
orig
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880097, 1880101)&gt;&gt;&gt;&gt;&gt;
index
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768902, 2768940)-----
"expected type " + t1 + ", found type "
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2756666, 2756681)&gt;&gt;&gt;&gt;&gt;
"expected type "
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768944, 2768945)-----
t2
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2760712, 2760713)&gt;&gt;&gt;&gt;&gt;
t1
------------------------------------
Git diff =0  Refactor Categories =1821</t>
<t tx="paran.20140803142459.2029">

REFACTOR CATEGORIES:JAVA:MODIFY
-----Added another t:/Main.java:(438277, 438299)-----
new ClassFileVerifier()
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(442373, 442390)&gt;&gt;&gt;&gt;&gt;
new TypeAnalysis()
------------------------------------
-----Added another t:/Main.java:(438307, 438308)-----
cf
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(442398, 442399)&gt;&gt;&gt;&gt;&gt;
cf
------------------------------------
-----Added another t:/TypeAnalysis.java:(1003524, 1003551)-----
store.push(JvmTypes.T_VOID);
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991236, 995366)&gt;&gt;&gt;&gt;&gt;
throw new VerificationException(method, index, store,
					"arrayload expected array type");
------------------------------------
Git diff =12224  Refactor Categories =6855</t>
<t tx="paran.20140803142459.2030">REFACTOR CATEGORIES:JAVA:MOVE
-----Minor bug fix f:/TypeAnalysis.java:(1884178, 1884181)-----
type
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880092, 1880095)&gt;&gt;&gt;&gt;&gt;
type
------------------------------------
-----Midstream on re:/StatementListDiffer.java:(159825, 159832)-----
delStart
&gt;&gt;&gt;&gt;&gt;Refactored Type:/StatementListDiffer.java:(159815, 159822)&gt;&gt;&gt;&gt;&gt;
delStart
------------------------------------
-----Midstream on re:/StatementListDiffer.java:(172116, 172123)-----
delStart
&gt;&gt;&gt;&gt;&gt;Refactored Type:/StatementListDiffer.java:(172106, 172113)&gt;&gt;&gt;&gt;&gt;
delStart
------------------------------------
Git diff =0  Refactor Categories =33</t>
<t tx="paran.20140803142459.2031">REFACTOR CATEGORIES:JAVA:RENAMED
-----More little twe:/ClassFileReader.java:(5562372, 5562433)-----
String ownerString = getString(read_u2(read_u2(index, 0), 0));
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/ClassFileReader.java:(5562372, 5566519)&gt;&gt;&gt;&gt;&gt;
owner = parseClassDescriptor("L"
					+ getString(read_u2(read_u2(index, 0), 0)) + ";");
------------------------------------
-----More little twe:/TypeAnalysis.java:(1069059, 1069100)-----
checkIsSubtype(code.type,type,index,orig);
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(1069059, 1093635)&gt;&gt;&gt;&gt;&gt;
if(type instanceof JvmType.Array || type instanceof JvmType.Null) {
			JvmType.Array arrType = (JvmType.Array) type;
			checkIsSubtype(code.type,arrType,index,orig);			 			
		} else {
			throw new VerificationException(method, index, orig,
					"arrayload expected array type");
		}
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(970759, 970819)-----
type instanceof JvmType.Array || type instanceof JvmType.Null
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(970758, 970786)&gt;&gt;&gt;&gt;&gt;
type instanceof JvmType.Array
------------------------------------
Git diff =0  Refactor Categories =5338

REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----More little twe:/TypeAnalysis.java:(970753, 974849)-----
		if (type instanceof JvmType.Array) {
	
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(970753, 974849)&gt;&gt;&gt;&gt;&gt;
		if (type instanceof JvmType.Array || type instanceof JvmType.Null) {
	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1069057, 1073153)-----
		if(type instanceof JvmType.Array || type instanceof JvmType.Null) {
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1069057, 1073153)&gt;&gt;&gt;&gt;&gt;
		if(type instanceof JvmType.Array) {
	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1708033, 1712129)-----
		if (!(type instanceof JvmType.Array || type instanceof JvmType.Null)) {
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1708033, 1712129)&gt;&gt;&gt;&gt;&gt;
		if (!(type instanceof JvmType.Array)) {
	
------------------------------------
Git diff =0  Refactor Categories =1211</t>
<t tx="paran.20140803142459.2048"></t>
<t tx="paran.20140803142459.2049"></t>
<t tx="paran.20140803142459.2050">REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----More little twe:/TypeAnalysis.java:(1069101, 1073153)-----
		
	
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(1093636, 1097729)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1884205, 1888257)-----

	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880065, 1880066)&gt;&gt;&gt;&gt;&gt;
		
------------------------------------
-----Another bug fix:/ClassFileReader.java:(3551236, 3555329)-----

	
&gt;&gt;&gt;&gt;&gt;Added some miss:/ClassFileReader.java:(3420171, 3424259)&gt;&gt;&gt;&gt;&gt;
 			
			
------------------------------------
Git diff =0  Refactor Categories =13</t>
<t tx="paran.20140803142459.2051">REFACTOR CATEGORIES:COMMENT:DELETE
-----Added another t:/Main.java:(438273, 438276)-----
				
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(438273, 442372)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				
------------------------------------
-----Added another t:/Main.java:(438273, 438276)-----
				
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(438273, 442372)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				
------------------------------------
-----Yet another bug:/ClassFileReader.java:(3047425, 3047427)-----
			
&gt;&gt;&gt;&gt;&gt;Another bug fix:/ClassFileReader.java:(2969601, 2973699)&gt;&gt;&gt;&gt;&gt;
			// skip attribute for now
			
------------------------------------
Git diff =0  Refactor Categories =10</t>
<t tx="paran.20140803142459.2052">REFACTOR CATEGORIES:COMMENT:INSERT
-----Added another t:/TypeAnalysis.java:(995329, 1003523)-----
			// This is a fall back, since it is permitted to perform an array
			// load / store on the null type.
			
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991233, 991235)&gt;&gt;&gt;&gt;&gt;
			
------------------------------------
-----Added another t:/TypeAnalysis.java:(995329, 1003523)-----
			// This is a fall back, since it is permitted to perform an array
			// load / store on the null type.
			
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991233, 991235)&gt;&gt;&gt;&gt;&gt;
			
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1880065, 1884162)-----
		// TODO: I'm slightly unsure whether or not this is a good idea!
		
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880065, 1880066)&gt;&gt;&gt;&gt;&gt;
		
------------------------------------
Git diff =0  Refactor Categories =5</t>
<t tx="paran.20140803142459.2053">REFACTOR CATEGORIES:COMMENT:MODIFY
-----Minor bug fix f:/TypeAnalysis.java:(970755, 970758)-----
if (
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(970755, 970757)&gt;&gt;&gt;&gt;&gt;
if(
------------------------------------
-----Minor bug fixes:/Code.java:(155649, 159745)-----
 * This represents the Code attribute from the JVM Specification.
 
&gt;&gt;&gt;&gt;&gt;Added classfile:/Code.java:(163841, 167937)&gt;&gt;&gt;&gt;&gt;
 * This represents the Code attribute from the JVM Spec.
 
------------------------------------
-----Minor bug fixes:/JKitValidTests.java:(368645, 368678)-----
new ClassFileVerifier().apply(cf);
&gt;&gt;&gt;&gt;&gt;Added classfile:/JKitValidTests.java:(364545, 372737)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				// new TypeAnalysis().apply(cf);
	
------------------------------------
Git diff =0  Refactor Categories =95</t>
<t tx="paran.20140803142459.2055"></t>
<t tx="paran.20140803142459.2056">REFACTOR CATEGORIES:JAVA:DELETE
-----Minor bug fix f:/TypeAnalysis.java:(1884183, 1884191)-----
code.type
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880082, 1880090)&gt;&gt;&gt;&gt;&gt;
code.type
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768902, 2768940)-----
"expected type " + t1 + ", found type "
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2756666, 2756681)&gt;&gt;&gt;&gt;&gt;
"expected type "
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768944, 2768945)-----
t2
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2760712, 2760713)&gt;&gt;&gt;&gt;&gt;
t1
------------------------------------
Git diff =0  Refactor Categories =106</t>
<t tx="paran.20140803142459.2057">REFACTOR CATEGORIES:JAVA:INSERT
-----Minor bug fix f:/TypeAnalysis.java:(1884199, 1884202)-----
orig
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880097, 1880101)&gt;&gt;&gt;&gt;&gt;
index
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768902, 2768940)-----
"expected type " + t1 + ", found type "
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2756666, 2756681)&gt;&gt;&gt;&gt;&gt;
"expected type "
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768944, 2768945)-----
t2
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2760712, 2760713)&gt;&gt;&gt;&gt;&gt;
t1
------------------------------------
Git diff =0  Refactor Categories =10</t>
<t tx="paran.20140803142459.2058">REFACTOR CATEGORIES:JAVA:MODIFY
-----Added another t:/Main.java:(438277, 438299)-----
new ClassFileVerifier()
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(442373, 442390)&gt;&gt;&gt;&gt;&gt;
new TypeAnalysis()
------------------------------------
-----Added another t:/Main.java:(438307, 438308)-----
cf
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(442398, 442399)&gt;&gt;&gt;&gt;&gt;
cf
------------------------------------
-----Added another t:/TypeAnalysis.java:(1003524, 1003551)-----
store.push(JvmTypes.T_VOID);
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991236, 995366)&gt;&gt;&gt;&gt;&gt;
throw new VerificationException(method, index, store,
					"arrayload expected array type");
------------------------------------
Git diff =335  Refactor Categories =219
</t>
<t tx="paran.20140803142459.2059">REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----More little twe:/TypeAnalysis.java:(970753, 974849)-----
		if (type instanceof JvmType.Array) {
	
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(970753, 974849)&gt;&gt;&gt;&gt;&gt;
		if (type instanceof JvmType.Array || type instanceof JvmType.Null) {
	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1069057, 1073153)-----
		if(type instanceof JvmType.Array || type instanceof JvmType.Null) {
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1069057, 1073153)&gt;&gt;&gt;&gt;&gt;
		if(type instanceof JvmType.Array) {
	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1708033, 1712129)-----
		if (!(type instanceof JvmType.Array || type instanceof JvmType.Null)) {
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1708033, 1712129)&gt;&gt;&gt;&gt;&gt;
		if (!(type instanceof JvmType.Array)) {
	
------------------------------------
Git diff =0  Refactor Categories =54</t>
<t tx="paran.20140803142459.2060">REFACTOR CATEGORIES:JAVA:MOVE
-----Minor bug fix f:/TypeAnalysis.java:(1884178, 1884181)-----
type
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880092, 1880095)&gt;&gt;&gt;&gt;&gt;
type
------------------------------------
Git diff =0  Refactor Categories =1
</t>
<t tx="paran.20140803142459.2061">REFACTOR CATEGORIES:JAVA:RENAMED
-----More little twe:/ClassFileReader.java:(5562372, 5562433)-----
String ownerString = getString(read_u2(read_u2(index, 0), 0));
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/ClassFileReader.java:(5562372, 5566519)&gt;&gt;&gt;&gt;&gt;
owner = parseClassDescriptor("L"
					+ getString(read_u2(read_u2(index, 0), 0)) + ";");
------------------------------------
-----More little twe:/TypeAnalysis.java:(1069059, 1069100)-----
checkIsSubtype(code.type,type,index,orig);
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(1069059, 1093635)&gt;&gt;&gt;&gt;&gt;
if(type instanceof JvmType.Array || type instanceof JvmType.Null) {
			JvmType.Array arrType = (JvmType.Array) type;
			checkIsSubtype(code.type,arrType,index,orig);			 			
		} else {
			throw new VerificationException(method, index, orig,
					"arrayload expected array type");
		}
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(970759, 970819)-----
type instanceof JvmType.Array || type instanceof JvmType.Null
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(970758, 970786)&gt;&gt;&gt;&gt;&gt;
type instanceof JvmType.Array
------------------------------------
Git diff =0  Refactor Categories =57</t>
<t tx="paran.20140803142459.2062"></t>
<t tx="paran.20140803142459.2063">REFACTOR CATEGORIES:COMMENT:DELETE
-----support for -s :/Program.java:(495646, 499713)-----

	
&gt;&gt;&gt;&gt;&gt;Update READM:/Program.java:(434206, 438273)&gt;&gt;&gt;&gt;&gt;
 /* Do *NOT* use canonical path */
	
------------------------------------
-----support for -s :/Program.java:(495646, 499713)-----

	
&gt;&gt;&gt;&gt;&gt;Update READM:/Program.java:(434206, 438273)&gt;&gt;&gt;&gt;&gt;
 /* Do *NOT* use canonical path */
	
------------------------------------
Git diff =0  Refactor Categories =2</t>
<t tx="paran.20140803142459.2064">REFACTOR CATEGORIES:COMMENT:MODIFY
-----mis:/Program.java:(126977, 131073)-----
 * @author  Mattias Andrée, &lt;a href="mailto:maandree@member.fsf.org"&gt;maandree@member.fsf.org&lt;/a&gt;
 
&gt;&gt;&gt;&gt;&gt;Update READM:/Program.java:(126977, 131073)&gt;&gt;&gt;&gt;&gt;
 * @author  Mattias Andrée, &lt;a href="mailto:maandree+jpp@kth.se"&gt;maandree+jpp@kth.se&lt;/a&gt;
 
------------------------------------
-----m do:/Program.java:(102401, 106497)-----
/* Compilers and preprocessors SHOULD NEVER use canonical paths. (except for maybe inclusing guarding) */


&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/Program.java:(102401, 106497)&gt;&gt;&gt;&gt;&gt;
/* Compilers and preprocessors SHOULD NEVER use canonical paths. */


------------------------------------
-----support for -s :/Program.java:(311303, 331783)-----
if (sFlag == null)
			sFlag = arg;
		    else
		    {   err(1, "fatal", null, null, "Duplicate option: -s");
			System.exit(-1); return;
		    }
&gt;&gt;&gt;&gt;&gt;Update READM:/Program.java:(290876, 294913)&gt;&gt;&gt;&gt;&gt;
)
	
------------------------------------
Git diff =0  Refactor Categories =4</t>
<t tx="paran.20140803142459.2065"></t>
<t tx="paran.20140803142459.2066">REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----ignore &lt;""&gt; dur:/Program.java:(901173, 905219)-----

			
&gt;&gt;&gt;&gt;&gt;portablilit:/Program.java:(876655, 880641)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----test case + fix:/Program.java:(761891, 765958)-----

		    
&gt;&gt;&gt;&gt;&gt;der:/Program.java:(753705, 757761)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----test case + fix:/Program.java:(765976, 770054)-----

		    
&gt;&gt;&gt;&gt;&gt;der:/Program.java:(753705, 757761)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
Git diff =0  Refactor Categories =4</t>
<t tx="paran.20140803142459.2067"></t>
<t tx="paran.20140803142459.2068">REFACTOR CATEGORIES:JAVA:DELETE
-----postprocessin:/Program.java:(782347, 782366)-----
"echo '" + lineIndex
&gt;&gt;&gt;&gt;&gt;javac make subs:/Program.java:(774155, 774163)&gt;&gt;&gt;&gt;&gt;
lineIndex
------------------------------------
-----postprocessin:/Program.java:(782370, 782372)-----
" "
&gt;&gt;&gt;&gt;&gt;javac make subs:/Program.java:(774167, 774175)&gt;&gt;&gt;&gt;&gt;
" echo '"
------------------------------------
Git diff =0  Refactor Categories =2</t>
<t tx="paran.20140803142459.2069">REFACTOR CATEGORIES:JAVA:INSERT
-----postprocessin:/Program.java:(782347, 782366)-----
"echo '" + lineIndex
&gt;&gt;&gt;&gt;&gt;javac make subs:/Program.java:(774155, 774163)&gt;&gt;&gt;&gt;&gt;
lineIndex
------------------------------------
-----postprocessin:/Program.java:(782370, 782372)-----
" "
&gt;&gt;&gt;&gt;&gt;javac make subs:/Program.java:(774167, 774175)&gt;&gt;&gt;&gt;&gt;
" echo '"
------------------------------------
Git diff =0  Refactor Categories =2</t>
<t tx="paran.20140803142459.2070">
REFACTOR CATEGORIES:JAVA:MODIFY
-----ignore &lt;""&gt; dur:/Program.java:(901131, 901171)-----
data.replace("&lt;\"\"&gt;", debug ? "" : "//")
&gt;&gt;&gt;&gt;&gt;portablilit:/Program.java:(876555, 876653)&gt;&gt;&gt;&gt;&gt;
data.replace("&lt;\"\"&gt;", "//").replace("'", "'\\''").replace("&lt;\"$", "'\"${").replace("$\"&gt;", "}\"'")
------------------------------------
-----portablilit:/Program.java:(614402, 626768)-----
final String ucs = "\033[00;01;3" + colour + "mjpp\033[36m:\033[3" + colour + "m" + _type + "\033[36m:\033[00m"
	                 + (_file == null ? "" : "\033[35m" + _file + "\033[36m:\033[00m")
	                 + (_location == null ? "" : "\033[32m" + _location.replace(":", "\033[36m:\033[32m") + "\033[36m:\033[00m")
	                 + _description.replace(":", "\033[36m:\033[34m") + "\033[00m";
&gt;&gt;&gt;&gt;&gt;update dis:/Program.java:(614402, 626767)&gt;&gt;&gt;&gt;&gt;
final String ucs = "\033[0;1;3" + colour + "mjpp\033[36m:\033[3" + colour + "m" + _type + "\033[36m:\033[21;39m"
	                 + (_file == null ? "" : "\033[35m" + _file + "\033[36m:\033[39m")
	                 + (_location == null ? "" : "\033[32m" + _location.replace(":", "\033[36m:\033[32m") + "\033[36m:\033[39m")
	                 + _description.replace(":", "\033[36m:\033[34m") + "\033[0m";
------------------------------------
-----portablilit:/Program.java:(659476, 659484)-----
"\033[02m
&gt;&gt;&gt;&gt;&gt;update dis:/Program.java:(659476, 659483)&gt;&gt;&gt;&gt;&gt;
"\033[2m
------------------------------------
Git diff =41  Refactor Categories =39</t>
<t tx="paran.20140803142459.2071">REFACTOR CATEGORIES:JAVA:RENAMED
-----fix make file +:/Program.java:(458758, 462863)-----
if (sFlag.endsWith("/") == false)
		sFlag += "/";
&gt;&gt;&gt;&gt;&gt;improve makefil:/Program.java:(475137, 479233)&gt;&gt;&gt;&gt;&gt;
		String _file = absolute(file).substring(sFlag.length());
	
------------------------------------
-----test case + fix:/Program.java:(937986, 938014)-----
String exec = output + ".sh";
&gt;&gt;&gt;&gt;&gt;der:/Program.java:(909321, 909416)&gt;&gt;&gt;&gt;&gt;
final ProcessBuilder procBuilder = new ProcessBuilder(("bash ./" + output + ".sh").split("\0"));
------------------------------------
-----der:/Program.java:(987141, 991233)-----
public static void postprocess(final String input, final String output) throws Throwable
 
&gt;&gt;&gt;&gt;&gt;postprocessin:/Program.java:(987141, 991233)&gt;&gt;&gt;&gt;&gt;
public static void process(final String input, final String output) throws Throwable
 
------------------------------------
Git diff =0  Refactor Categories =11</t>
<t tx="paran.20140803142459.2072">REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----test case + fix:/Program.java:(790529, 794625)-----
			out.write((trim + line.substring(line.startsWith("#!") ? 0 : 1)).getBytes("UTF-8"));
	
&gt;&gt;&gt;&gt;&gt;der:/Program.java:(761857, 765953)&gt;&gt;&gt;&gt;&gt;
			out.write(line.substring(1).getBytes("UTF-8"));
	
------------------------------------
Git diff =0  Refactor Categories =1</t>
<t tx="paran.20140803142459.2073"></t>
<t tx="paran.20140803142459.2074"></t>
<t tx="paran.20140803142459.2075"></t>
<t tx="paran.20140803142459.2076">REFACTOR CATEGORIES:COMMENT:DELETE
-----Project test wo:/JavaASTParser.java:(299009, 299010)-----
		
&gt;&gt;&gt;&gt;&gt;Package parse:/JavaASTParser.java:(299009, 303106)&gt;&gt;&gt;&gt;&gt;
		// TODO Auto-generated method stub
		
------------------------------------
-----Project test wo:/JavaASTParser.java:(299009, 299010)-----
		
&gt;&gt;&gt;&gt;&gt;Package parse:/JavaASTParser.java:(299009, 303106)&gt;&gt;&gt;&gt;&gt;
		// TODO Auto-generated method stub
		
------------------------------------
-----Package parse:/JavaASTParser.java:(221185, 221186)-----
		
&gt;&gt;&gt;&gt;&gt;Changes in pars:/JavaASTParser.java:(217089, 221186)&gt;&gt;&gt;&gt;&gt;
		// TODO Auto-generated method stub
		
------------------------------------
Git diff =0  Refactor Categories =4</t>
<t tx="paran.20140803142459.2077">REFACTOR CATEGORIES:COMMENT:MODIFY
-----Refactoring imp:/NodeImpl.java:(4097, 8193)-----
package com.klangner.ast.impl;


&gt;&gt;&gt;&gt;&gt;File is Compila:/NodeImpl.java:(4097, 8193)&gt;&gt;&gt;&gt;&gt;
package com.klangner.ast.java;


------------------------------------
-----Refactoring imp:/NodeImpl.java:(32770, 32790)-----
ublic class NodeImpl 
&gt;&gt;&gt;&gt;&gt;File is Compila:/NodeImpl.java:(32770, 32783)&gt;&gt;&gt;&gt;&gt;
lass NodeImpl 
------------------------------------
-----Datasets moved :/CountryImpl.java:(12314, 16385)-----
{


&gt;&gt;&gt;&gt;&gt;Module implemen:/CountryImpl.java:(12290, 12312)&gt;&gt;&gt;&gt;&gt;
ublic class CountryImpl
------------------------------------
Git diff =0  Refactor Categories =17</t>
<t tx="paran.20140803142459.2078">REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----Changes in pars:/JavaASTParserTest.java:(106497, 106498)-----
		
&gt;&gt;&gt;&gt;&gt;renamed maven p:/JavaASTParserTest.java:(122884, 131073)&gt;&gt;&gt;&gt;&gt;


	
------------------------------------
Git diff =0  Refactor Categories =1</t>
<t tx="paran.20140803142459.2079">REFACTOR CATEGORIES:JAVA:DELETE
-----Refactoring imp:/NodeImpl.java:(32769, 32774)-----
public
&gt;&gt;&gt;&gt;&gt;File is Compila:/NodeImpl.java:(0, 0)&gt;&gt;&gt;&gt;&gt;
JAVA:DELETE:Refactoring imp:/NodeImpl.java:(32769, 32774) to File is Compila:/NodeImpl.java:(0, 0)
------------------------------------
-----File is Compila:/ASTBuilder.java:(102403, 102413)-----
currentNode
&gt;&gt;&gt;&gt;&gt;Datasets moved :/ASTBuilder.java:(73731, 73738)&gt;&gt;&gt;&gt;&gt;
rootNode
------------------------------------
-----File is Compila:/ASTBuilder.java:(102417, 102420)-----
node
&gt;&gt;&gt;&gt;&gt;Datasets moved :/ASTBuilder.java:(73742, 73781)&gt;&gt;&gt;&gt;&gt;
new NodeImpl(ctx.Identifier().getText())
------------------------------------
Git diff =0  Refactor Categories =22</t>
<t tx="paran.20140803142459.2080">REFACTOR CATEGORIES:JAVA:INSERT
-----File is Compila:/ASTBuilder.java:(102403, 102413)-----
currentNode
&gt;&gt;&gt;&gt;&gt;Datasets moved :/ASTBuilder.java:(73731, 73738)&gt;&gt;&gt;&gt;&gt;
rootNode
------------------------------------
-----File is Compila:/ASTBuilder.java:(102417, 102420)-----
node
&gt;&gt;&gt;&gt;&gt;Datasets moved :/ASTBuilder.java:(73742, 73781)&gt;&gt;&gt;&gt;&gt;
new NodeImpl(ctx.Identifier().getText())
------------------------------------
-----Datasets moved :/CountryImpl.java:(12289, 12289)-----
p
&gt;&gt;&gt;&gt;&gt;Module implemen:/CountryImpl.java:(12313, 12317)&gt;&gt;&gt;&gt;&gt;
.java
------------------------------------
Git diff =0  Refactor Categories =8</t>
<t tx="paran.20140803142459.2081">REFACTOR CATEGORIES:JAVA:MODIFY
-----New functions i:/JavaASTParser.java:(397319, 397384)-----
INode node = parseModuleFile(file.getAbsolutePath(), packageName);
&gt;&gt;&gt;&gt;&gt;updated after s:/JavaASTParser.java:(393223, 393275)&gt;&gt;&gt;&gt;&gt;
INode node = parseModuleFile(file.getAbsolutePath());
------------------------------------
-----New functions i:/JavaASTParser.java:(417798, 417887)-----
INode node = parseProjectDirectory(file.getAbsolutePath(), subPackageName+file.getName());
&gt;&gt;&gt;&gt;&gt;updated after s:/JavaASTParser.java:(413702, 413788)&gt;&gt;&gt;&gt;&gt;
INode node = parseProjectDirectory(file.getAbsolutePath(), packageName+file.getName());
------------------------------------
-----New functions i:/JavaASTParser.java:(458755, 458805)-----
INode node = new ModuleImpl(fileName, packageName);
&gt;&gt;&gt;&gt;&gt;updated after s:/JavaASTParser.java:(454659, 454696)&gt;&gt;&gt;&gt;&gt;
INode node = new ModuleImpl(fileName);
------------------------------------
Git diff =85  Refactor Categories =36</t>
<t tx="paran.20140803142459.2082">REFACTOR CATEGORIES:JAVA:RENAMED
-----New functions i:/ModuleImpl.java:(28674, 28693)-----
private String name;
&gt;&gt;&gt;&gt;&gt;updated after s:/ModuleImpl.java:(28674, 36865)&gt;&gt;&gt;&gt;&gt;
public ModuleImpl(String name) {
		super(name);
	
------------------------------------
-----New functions i:/JavaASTParser.java:(339971, 340006)-----
String subPackageName = packageName;
&gt;&gt;&gt;&gt;&gt;updated after s:/JavaASTParser.java:(339971, 348161)&gt;&gt;&gt;&gt;&gt;
if(!packageName.isEmpty()){
			packageName += ".";
	
------------------------------------
-----updated after s:/NodeImpl.java:(77825, 81921)-----
	public String getText() {
	
&gt;&gt;&gt;&gt;&gt;fixed project n:/NodeImpl.java:(77825, 81921)&gt;&gt;&gt;&gt;&gt;
	public String getName() {
	
------------------------------------
Git diff =0  Refactor Categories =31</t>
<t tx="paran.20140803142459.2083">REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----New functions i:/ImportImpl.java:(28673, 81921)-----
	public ImportImpl(String text) {
		super(text);
	}

	@Override
	public String getPackageName() {
		String name = getText();
		
		int index = name.lastIndexOf('.');
		if(index &gt;= 0){
			name = name.substring(0, index);
		}
		return name;
	
&gt;&gt;&gt;&gt;&gt;updated after s:/ImportImpl.java:(28673, 36865)&gt;&gt;&gt;&gt;&gt;
	public ImportImpl(String name) {
		super(name);
	
------------------------------------
-----updated after s:/ProjectParserTest.java:(188417, 192513)-----
		if(node1.getText().equals("impl1")){
	
&gt;&gt;&gt;&gt;&gt;fixed project n:/ProjectParserTest.java:(188417, 192513)&gt;&gt;&gt;&gt;&gt;
		if(node1.getName().equals("impl1")){
	
------------------------------------
-----updated after s:/ProjectParserTest.java:(299009, 303105)-----
		if(ast.getChild(0).getText().equals("impl2")){
	
&gt;&gt;&gt;&gt;&gt;fixed project n:/ProjectParserTest.java:(299009, 303105)&gt;&gt;&gt;&gt;&gt;
		if(ast.getChild(0).getName().equals("impl2")){
	
------------------------------------
Git diff =0  Refactor Categories =15</t>
<t tx="paran.20140803142459.2085"></t>
<t tx="paran.20140803142459.2086"></t>
<t tx="paran.20140803142459.2087"></t>
<t tx="paran.20140803142459.2088">REFACTOR CATEGORIES:COMMENT:DELETE
-----Implemented a b:/NodePath.java:(733185, 733185)-----
	
&gt;&gt;&gt;&gt;&gt;Added more use-:/NodePath.java:(659457, 671745)&gt;&gt;&gt;&gt;&gt;
	/**
	 * @author Daniel Bechler
	 */
	
------------------------------------
-----Implemented a b:/NodePath.java:(733185, 733185)-----
	
&gt;&gt;&gt;&gt;&gt;Added more use-:/NodePath.java:(659457, 671745)&gt;&gt;&gt;&gt;&gt;
	/**
	 * @author Daniel Bechler
	 */
	
------------------------------------
-----Removed getChil:/DiffNode.java:(913409, 913409)-----
	
&gt;&gt;&gt;&gt;&gt;Fixed inclusion:/DiffNode.java:(917505, 929793)&gt;&gt;&gt;&gt;&gt;
	/**
	 * @return The child nodes of this node.
	 */
	
------------------------------------
Git diff =0  Refactor Categories =7</t>
<t tx="paran.20140803142459.2089">REFACTOR CATEGORIES:COMMENT:INSERT
-----Major refactori:/ObjectDifferIntegrationTests.java:(450641, 458753)-----

		// final Configuration2 configuration = new Configuration2().withChildrenOfAddedNodes();


&gt;&gt;&gt;&gt;&gt;Update README.m:/ObjectDifferIntegrationTests.java:(434262, 438273)&gt;&gt;&gt;&gt;&gt;



------------------------------------
-----Major refactori:/ObjectDifferIntegrationTests.java:(450641, 458753)-----

		// final Configuration2 configuration = new Configuration2().withChildrenOfAddedNodes();


&gt;&gt;&gt;&gt;&gt;Update README.m:/ObjectDifferIntegrationTests.java:(434262, 438273)&gt;&gt;&gt;&gt;&gt;



------------------------------------
-----Fixed issue #57:/CircularReferenceDetector.java:(110593, 126977)-----
	/**
	 * It would be better to use &lt;code&gt;java.util.Deque&lt;/code&gt; instead of the linked list, but that was first
	 * introduced in Java 6 and would break compatibility with Java 5.
	 */
	
&gt;&gt;&gt;&gt;&gt;Removed unneces:/CircularReferenceDetector.java:(110593, 110593)&gt;&gt;&gt;&gt;&gt;
	
------------------------------------
Git diff =0  Refactor Categories =13</t>
<t tx="paran.20140803142459.2091">REFACTOR CATEGORIES:COMMENT:MODIFY
-----Made adjustment:/InclusionService.java:(385028, 385031)-----
if (
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(393220, 393223)&gt;&gt;&gt;&gt;&gt;
if (
------------------------------------
-----Made adjustment:/InclusionService.java:(385054, 389121)-----
)
	
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(397316, 405508)&gt;&gt;&gt;&gt;&gt;
{
				return true;
			}
------------------------------------
-----Made adjustment:/InclusionService.java:(618497, 634882)-----
//		else if (node.getParentNode() != null &amp;&amp; typeInclusions.get(node.getParentNode().getValueType()) == INCLUDED)
//		{
//			return true;
//		}
		
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(688131, 712707)&gt;&gt;&gt;&gt;&gt;
if (node.getValueType() != null)
		{
			if (typeInclusions.get(node.getValueType()) == INCLUDED)
			{
				result.set(true);
			}
		}
------------------------------------
Git diff =0  Refactor Categories =1384</t>
<t tx="paran.20140803142459.2092">REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----Repackaging..:/CanonicalAccessorExample.java:(86085, 90112)-----


&gt;&gt;&gt;&gt;&gt;Removed unneces:/CanonicalAccessorExample.java:(90182, 94209)&gt;&gt;&gt;&gt;&gt;



------------------------------------
-----Repackaging..:/MapEntryValueAccessExample.java:(86057, 90112)-----


&gt;&gt;&gt;&gt;&gt;Removed unneces:/MapEntryValueAccessExample.java:(90174, 94209)&gt;&gt;&gt;&gt;&gt;



------------------------------------
-----Reorganizing pa:/MapEntryValueAccessExample.java:(81978, 86016)-----


&gt;&gt;&gt;&gt;&gt;Removed depende:/MapEntryValueAccessExample.java:(90168, 94209)&gt;&gt;&gt;&gt;&gt;



------------------------------------
Git diff =0  Refactor Categories =73</t>
<t tx="paran.20140803142459.2093">REFACTOR CATEGORIES:JAVA:DELETE
-----Polishing and i:/PropertyAccessException.java:(118820, 118844)-----
final String propertyName
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(118817, 118837)&gt;&gt;&gt;&gt;&gt;
final Throwable cause
------------------------------------
-----Polishing and i:/PropertyAccessException.java:(118847, 118871)-----
final Class&lt;?&gt; targetType
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(118817, 118837)&gt;&gt;&gt;&gt;&gt;
final Throwable cause
------------------------------------
-----Polishing and i:/PropertyAccessException.java:(118874, 118894)-----
final Throwable cause
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(118817, 118837)&gt;&gt;&gt;&gt;&gt;
final Throwable cause
------------------------------------
Git diff =0  Refactor Categories =583</t>
<t tx="paran.20140803142459.2094">REFACTOR CATEGORIES:JAVA:INSERT
-----Polishing and i:/PropertyAccessor.java:(528388, 528459)-----
throw new PropertyReadException(propertyName, target.getClass(), cause);
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessor.java:(528388, 528449)&gt;&gt;&gt;&gt;&gt;
final PropertyReadException ex = new PropertyReadException(e);
------------------------------------
-----Polishing and i:/PropertyAccessor.java:(528388, 528459)-----
throw new PropertyReadException(propertyName, target.getClass(), cause);
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessor.java:(532484, 532516)&gt;&gt;&gt;&gt;&gt;
ex.setPropertyName(propertyName);
------------------------------------
-----Polishing and i:/PropertyAccessor.java:(528388, 528459)-----
throw new PropertyReadException(propertyName, target.getClass(), cause);
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessor.java:(536580, 536615)&gt;&gt;&gt;&gt;&gt;
ex.setTargetType(target.getClass());
------------------------------------
Git diff =0  Refactor Categories =550</t>
<t tx="paran.20140803142459.2095">
REFACTOR CATEGORIES:JAVA:MODIFY
-----Polishing and i:/DefaultPropertyAccessExceptionHandler.java:(102402, 102486)-----
Logger logger = LoggerFactory.getLogger(DefaultPropertyAccessExceptionHandler.class);
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/DefaultPropertyAccessExceptionHandler.java:(102402, 102507)&gt;&gt;&gt;&gt;&gt;
private static final Logger logger = LoggerFactory.getLogger(DefaultPropertyAccessExceptionHandler.class);
------------------------------------
-----Polishing and i:/PropertyAccessException.java:(106498, 106531)-----
private final String propertyName;
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(106498, 106525)&gt;&gt;&gt;&gt;&gt;
private String propertyName;
------------------------------------
-----Polishing and i:/PropertyAccessException.java:(110614, 110615)-----
?&gt;
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(110608, 110609)&gt;&gt;&gt;&gt;&gt;
?&gt;
------------------------------------
Git diff =8219  Refactor Categories =4231</t>
<t tx="paran.20140803142459.2096">REFACTOR CATEGORIES:JAVA:RENAMED
-----Made adjustment:/InclusionService.java:(385032, 385053)-----
isExcludedByPath(node)
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(393224, 393240)&gt;&gt;&gt;&gt;&gt;
node.isExcluded()
------------------------------------
-----Made adjustment:/InclusionService.java:(610305, 614401)-----
			return true;
	
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(663553, 671745)&gt;&gt;&gt;&gt;&gt;
						result.set(true);
						visit.stop();
	
------------------------------------
-----Made adjustment:/InclusionService.java:(634883, 634895)-----
return false;
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(675841, 684037)&gt;&gt;&gt;&gt;&gt;
				}
			}
		});
------------------------------------
Git diff =0  Refactor Categories =3814</t>
<t tx="paran.20140803142459.2097">REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----Polishing and i:/PropertyAccessException.java:(131073, 139265)-----
		this.propertyName = propertyName;
		this.targetType = targetType;
	
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(131073, 155649)&gt;&gt;&gt;&gt;&gt;
	}

	@Override
	public String getMessage()
	{
		return String.format("Property '%s' on target of type %s.", propertyName, targetType);
	
------------------------------------
-----Polishing and i:/PropertyAccessor.java:(696321, 700417)-----
		}
	
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessor.java:(704513, 708609)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----Polishing and i:/PropertyAccessor.java:(724993, 729089)-----
		}
	
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessor.java:(733185, 737281)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
Git diff =0  Refactor Categories =648</t>
<t tx="paran.20140813185646.2169">&lt;&lt;Jasm raw results&gt;&gt;

&lt;&lt;Jpp raw results&gt;&gt;

&lt;&lt;ast-java raw results&gt;&gt;

&lt;&lt;java-object-diff raw results&gt;&gt;

&lt;&lt;diffj raw results&gt;&gt;</t>
<t tx="paran.20140813185646.2171">
REFACTOR CATEGORIES:COMMENT:DELETE
-----Added another t:/Main.java:(438273, 438276)-----
				
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(438273, 442372)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				
------------------------------------
-----More little twe:/ClassFileReader.java:(5562434, 5578755)-----
 
			// FIXME: I believe it's possible that have an array type here. This
			// is necessary to support cloning of arrays, which is implemented
			// by an invokevirtual bytecode.
			
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/ClassFileReader.java:(5566520, 5570561)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----Minor bug fixes:/JKitValidTests.java:(368641, 368644)-----
				
&gt;&gt;&gt;&gt;&gt;Added classfile:/JKitValidTests.java:(364545, 372737)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				// new TypeAnalysis().apply(cf);
	
------------------------------------
Git diff =0  Refactor Categories =7

REFACTOR CATEGORIES:COMMENT:INSERT
-----Added another t:/TypeAnalysis.java:(995329, 1003523)-----
			// This is a fall back, since it is permitted to perform an array
			// load / store on the null type.
			
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991233, 991235)&gt;&gt;&gt;&gt;&gt;
			
------------------------------------
-----More little twe:/ClassFileReader.java:(5562434, 5578755)-----
 
			// FIXME: I believe it's possible that have an array type here. This
			// is necessary to support cloning of arrays, which is implemented
			// by an invokevirtual bytecode.
			
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/ClassFileReader.java:(5566520, 5570561)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1880065, 1884162)-----
		// TODO: I'm slightly unsure whether or not this is a good idea!
		
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880065, 1880066)&gt;&gt;&gt;&gt;&gt;
		
------------------------------------
Git diff =0  Refactor Categories =6

REFACTOR CATEGORIES:COMMENT:MODIFY
-----Minor bug fix f:/TypeAnalysis.java:(970755, 970758)-----
if (
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(970755, 970757)&gt;&gt;&gt;&gt;&gt;
if(
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(970820, 970821)-----
) 
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(970787, 970788)&gt;&gt;&gt;&gt;&gt;
) 
------------------------------------
-----Minor bug fixes:/Code.java:(155649, 159745)-----
 * This represents the Code attribute from the JVM Specification.
 
&gt;&gt;&gt;&gt;&gt;Added classfile:/Code.java:(163841, 167937)&gt;&gt;&gt;&gt;&gt;
 * This represents the Code attribute from the JVM Spec.
 
------------------------------------
Git diff =0  Refactor Categories =80

REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----More little twe:/TypeAnalysis.java:(1069057, 1069058)-----
		
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(1069057, 1069058)&gt;&gt;&gt;&gt;&gt;
		
------------------------------------
-----More little twe:/TypeAnalysis.java:(1069101, 1073153)-----
		
	
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(1093636, 1097729)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1884205, 1888257)-----

	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880109, 1884161)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
Git diff =0  Refactor Categories =21

REFACTOR CATEGORIES:JAVA:DELETE
-----More little twe:/ClassFileReader.java:(5562372, 5562433)-----
String ownerString = getString(read_u2(read_u2(index, 0), 0));
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/ClassFileReader.java:(5562372, 5566519)&gt;&gt;&gt;&gt;&gt;
owner = parseClassDescriptor("L"
					+ getString(read_u2(read_u2(index, 0), 0)) + ";");
------------------------------------
-----More little twe:/ClassFileReader.java:(5578756, 5578809)-----
owner = parseClassDescriptor("L" + ownerString + ";");
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/ClassFileReader.java:(5562372, 5566519)&gt;&gt;&gt;&gt;&gt;
owner = parseClassDescriptor("L"
					+ getString(read_u2(read_u2(index, 0), 0)) + ";");
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1884183, 1884191)-----
code.type
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880082, 1880090)&gt;&gt;&gt;&gt;&gt;
code.type
------------------------------------
Git diff =0  Refactor Categories =119

REFACTOR CATEGORIES:JAVA:INSERT
-----Minor bug fix f:/TypeAnalysis.java:(1884199, 1884202)-----
orig
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880097, 1880101)&gt;&gt;&gt;&gt;&gt;
index
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768902, 2768940)-----
"expected type " + t1 + ", found type "
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2756666, 2756681)&gt;&gt;&gt;&gt;&gt;
"expected type "
------------------------------------
-----Minor bug fixes:/TypeAnalysis.java:(2768944, 2768945)-----
t2
&gt;&gt;&gt;&gt;&gt;Added classfile:/TypeAnalysis.java:(2760712, 2760713)&gt;&gt;&gt;&gt;&gt;
t1
------------------------------------
Git diff =0  Refactor Categories =11

GIT DIFF:JAVA:MODIFY
====================================
-----Added another t:/Main.java:(438273, 442369)-----
				new ClassFileVerifier().apply(cf);				
	
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(438273, 446465)&gt;&gt;&gt;&gt;&gt;
				// FIXME: get this working!!
				new TypeAnalysis().apply(cf);				
	
------------------------------------
-----Added another t:/TypeAnalysis.java:(995329, 1007617)-----
			// This is a fall back, since it is permitted to perform an array
			// load / store on the null type.
			store.push(JvmTypes.T_VOID);
	
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991233, 999425)&gt;&gt;&gt;&gt;&gt;
			throw new VerificationException(method, index, store,
					"arrayload expected array type");
	
------------------------------------
-----More little twe:/ClassFileReader.java:(5513217, 5517313)-----
		JvmType owner = null;
	
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/ClassFileReader.java:(5513217, 5517313)&gt;&gt;&gt;&gt;&gt;
		JvmType.Clazz owner = null;
	
------------------------------------

REFACTOR CATEGORIES:JAVA:MODIFY
-----Added another t:/Main.java:(438277, 438299)-----
new ClassFileVerifier()
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(442373, 442390)&gt;&gt;&gt;&gt;&gt;
new TypeAnalysis()
------------------------------------
-----Added another t:/Main.java:(438307, 438308)-----
cf
&gt;&gt;&gt;&gt;&gt;More little twe:/Main.java:(442398, 442399)&gt;&gt;&gt;&gt;&gt;
cf
------------------------------------
-----Added another t:/TypeAnalysis.java:(1003524, 1003551)-----
store.push(JvmTypes.T_VOID);
&gt;&gt;&gt;&gt;&gt;More little twe:/TypeAnalysis.java:(991236, 995366)&gt;&gt;&gt;&gt;&gt;
throw new VerificationException(method, index, store,
					"arrayload expected array type");
------------------------------------
Git diff =335  Refactor Categories =243

REFACTOR CATEGORIES:JAVA:MOVE
-----Minor bug fix f:/TypeAnalysis.java:(1884178, 1884181)-----
type
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1880092, 1880095)&gt;&gt;&gt;&gt;&gt;
type
------------------------------------
Git diff =0  Refactor Categories =1

REFACTOR CATEGORIES:JAVA:RENAMED
-----More little twe:/TypeAnalysis.java:(970790, 974849)-----
{
	
&gt;&gt;&gt;&gt;&gt;Minor bug fix f:/TypeAnalysis.java:(970822, 974849)&gt;&gt;&gt;&gt;&gt;
{
	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(970822, 974849)-----
{
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(970789, 974849)&gt;&gt;&gt;&gt;&gt;
{
	
------------------------------------
-----Minor bug fix f:/TypeAnalysis.java:(1069125, 1073153)-----
{
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1069093, 1073153)&gt;&gt;&gt;&gt;&gt;
{
	
------------------------------------
Git diff =0  Refactor Categories =28

REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----Minor bug fix f:/TypeAnalysis.java:(1708033, 1712129)-----
		if (!(type instanceof JvmType.Array || type instanceof JvmType.Null)) {
	
&gt;&gt;&gt;&gt;&gt;Bug fix for non:/TypeAnalysis.java:(1708033, 1712129)&gt;&gt;&gt;&gt;&gt;
		if (!(type instanceof JvmType.Array)) {
	
------------------------------------
-----Bug fix for put:/ClassFileReader.java:(3985409, 3989505)-----
			if(opcode == Bytecode.PUTSTATIC) {
	
&gt;&gt;&gt;&gt;&gt;More tweaks to :/ClassFileReader.java:(3985409, 3989505)&gt;&gt;&gt;&gt;&gt;
			if(opcode == Bytecode.GETSTATIC) {
	
------------------------------------
-----Bug fix for par:/Bytecode.java:(1409025, 1413121)-----
			} else if(constant instanceof JvmType.Reference) {
	
&gt;&gt;&gt;&gt;&gt;Fixed another b:/Bytecode.java:(1409025, 1413121)&gt;&gt;&gt;&gt;&gt;
			} else if(constant instanceof JvmType) {
	
------------------------------------
Git diff =0  Refactor Categories =61</t>
<t tx="paran.20140813185646.2173">REFACTOR CATEGORIES:COMMENT:DELETE
-----support for -s :/Program.java:(495646, 499713)-----

	
&gt;&gt;&gt;&gt;&gt;Update READM:/Program.java:(434206, 438273)&gt;&gt;&gt;&gt;&gt;
 /* Do *NOT* use canonical path */
	
------------------------------------
Git diff =0  Refactor Categories =1

REFACTOR CATEGORIES:COMMENT:INSERT
-----java 6 instead :/Program.java:(905217, 909313)-----
        //procBuilder.inheritIO();
 
&gt;&gt;&gt;&gt;&gt;make with gcj, :/Program.java:(823297, 823304)&gt;&gt;&gt;&gt;&gt;
        
------------------------------------
Git diff =0  Refactor Categories =1

REFACTOR CATEGORIES:COMMENT:MODIFY
-----mis:/Program.java:(126977, 131073)-----
 * @author  Mattias Andrée, &lt;a href="mailto:maandree@member.fsf.org"&gt;maandree@member.fsf.org&lt;/a&gt;
 
&gt;&gt;&gt;&gt;&gt;Update READM:/Program.java:(126977, 131073)&gt;&gt;&gt;&gt;&gt;
 * @author  Mattias Andrée, &lt;a href="mailto:maandree+jpp@kth.se"&gt;maandree+jpp@kth.se&lt;/a&gt;
 
------------------------------------
-----m do:/Program.java:(102401, 106497)-----
/* Compilers and preprocessors SHOULD NEVER use canonical paths. (except for maybe inclusing guarding) */


&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/Program.java:(102401, 106497)&gt;&gt;&gt;&gt;&gt;
/* Compilers and preprocessors SHOULD NEVER use canonical paths. */


------------------------------------
-----support for -s :/Program.java:(307208, 307211)-----
if (
&gt;&gt;&gt;&gt;&gt;Update READM:/Program.java:(290824, 290827)&gt;&gt;&gt;&gt;&gt;
if (
------------------------------------
Git diff =0  Refactor Categories =4

REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----ignore &lt;""&gt; dur:/Program.java:(901173, 905219)-----

			
&gt;&gt;&gt;&gt;&gt;portablilit:/Program.java:(876655, 880641)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----support for -s :/Program.java:(495617, 495618)-----
		
&gt;&gt;&gt;&gt;&gt;Update READM:/Program.java:(434177, 434178)&gt;&gt;&gt;&gt;&gt;
		
------------------------------------
-----test case + fix:/Program.java:(761891, 765958)-----

		    
&gt;&gt;&gt;&gt;&gt;der:/Program.java:(753705, 757761)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
Git diff =0  Refactor Categories =5

REFACTOR CATEGORIES:JAVA:DELETE
-----fix make file +:/Program.java:(458758, 462863)-----
if (sFlag.endsWith("/") == false)
		sFlag += "/";
&gt;&gt;&gt;&gt;&gt;improve makefil:/Program.java:(475137, 479233)&gt;&gt;&gt;&gt;&gt;
		String _file = absolute(file).substring(sFlag.length());
	
------------------------------------
-----fix make file +:/Program.java:(466950, 487425)-----
for (final String file : files)
	    {
		String _file = file;
		if (_file.startsWith(sFlag))
		    _file = _file.substring(sFlag.length());
	
&gt;&gt;&gt;&gt;&gt;improve makefil:/Program.java:(475137, 479233)&gt;&gt;&gt;&gt;&gt;
		String _file = absolute(file).substring(sFlag.length());
	
------------------------------------
-----test case + fix:/Program.java:(937986, 938014)-----
String exec = output + ".sh";
&gt;&gt;&gt;&gt;&gt;der:/Program.java:(909321, 909416)&gt;&gt;&gt;&gt;&gt;
final ProcessBuilder procBuilder = new ProcessBuilder(("bash ./" + output + ".sh").split("\0"));
------------------------------------
Git diff =0  Refactor Categories =9

REFACTOR CATEGORIES:JAVA:INSERT
-----postprocessin:/Program.java:(782347, 782366)-----
"echo '" + lineIndex
&gt;&gt;&gt;&gt;&gt;javac make subs:/Program.java:(774155, 774163)&gt;&gt;&gt;&gt;&gt;
lineIndex
------------------------------------
-----postprocessin:/Program.java:(782370, 782372)-----
" "
&gt;&gt;&gt;&gt;&gt;javac make subs:/Program.java:(774167, 774175)&gt;&gt;&gt;&gt;&gt;
" echo '"
------------------------------------
Git diff =0  Refactor Categories =2

GIT DIFF:JAVA:MODIFY
====================================
-----ignore &lt;""&gt; dur:/Program.java:(901121, 909313)-----
			data = data.replace("&lt;\"\"&gt;", debug ? "" : "//");
			data = data.replace("'", "'\\''").replace("&lt;\"$", "'\"${").replace("$\"&gt;", "}\"'");
	
&gt;&gt;&gt;&gt;&gt;portablilit:/Program.java:(876545, 880641)&gt;&gt;&gt;&gt;&gt;
			data = data.replace("&lt;\"\"&gt;", "//").replace("'", "'\\''").replace("&lt;\"$", "'\"${").replace("$\"&gt;", "}\"'");
	
------------------------------------
-----portablilit:/Program.java:(614401, 630785)-----
	final String ucs = "\033[00;01;3" + colour + "mjpp\033[36m:\033[3" + colour + "m" + _type + "\033[36m:\033[00m"
	                 + (_file == null ? "" : "\033[35m" + _file + "\033[36m:\033[00m")
	                 + (_location == null ? "" : "\033[32m" + _location.replace(":", "\033[36m:\033[32m") + "\033[36m:\033[00m")
	                 + _description.replace(":", "\033[36m:\033[34m") + "\033[00m";
	
&gt;&gt;&gt;&gt;&gt;update dis:/Program.java:(614401, 630785)&gt;&gt;&gt;&gt;&gt;
	final String ucs = "\033[0;1;3" + colour + "mjpp\033[36m:\033[3" + colour + "m" + _type + "\033[36m:\033[21;39m"
	                 + (_file == null ? "" : "\033[35m" + _file + "\033[36m:\033[39m")
	                 + (_location == null ? "" : "\033[32m" + _location.replace(":", "\033[36m:\033[32m") + "\033[36m:\033[39m")
	                 + _description.replace(":", "\033[36m:\033[34m") + "\033[0m";
	
------------------------------------
-----portablilit:/Program.java:(659457, 663553)-----
		    ascii.append("\033[02m\\0");
	
&gt;&gt;&gt;&gt;&gt;update dis:/Program.java:(659457, 663553)&gt;&gt;&gt;&gt;&gt;
		    ascii.append("\033[2m\\0");
	
------------------------------------

REFACTOR CATEGORIES:JAVA:MODIFY
-----ignore &lt;""&gt; dur:/Program.java:(901131, 901171)-----
data.replace("&lt;\"\"&gt;", debug ? "" : "//")
&gt;&gt;&gt;&gt;&gt;portablilit:/Program.java:(876555, 876653)&gt;&gt;&gt;&gt;&gt;
data.replace("&lt;\"\"&gt;", "//").replace("'", "'\\''").replace("&lt;\"$", "'\"${").replace("$\"&gt;", "}\"'")
------------------------------------
-----portablilit:/Program.java:(614402, 626768)-----
final String ucs = "\033[00;01;3" + colour + "mjpp\033[36m:\033[3" + colour + "m" + _type + "\033[36m:\033[00m"
	                 + (_file == null ? "" : "\033[35m" + _file + "\033[36m:\033[00m")
	                 + (_location == null ? "" : "\033[32m" + _location.replace(":", "\033[36m:\033[32m") + "\033[36m:\033[00m")
	                 + _description.replace(":", "\033[36m:\033[34m") + "\033[00m";
&gt;&gt;&gt;&gt;&gt;update dis:/Program.java:(614402, 626767)&gt;&gt;&gt;&gt;&gt;
final String ucs = "\033[0;1;3" + colour + "mjpp\033[36m:\033[3" + colour + "m" + _type + "\033[36m:\033[21;39m"
	                 + (_file == null ? "" : "\033[35m" + _file + "\033[36m:\033[39m")
	                 + (_location == null ? "" : "\033[32m" + _location.replace(":", "\033[36m:\033[32m") + "\033[36m:\033[39m")
	                 + _description.replace(":", "\033[36m:\033[34m") + "\033[0m";
------------------------------------
-----portablilit:/Program.java:(659476, 659484)-----
"\033[02m
&gt;&gt;&gt;&gt;&gt;update dis:/Program.java:(659476, 659483)&gt;&gt;&gt;&gt;&gt;
"\033[2m
------------------------------------
Git diff =41  Refactor Categories =45

REFACTOR CATEGORIES:JAVA:RENAMED
-----der:/Program.java:(987141, 991233)-----
public static void postprocess(final String input, final String output) throws Throwable
 
&gt;&gt;&gt;&gt;&gt;postprocessin:/Program.java:(987141, 991233)&gt;&gt;&gt;&gt;&gt;
public static void process(final String input, final String output) throws Throwable
 
------------------------------------
-----if nothing is w:/Program.java:(180226, 180276)-----
final HashSet&lt;String&gt;  fileSet = new   HashSet&lt;&gt;();
&gt;&gt;&gt;&gt;&gt;program bas:/Program.java:(167938, 167993)&gt;&gt;&gt;&gt;&gt;
final ArrayList&lt;String&gt; files = new ArrayList&lt;String&gt;();
------------------------------------
Git diff =0  Refactor Categories =2

REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----test case + fix:/Program.java:(790529, 794625)-----
			out.write((trim + line.substring(line.startsWith("#!") ? 0 : 1)).getBytes("UTF-8"));
	
&gt;&gt;&gt;&gt;&gt;der:/Program.java:(761857, 765953)&gt;&gt;&gt;&gt;&gt;
			out.write(line.substring(1).getBytes("UTF-8"));
	
------------------------------------
Git diff =0  Refactor Categories =1</t>
<t tx="paran.20140813185646.2175">REFACTOR CATEGORIES:COMMENT:DELETE
-----Project test wo:/JavaASTParser.java:(299009, 299010)-----
		
&gt;&gt;&gt;&gt;&gt;Package parse:/JavaASTParser.java:(299009, 303106)&gt;&gt;&gt;&gt;&gt;
		// TODO Auto-generated method stub
		
------------------------------------
-----Package parse:/JavaASTParser.java:(221185, 221186)-----
		
&gt;&gt;&gt;&gt;&gt;Changes in pars:/JavaASTParser.java:(217089, 221186)&gt;&gt;&gt;&gt;&gt;
		// TODO Auto-generated method stub
		
------------------------------------
Git diff =0  Refactor Categories =2

REFACTOR CATEGORIES:COMMENT:MODIFY
-----Refactoring imp:/NodeImpl.java:(4097, 8193)-----
package com.klangner.ast.impl;


&gt;&gt;&gt;&gt;&gt;File is Compila:/NodeImpl.java:(4097, 8193)&gt;&gt;&gt;&gt;&gt;
package com.klangner.ast.java;


------------------------------------
-----Stworzenie jako:/JavaBaseListener.java:(8193, 12289)-----
package com.klangner.ast.java.grammar;


&gt;&gt;&gt;&gt;&gt;Refactorin:/JavaBaseListener.java:(8193, 12289)&gt;&gt;&gt;&gt;&gt;
package com.klangner.entropy.parser.java;


------------------------------------
-----Stworzenie jako:/JavaASTParserTest.java:(4097, 8193)-----
package com.klangner.ast.java;


&gt;&gt;&gt;&gt;&gt;Refactorin:/ASTParserTest.java:(4097, 8193)&gt;&gt;&gt;&gt;&gt;
package com.klangner.entropy.parser;


------------------------------------
Git diff =0  Refactor Categories =5

REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----Parse import de:/ASTBuilder.java:(102460, 106498)-----

		
&gt;&gt;&gt;&gt;&gt;Parsing java fi:/ASTBuilder.java:(102457, 106497)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----File is Compila:/JavaASTParser.java:(401501, 405505)-----

	
&gt;&gt;&gt;&gt;&gt;Datasets moved :/JavaASTParser.java:(389148, 393221)&gt;&gt;&gt;&gt;&gt;

					
------------------------------------
-----Changes in pars:/JavaASTParser.java:(110639, 118792)-----


        
&gt;&gt;&gt;&gt;&gt;renamed maven p:/JavaASTParser.java:(81973, 86017)&gt;&gt;&gt;&gt;&gt;

 
------------------------------------
Git diff =0  Refactor Categories =5

REFACTOR CATEGORIES:JAVA:DELETE
-----New functions i:/JavaASTParser.java:(339971, 340006)-----
String subPackageName = packageName;
&gt;&gt;&gt;&gt;&gt;updated after s:/JavaASTParser.java:(339971, 348161)&gt;&gt;&gt;&gt;&gt;
if(!packageName.isEmpty()){
			packageName += ".";
	
------------------------------------
-----New functions i:/JavaASTParser.java:(344067, 352257)-----
if(!subPackageName.isEmpty()){
			subPackageName += ".";
	
&gt;&gt;&gt;&gt;&gt;updated after s:/JavaASTParser.java:(339971, 348161)&gt;&gt;&gt;&gt;&gt;
if(!packageName.isEmpty()){
			packageName += ".";
	
------------------------------------
-----File is Compila:/ASTBuilder.java:(102403, 102413)-----
currentNode
&gt;&gt;&gt;&gt;&gt;Datasets moved :/ASTBuilder.java:(73731, 73738)&gt;&gt;&gt;&gt;&gt;
rootNode
------------------------------------
Git diff =0  Refactor Categories =19

REFACTOR CATEGORIES:JAVA:INSERT
-----File is Compila:/ASTBuilder.java:(102403, 102413)-----
currentNode
&gt;&gt;&gt;&gt;&gt;Datasets moved :/ASTBuilder.java:(73731, 73738)&gt;&gt;&gt;&gt;&gt;
rootNode
------------------------------------
-----File is Compila:/ASTBuilder.java:(102417, 102420)-----
node
&gt;&gt;&gt;&gt;&gt;Datasets moved :/ASTBuilder.java:(73742, 73781)&gt;&gt;&gt;&gt;&gt;
new NodeImpl(ctx.Identifier().getText())
------------------------------------
-----File is Compila:/JavaASTParser.java:(401414, 401500)-----
INode node = parseProjectDirectory(file.getAbsolutePath(), packageName+file.getName());
&gt;&gt;&gt;&gt;&gt;Datasets moved :/JavaASTParser.java:(389126, 389147)&gt;&gt;&gt;&gt;&gt;
String subPackageName;
------------------------------------
Git diff =0  Refactor Categories =5

GIT DIFF:JAVA:MODIFY
====================================
-----New functions i:/ImportImpl.java:(28673, 81921)-----
	public ImportImpl(String text) {
		super(text);
	}

	@Override
	public String getPackageName() {
		String name = getText();
		
		int index = name.lastIndexOf('.');
		if(index &gt;= 0){
			name = name.substring(0, index);
		}
		return name;
	
&gt;&gt;&gt;&gt;&gt;updated after s:/ImportImpl.java:(28673, 36865)&gt;&gt;&gt;&gt;&gt;
	public ImportImpl(String name) {
		super(name);
	
------------------------------------
-----New functions i:/ModuleImpl.java:(28673, 73729)-----
	private String name;
	
	
	public ModuleImpl(String text, String name) {
		super(text);
		this.name = name;
	}

	@Override
	public String getName() {
		return name;
	
&gt;&gt;&gt;&gt;&gt;updated after s:/ModuleImpl.java:(28673, 36865)&gt;&gt;&gt;&gt;&gt;
	public ModuleImpl(String name) {
		super(name);
	
------------------------------------
-----New functions i:/JavaASTParser.java:(339969, 352257)-----
		String subPackageName = packageName;
		if(!subPackageName.isEmpty()){
			subPackageName += ".";
	
&gt;&gt;&gt;&gt;&gt;updated after s:/JavaASTParser.java:(339969, 348161)&gt;&gt;&gt;&gt;&gt;
		if(!packageName.isEmpty()){
			packageName += ".";
	
------------------------------------

REFACTOR CATEGORIES:JAVA:MODIFY
-----New functions i:/ModuleImpl.java:(28674, 28693)-----
private String name;
&gt;&gt;&gt;&gt;&gt;updated after s:/ModuleImpl.java:(28674, 36865)&gt;&gt;&gt;&gt;&gt;
public ModuleImpl(String name) {
		super(name);
	
------------------------------------
-----New functions i:/JavaASTParser.java:(397319, 397384)-----
INode node = parseModuleFile(file.getAbsolutePath(), packageName);
&gt;&gt;&gt;&gt;&gt;updated after s:/JavaASTParser.java:(393223, 393275)&gt;&gt;&gt;&gt;&gt;
INode node = parseModuleFile(file.getAbsolutePath());
------------------------------------
-----New functions i:/JavaASTParser.java:(417798, 417887)-----
INode node = parseProjectDirectory(file.getAbsolutePath(), subPackageName+file.getName());
&gt;&gt;&gt;&gt;&gt;updated after s:/JavaASTParser.java:(413702, 413788)&gt;&gt;&gt;&gt;&gt;
INode node = parseProjectDirectory(file.getAbsolutePath(), packageName+file.getName());
------------------------------------
Git diff =85  Refactor Categories =37

REFACTOR CATEGORIES:JAVA:RENAMED
-----updated after s:/NodeImpl.java:(77825, 81921)-----
	public String getText() {
	
&gt;&gt;&gt;&gt;&gt;fixed project n:/NodeImpl.java:(77825, 81921)&gt;&gt;&gt;&gt;&gt;
	public String getName() {
	
------------------------------------
-----Parse import:/FileParserTest.java:(241665, 253953)-----
			if(ast.getChild(0) instanceof IImport){
				importNode = (IImport) ast.getChild(0);
				break;
	
&gt;&gt;&gt;&gt;&gt;Parse import de:/FileParserTest.java:(163841, 167937)&gt;&gt;&gt;&gt;&gt;
			System.out.println(ast.getChild(i));
	
------------------------------------
-----Correctly reads:/JavaASTParser.java:(364545, 368641)-----
					else if(file.getName().equals("module.info")){
	
&gt;&gt;&gt;&gt;&gt;Project test wo:/JavaASTParser.java:(348161, 356353)&gt;&gt;&gt;&gt;&gt;
				}
				else{
	
------------------------------------
Git diff =0  Refactor Categories =20

REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----New functions i:/ImportImpl.java:(28673, 81921)-----
	public ImportImpl(String text) {
		super(text);
	}

	@Override
	public String getPackageName() {
		String name = getText();
		
		int index = name.lastIndexOf('.');
		if(index &gt;= 0){
			name = name.substring(0, index);
		}
		return name;
	
&gt;&gt;&gt;&gt;&gt;updated after s:/ImportImpl.java:(28673, 36865)&gt;&gt;&gt;&gt;&gt;
	public ImportImpl(String name) {
		super(name);
	
------------------------------------
-----updated after s:/ProjectParserTest.java:(188417, 192513)-----
		if(node1.getText().equals("impl1")){
	
&gt;&gt;&gt;&gt;&gt;fixed project n:/ProjectParserTest.java:(188417, 192513)&gt;&gt;&gt;&gt;&gt;
		if(node1.getName().equals("impl1")){
	
------------------------------------
-----updated after s:/ProjectParserTest.java:(299009, 303105)-----
		if(ast.getChild(0).getText().equals("impl2")){
	
&gt;&gt;&gt;&gt;&gt;fixed project n:/ProjectParserTest.java:(299009, 303105)&gt;&gt;&gt;&gt;&gt;
		if(ast.getChild(0).getName().equals("impl2")){
	
------------------------------------
Git diff =0  Refactor Categories =21</t>
<t tx="paran.20140813185646.2177">REFACTOR CATEGORIES:COMMENT:DELETE
-----Fixed issue #57:/CircularReferenceDetector.java:(110593, 126977)-----
	/**
	 * It would be better to use &lt;code&gt;java.util.Deque&lt;/code&gt; instead of the linked list, but that was first
	 * introduced in Java 6 and would break compatibility with Java 5.
	 */
	
&gt;&gt;&gt;&gt;&gt;Removed unneces:/CircularReferenceDetector.java:(110653, 114689)&gt;&gt;&gt;&gt;&gt;



------------------------------------
-----Refactored Bean:/BeanDifferShould.java:(573443, 577537)-----



&gt;&gt;&gt;&gt;&gt;Refactored Bean:/BeanDifferShould.java:(434177, 565249)&gt;&gt;&gt;&gt;&gt;
//	@Test
//	public void introspect_introspectible_beans()
//	{
//		accessor = mock(Accessor.class);
//
//		final Instances propertyInstances = mock(Instances.class);
//		instances = mock(Instances.class);
//		doReturn(accessor).when(instances).getSourceAccessor();
//		doReturn(ObjectWithIdentityAndValue.class).when(instances).getType();
//		doReturn(propertyInstances).when(instances).access(accessor);
//
//		configuration = mock(Configuration.class);
//		doReturn(true).when(configuration).isIntrospectible(any(DefaultNode.class));
//
//		delegator = mock(DifferDelegator.class);
//
//		differ = new BeanDiffer(delegator, configuration);
//		differ.setIntrospector(introspector);
//
//		when(introspector.introspect(ObjectWithIdentityAndValue.class)).thenReturn(asList(accessor));
//
//		final Node node = differ.compare(Node.ROOT, instances);
//
//		verify(introspector).introspect(ObjectWithIdentityAndValue.class);
//	}
//
//	@AfterMethod
//	public void tearDown() throws Exception
//	{
//		final MockitoDebugger debugger = new MockitoDebuggerImpl();
//		debugger.printInvocations(instances, configuration, delegator, introspector, accessor);
//	}


------------------------------------
-----Refactored Bean:/BeanDifferShould.java:(180245, 184321)-----

	
&gt;&gt;&gt;&gt;&gt;Simplified Diff:/BeanDifferShould.java:(155668, 155669)&gt;&gt;&gt;&gt;&gt;
) 
------------------------------------
Git diff =0  Refactor Categories =9

REFACTOR CATEGORIES:COMMENT:INSERT
-----Made adjustment:/InclusionService.java:(618497, 634882)-----
//		else if (node.getParentNode() != null &amp;&amp; typeInclusions.get(node.getParentNode().getValueType()) == INCLUDED)
//		{
//			return true;
//		}
		
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(684038, 688130)&gt;&gt;&gt;&gt;&gt;

		
------------------------------------
-----Major refactori:/ObjectDifferIntegrationTests.java:(450641, 458753)-----

		// final Configuration2 configuration = new Configuration2().withChildrenOfAddedNodes();


&gt;&gt;&gt;&gt;&gt;Update README.m:/ObjectDifferIntegrationTests.java:(434262, 438273)&gt;&gt;&gt;&gt;&gt;



------------------------------------
-----Fixed issue #57:/CircularReferenceDetector.java:(110593, 126977)-----
	/**
	 * It would be better to use &lt;code&gt;java.util.Deque&lt;/code&gt; instead of the linked list, but that was first
	 * introduced in Java 6 and would break compatibility with Java 5.
	 */
	
&gt;&gt;&gt;&gt;&gt;Removed unneces:/CircularReferenceDetector.java:(110653, 114689)&gt;&gt;&gt;&gt;&gt;



------------------------------------
Git diff =0  Refactor Categories =15

REFACTOR CATEGORIES:COMMENT:MODIFY
-----Made adjustment:/InclusionService.java:(385028, 385031)-----
if (
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(393220, 393223)&gt;&gt;&gt;&gt;&gt;
if (
------------------------------------
-----Made adjustment:/InclusionService.java:(385054, 389121)-----
)
	
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(393241, 397315)&gt;&gt;&gt;&gt;&gt;
)
			
------------------------------------
-----Polishing and i:/PropertyAccessException.java:(118787, 118819)-----
rotected PropertyAccessException(
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(118787, 118816)&gt;&gt;&gt;&gt;&gt;
ublic PropertyAccessException(
------------------------------------
Git diff =0  Refactor Categories =1069

REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----Polishing and i:/DefaultPropertyAccessExceptionHandler.java:(118823, 122881)-----

	
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/DefaultPropertyAccessExceptionHandler.java:(118835, 122882)&gt;&gt;&gt;&gt;&gt;

		
------------------------------------
-----Polishing and i:/PropertyAccessException.java:(118896, 122881)-----

	
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(118839, 122881)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----Renamed 'config:/ObjectDifferIT.java:(552961, 552962)-----
		
&gt;&gt;&gt;&gt;&gt;Made the config:/ObjectDifferIT.java:(552961, 552962)&gt;&gt;&gt;&gt;&gt;
		
------------------------------------
Git diff =0  Refactor Categories =227

REFACTOR CATEGORIES:JAVA:DELETE
-----Polishing and i:/PropertyAccessException.java:(118820, 118844)-----
final String propertyName
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(118817, 118837)&gt;&gt;&gt;&gt;&gt;
final Throwable cause
------------------------------------
-----Polishing and i:/PropertyAccessException.java:(118847, 118871)-----
final Class&lt;?&gt; targetType
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(118817, 118837)&gt;&gt;&gt;&gt;&gt;
final Throwable cause
------------------------------------
-----Polishing and i:/PropertyAccessException.java:(118874, 118894)-----
final Throwable cause
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(118817, 118837)&gt;&gt;&gt;&gt;&gt;
final Throwable cause
------------------------------------
Git diff =0  Refactor Categories =640

REFACTOR CATEGORIES:JAVA:INSERT
-----Made adjustment:/InclusionService.java:(634883, 634895)-----
return false;
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(675841, 684037)&gt;&gt;&gt;&gt;&gt;
				}
			}
		});
------------------------------------
-----Made adjustment:/InclusionService.java:(634883, 634895)-----
return false;
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(688131, 712707)&gt;&gt;&gt;&gt;&gt;
if (node.getValueType() != null)
		{
			if (typeInclusions.get(node.getValueType()) == INCLUDED)
			{
				result.set(true);
			}
		}
------------------------------------
-----Made adjustment:/InclusionService.java:(634883, 634895)-----
return false;
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(716803, 716822)&gt;&gt;&gt;&gt;&gt;
return result.get();
------------------------------------
Git diff =0  Refactor Categories =593

GIT DIFF:JAVA:MODIFY
====================================
-----Made adjustment:/InclusionService.java:(385025, 389121)-----
			if (isExcludedByPath(node))
	
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(393217, 413697)&gt;&gt;&gt;&gt;&gt;
			if (node.isExcluded())
			{
				return true;
			}
			else if (isExcludedByPath(node))
	
------------------------------------
-----Made adjustment:/InclusionService.java:(610305, 614401)-----
			return true;
	
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(663553, 671745)&gt;&gt;&gt;&gt;&gt;
						result.set(true);
						visit.stop();
	
------------------------------------
-----Made adjustment:/InclusionService.java:(618497, 638977)-----
//		else if (node.getParentNode() != null &amp;&amp; typeInclusions.get(node.getParentNode().getValueType()) == INCLUDED)
//		{
//			return true;
//		}
		return false;
	
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(675841, 720897)&gt;&gt;&gt;&gt;&gt;
				}
			}
		});
		if (node.getValueType() != null)
		{
			if (typeInclusions.get(node.getValueType()) == INCLUDED)
			{
				result.set(true);
			}
		}
		return result.get();
	
------------------------------------

REFACTOR CATEGORIES:JAVA:MODIFY
-----Made adjustment:/InclusionService.java:(385032, 385053)-----
isExcludedByPath(node)
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(393224, 393240)&gt;&gt;&gt;&gt;&gt;
node.isExcluded()
------------------------------------
-----Made adjustment:/InclusionService.java:(610305, 614401)-----
			return true;
	
&gt;&gt;&gt;&gt;&gt;[maven-release-:/InclusionService.java:(663553, 671745)&gt;&gt;&gt;&gt;&gt;
						result.set(true);
						visit.stop();
	
------------------------------------
-----Polishing and i:/DefaultPropertyAccessExceptionHandler.java:(102402, 102486)-----
Logger logger = LoggerFactory.getLogger(DefaultPropertyAccessExceptionHandler.class);
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/DefaultPropertyAccessExceptionHandler.java:(102402, 102507)&gt;&gt;&gt;&gt;&gt;
private static final Logger logger = LoggerFactory.getLogger(DefaultPropertyAccessExceptionHandler.class);
------------------------------------
Git diff =8219  Refactor Categories =5240

REFACTOR CATEGORIES:JAVA:RENAMED
-----Polishing and i:/PropertyAccessor.java:(520202, 520222)-----
final Exception cause
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessor.java:(520202, 520218)&gt;&gt;&gt;&gt;&gt;
final Exception e
------------------------------------
-----Polishing and i:/PropertyAccessor.java:(765962, 765982)-----
final Exception cause
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessor.java:(774154, 774170)&gt;&gt;&gt;&gt;&gt;
final Exception e
------------------------------------
-----Simplified Intr:/CategoryAware.java:(106498, 106539)-----
Set&lt;String&gt; getCategoriesFromAnnotation();
&gt;&gt;&gt;&gt;&gt;Rewrote tests f:/CategoryAware.java:(106498, 106525)&gt;&gt;&gt;&gt;&gt;
Set&lt;String&gt; getCategories();
------------------------------------
Git diff =0  Refactor Categories =2702

REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----Polishing and i:/PropertyAccessException.java:(131073, 139265)-----
		this.propertyName = propertyName;
		this.targetType = targetType;
	
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessException.java:(131073, 155649)&gt;&gt;&gt;&gt;&gt;
	}

	@Override
	public String getMessage()
	{
		return String.format("Property '%s' on target of type %s.", propertyName, targetType);
	
------------------------------------
-----Polishing and i:/PropertyAccessor.java:(696321, 700417)-----
		}
	
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessor.java:(704513, 708609)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
-----Polishing and i:/PropertyAccessor.java:(724993, 729089)-----
		}
	
&gt;&gt;&gt;&gt;&gt;Simplified Intr:/PropertyAccessor.java:(733185, 737281)&gt;&gt;&gt;&gt;&gt;

	
------------------------------------
Git diff =0  Refactor Categories =825</t>
<t tx="paran.20140813185646.2179">REFACTOR CATEGORIES:COMMENT:DELETE
-----Moved Lines cla:/TestMethodCodeByStatement.java:(311297, 311304)-----
        
&gt;&gt;&gt;&gt;&gt;Added Delta cla:/TestMethodCodeByStatement.java:(344065, 348161)&gt;&gt;&gt;&gt;&gt;
        // dump(methBlk);


------------------------------------
-----Added compariso:/Initializer.java:(57345, 57348)-----
    
&gt;&gt;&gt;&gt;&gt;Added compariso:/Initializer.java:(36865, 65537)&gt;&gt;&gt;&gt;&gt;
    // public static final Message METHOD_REMOVED = new Message("method removed: {0}");
    // public static final Message METHOD_ADDED = new Message("method added: {0}");
    // public final static Messages METHOD_MSGS = new Messages(METHOD_ADDED, null, METHOD_REMOVED);

    // public static final Message RETURN_TYPE_CHANGED = new Message("return type changed from {0} to {1}");
    // public static final Message METHOD_BLOCK_ADDED = new Message("method block added");
    // public static final Message METHOD_BLOCK_REMOVED = new Message("method block removed");


------------------------------------
-----Added compariso:/Initializer.java:(77825, 77828)-----
    
&gt;&gt;&gt;&gt;&gt;Added compariso:/Initializer.java:(73729, 81921)&gt;&gt;&gt;&gt;&gt;
    // private final Block block;
    // private final String name;


------------------------------------
Git diff =0  Refactor Categories =29

REFACTOR CATEGORIES:COMMENT:INSERT
-----Added compariso:/Type.java:(622593, 634881)-----
        // Items&lt;Field, ASTFieldDeclaration&gt; fromFields = getFields();
        // Items&lt;Field, ASTFieldDeclaration&gt; toFields = toType.getFields();
        // fromFields.diff(toFields, differences);
 
&gt;&gt;&gt;&gt;&gt;Refactored Toke:/Type.java:(552961, 552968)&gt;&gt;&gt;&gt;&gt;
        
------------------------------------
-----Added compariso:/Type.java:(638977, 651265)-----
        // Items&lt;Ctor, ASTConstructorDeclaration&gt; fromCtors = getCtors();
        // Items&lt;Ctor, ASTConstructorDeclaration&gt; toCtors = toType.getCtors();
        // fromCtors.diff(toCtors, differences);
 
&gt;&gt;&gt;&gt;&gt;Refactored Toke:/Type.java:(569345, 569352)&gt;&gt;&gt;&gt;&gt;
        
------------------------------------
-----Another interme:/Block.java:(397313, 413697)-----
        // LocationRange fromLocRg = alist.getLocationRange(df.getDeletedStart(), df.getDeletedEnd());
        // tr.Ace.log("fromLocRg", fromLocRg);
        // LocationRange toLocRg = blist.getLocationRange(df.getAddedStart(), df.getAddedEnd());
        // tr.Ace.log("toLocRg", toLocRg);


&gt;&gt;&gt;&gt;&gt;Intermediate ch:/Block.java:(352257, 352264)&gt;&gt;&gt;&gt;&gt;
        
------------------------------------
Git diff =0  Refactor Categories =38

REFACTOR CATEGORIES:COMMENT:MODIFY
-----Moved Lines cla:/Lines.java:(4097, 8193)-----
package org.incava.diffj.util;


&gt;&gt;&gt;&gt;&gt;Added Delta cla:/Lines.java:(4097, 8193)&gt;&gt;&gt;&gt;&gt;
package org.incava.diffj;


------------------------------------
-----Refactored Stat:/StatementListDifferenceChange.java:(45177, 49160)-----
{
        
&gt;&gt;&gt;&gt;&gt;More refactorin:/StatementListDifferenceChange.java:(45157, 49153)&gt;&gt;&gt;&gt;&gt;
{
 
------------------------------------
-----More migration :/StatementListDiffer.java:(32853, 36868)-----
{
    
&gt;&gt;&gt;&gt;&gt;Refined getAsTo:/StatementListDiffer.java:(28757, 32772)&gt;&gt;&gt;&gt;&gt;
{
    
------------------------------------
Git diff =0  Refactor Categories =135

REFACTOR CATEGORIES:WHITESPACE:MODIFY
-----Merge branch 'm:/Tkn.java:(159754, 167944)-----

        
        
&gt;&gt;&gt;&gt;&gt;Removed unused :/Tkn.java:(172128, 176129)&gt;&gt;&gt;&gt;&gt;

 
------------------------------------
-----Added Delta cla:/Tkn.java:(172128, 176129)-----

 
&gt;&gt;&gt;&gt;&gt;Refactored Toke:/Tkn.java:(159754, 167944)&gt;&gt;&gt;&gt;&gt;

        
        
------------------------------------
-----Refactored Toke:/Tkn.java:(159754, 167944)-----

        
        
&gt;&gt;&gt;&gt;&gt;Refactored Stat:/Tkn.java:(172128, 176129)&gt;&gt;&gt;&gt;&gt;

 
------------------------------------
Git diff =0  Refactor Categories =253

REFACTOR CATEGORIES:JAVA:DELETE
-----Merge branch 'm:/Tkn.java:(139273, 159753)-----
if (token == null) {
            return other.token == null ? 0 : -1;
        }
        else if (other.token == null) {
            return 1;
        }
&gt;&gt;&gt;&gt;&gt;Removed unused :/Tkn.java:(172041, 172127)&gt;&gt;&gt;&gt;&gt;
int cmp = token.kind &lt; other.token.kind ? -1 : (token.kind &gt; other.token.kind ? 1 : 0);
------------------------------------
-----Merge branch 'm:/Tkn.java:(167945, 168019)-----
int cmp = new Integer(token.kind).compareTo(new Integer(other.token.kind));
&gt;&gt;&gt;&gt;&gt;Removed unused :/Tkn.java:(172041, 172127)&gt;&gt;&gt;&gt;&gt;
int cmp = token.kind &lt; other.token.kind ? -1 : (token.kind &gt; other.token.kind ? 1 : 0);
------------------------------------
-----Refactored Toke:/Tkn.java:(139273, 159753)-----
if (token == null) {
            return other.token == null ? 0 : -1;
        }
        else if (other.token == null) {
            return 1;
        }
&gt;&gt;&gt;&gt;&gt;Refactored Stat:/Tkn.java:(172041, 172127)&gt;&gt;&gt;&gt;&gt;
int cmp = token.kind &lt; other.token.kind ? -1 : (token.kind &gt; other.token.kind ? 1 : 0);
------------------------------------
Git diff =0  Refactor Categories =1581

REFACTOR CATEGORIES:JAVA:INSERT
-----Added Delta cla:/Tkn.java:(172041, 172127)-----
int cmp = token.kind &lt; other.token.kind ? -1 : (token.kind &gt; other.token.kind ? 1 : 0);
&gt;&gt;&gt;&gt;&gt;Refactored Toke:/Tkn.java:(139273, 159753)&gt;&gt;&gt;&gt;&gt;
if (token == null) {
            return other.token == null ? 0 : -1;
        }
        else if (other.token == null) {
            return 1;
        }
------------------------------------
-----Added Delta cla:/Tkn.java:(172041, 172127)-----
int cmp = token.kind &lt; other.token.kind ? -1 : (token.kind &gt; other.token.kind ? 1 : 0);
&gt;&gt;&gt;&gt;&gt;Refactored Toke:/Tkn.java:(167945, 168019)&gt;&gt;&gt;&gt;&gt;
int cmp = new Integer(token.kind).compareTo(new Integer(other.token.kind));
------------------------------------
-----Refactored Stat:/StatementListDifference.java:(73737, 73793)-----
process(name, fromStatements, toStatements, differences);
&gt;&gt;&gt;&gt;&gt;More refactorin:/StatementListDifference.java:(73737, 73823)&gt;&gt;&gt;&gt;&gt;
TokenList fromList = fromStatements.getAsTokenList(getDeletedStart(), getDeletedEnd());
------------------------------------
Git diff =0  Refactor Categories =1396

GIT DIFF:JAVA:MODIFY
====================================
-----Made compliant :/Diffable.java:(36865, 40961)-----
public interface Diffable&lt;DiffType extends Diffable&lt;DiffType&gt;&gt; {
 
&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/Diffable.java:(36865, 40961)&gt;&gt;&gt;&gt;&gt;
public interface Diffable&lt;DiffType extends Diffable&gt; {
 
------------------------------------
-----Made compliant :/ParameterTypes.java:(118785, 122881)-----
        ListComparator&lt;String&gt; lc = new ListComparator&lt;String&gt;(paramTypes, toParamTypes);


&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/ParameterTypes.java:(118785, 122881)&gt;&gt;&gt;&gt;&gt;
        ListComparator lc = new ListComparator&lt;String&gt;(paramTypes, toParamTypes);


------------------------------------
-----Made compliant :/TypeMatches.java:(45057, 49153)-----
import org.incava.ijdk.lang.NCPair;
i
&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/TypeMatches.java:(45057, 49153)&gt;&gt;&gt;&gt;&gt;
import org.incava.ijdk.lang.Pair;
i
------------------------------------

REFACTOR CATEGORIES:JAVA:MODIFY
-----Made compliant :/ParameterTypes.java:(118793, 118873)-----
ListComparator&lt;String&gt; lc = new ListComparator&lt;String&gt;(paramTypes, toParamTypes);
&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/ParameterTypes.java:(118793, 118865)&gt;&gt;&gt;&gt;&gt;
ListComparator lc = new ListComparator&lt;String&gt;(paramTypes, toParamTypes);
------------------------------------
-----Made compliant :/TypeMatches.java:(61476, 61508)-----
NCPair&lt;ElementType, ElementType&gt;&gt;
&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/TypeMatches.java:(61476, 61506)&gt;&gt;&gt;&gt;&gt;
Pair&lt;ElementType, ElementType&gt;&gt;
------------------------------------
-----Made compliant :/TypeMatches.java:(86025, 86036)-----
this.matches
&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/TypeMatches.java:(86025, 86036)&gt;&gt;&gt;&gt;&gt;
this.matches
------------------------------------
Git diff =3544  Refactor Categories =2727

REFACTOR CATEGORIES:JAVA:MOVE
-----Midstream on re:/StatementListDiffer.java:(159825, 159832)-----
delStart
&gt;&gt;&gt;&gt;&gt;Refactored Type:/StatementListDiffer.java:(159815, 159822)&gt;&gt;&gt;&gt;&gt;
delStart
------------------------------------
-----Midstream on re:/StatementListDiffer.java:(172116, 172123)-----
delStart
&gt;&gt;&gt;&gt;&gt;Refactored Type:/StatementListDiffer.java:(172106, 172113)&gt;&gt;&gt;&gt;&gt;
delStart
------------------------------------
-----Midstream on re:/StatementListDiffer.java:(184404, 184411)-----
delStart
&gt;&gt;&gt;&gt;&gt;Refactored Type:/StatementListDiffer.java:(184394, 184401)&gt;&gt;&gt;&gt;&gt;
delStart
------------------------------------
Git diff =0  Refactor Categories =31

REFACTOR CATEGORIES:JAVA:RENAMED
-----Added Delta cla:/StatementListDifferenceAdd.java:(69637, 77829)-----
public FileDiff getFileDiff(String msg, LocationRange fromLocRg, LocationRange toLocRg) {
        return new FileDiffCodeAdded(msg, fromLocRg, toLocRg);
    }
&gt;&gt;&gt;&gt;&gt;Refactored Toke:/StatementListDifferenceAdd.java:(73733, 86017)&gt;&gt;&gt;&gt;&gt;
public void process(String name, StatementList fromStatements, StatementList toStatements, Differences differences) {
        LocationRange flr = fromStatements.getRangeAt(getDeletedStart());
        LocationRange tlr = toStatements.getRangeOf(getAddedStart(), getAddedEnd());


------------------------------------
-----Added Delta cla:/StatementListDifferenceAdd.java:(86021, 94213)-----
public LocationRange getFromRange(StatementList fromStatements) {
        return fromStatements.getRangeAt(getDeletedStart());
    }
&gt;&gt;&gt;&gt;&gt;Refactored Toke:/StatementListDifferenceAdd.java:(90113, 102401)&gt;&gt;&gt;&gt;&gt;
        String msg = getMessage(name);        
        FileDiff fileDiff = new FileDiffCodeAdded(msg, flr, tlr);
        differences.add(fileDiff);
 
------------------------------------
-----Added Delta cla:/StatementListDifferenceDelete.java:(69637, 77829)-----
public FileDiff getFileDiff(String msg, LocationRange fromLocRg, LocationRange toLocRg) {
        return new FileDiffCodeDeleted(msg, fromLocRg, toLocRg);
    }
&gt;&gt;&gt;&gt;&gt;Refactored Toke:/StatementListDifferenceDelete.java:(73733, 86017)&gt;&gt;&gt;&gt;&gt;
public void process(String name, StatementList fromStatements, StatementList toStatements, Differences differences) {
        LocationRange flr = fromStatements.getRangeOf(getDeletedStart(), getDeletedEnd());
        LocationRange tlr = toStatements.getRangeAt(getAddedStart());


------------------------------------
Git diff =0  Refactor Categories =1068

REFACTOR CATEGORIES:JAVA:EQUIVALENT
-----Made compliant :/Diffable.java:(36865, 40961)-----
public interface Diffable&lt;DiffType extends Diffable&lt;DiffType&gt;&gt; {
 
&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/Diffable.java:(36865, 40961)&gt;&gt;&gt;&gt;&gt;
public interface Diffable&lt;DiffType extends Diffable&gt; {
 
------------------------------------
-----Made compliant :/TypeMatches.java:(45057, 49153)-----
import org.incava.ijdk.lang.NCPair;
i
&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/TypeMatches.java:(45057, 49153)&gt;&gt;&gt;&gt;&gt;
import org.incava.ijdk.lang.Pair;
i
------------------------------------
-----Made compliant :/TypeMatches.java:(159745, 163841)-----
    public Collection&lt;NCPair&lt;ElementType, ElementType&gt;&gt; get(double score) {
 
&gt;&gt;&gt;&gt;&gt;Merge branch 'm:/TypeMatches.java:(159745, 163841)&gt;&gt;&gt;&gt;&gt;
    public Collection&lt;Pair&lt;ElementType, ElementType&gt;&gt; get(double score) {
 
------------------------------------
Git diff =0  Refactor Categories =465</t>
<t tx="paranhaslett.20130826181255.2958"></t>
<t tx="paranhaslett.20130826181255.2959">DOCUMENTS
@others</t>
<t tx="paranhaslett.20130826181255.3062"></t>
<t tx="paranhaslett.20130826181255.3063"></t>
<t tx="paranhaslett.20130826181255.3068"></t>
<t tx="paranhaslett.20130826181255.3157"></t>
<t tx="paranhaslett.20131205091806.1894">Re - tidy whole document

tidy the tool 

check results with meld

work on the exprirmental results page
</t>
</tnodes>
</leo_file>
