#@+leo-ver=4-thin
#@+node:hasletpara.20131202100421.2155:@shadow ./fmpp/ema/T_Intro.txt
#@@color
#@@language html
Introduction
========

<pre>
#@+others
#@+node:hasletpara.20131202100421.2130:@shadow Chapters/thesis-introduction.tex
#@@color
#@@language latex

\chapter{Introduction}\label{C:intro}

#@+at
# Shorterned form of your dreams and aspirations
# may want to include some stuff about github and refactoring here as is 
# speaks about how mecessay it is to have a good merge
#@-at
#@@c

There are some issues that arise in Software Development when code diverges from a point. Whenever there are multiple developers changing functionality or refactoring the source code needs to be reconciled. Version source control provides a way of doing this by either preventing conflicting code being altered or allowing the code to be merged.  A lot of version control systems use a comparison of differences to allow two different revisions of source code to be merged.  The comparison often involves the use of an algorithm that resolves the longest common subsequence.  This works well for source code that has a set order. It is possible for compiled source code to act in the same manner even when some of the source code is in a different order.  Another way of saying this is that although the source code is in a different order it is still functionally equivalent.  This thesis explores a way of allowing a version source control system to detect when the source code has been reordered.  In order to do this the source code needs to be divided into understandable sections.  When each of these sections for each revison are compared it is possible to determine if a section has been moved.  This enhances what can be detected when examining the difference between two files.  
#@-node:hasletpara.20131202100421.2130:@shadow Chapters/thesis-introduction.tex
#@-others
</pre>
#@-node:hasletpara.20131202100421.2155:@shadow ./fmpp/ema/T_Intro.txt
#@-leo
