<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://leoeditor.com/leo_toc.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="paranhaslett.20130826181255.2958" a="E"><vh>Thesis</vh>
<v t="hasletpara.20131128093200.1990" a="E"><vh>ScratchPad</vh>
<v t="hasletpara.20131128093200.1969" a="E"><vh>Old</vh>
<v t="paran.20140723095158.2026"><vh>lcs</vh></v>
<v t="paran.20140618094449.2025"><vh>&lt;&lt;Git&gt;&gt;</vh></v>
<v t="hasletpara.20131129101631.1874"><vh>Templates</vh>
<v t="hasletpara.20131129101631.1875" a="E"><vh>@shadow ./notes/Tex/Thesis.cls</vh></v>
<v t="hasletpara.20131129101631.1884"
expanded="hasletpara.20131129101631.1886,"><vh>@shadow ./notes/Tex/main.tex</vh></v>
<v t="hasletpara.20131129101631.1899"
expanded="hasletpara.20131129101631.1915,"><vh>@shadow ./notes/format.rst</vh></v>
</v>
<v t="paranhaslett.20130826181255.2960"
expanded="paranhaslett.20130826181255.2963,paranhaslett.20130826181255.2964,"><vh>@shadow ./notes/Tex/oldThesis.tex</vh></v>
<v t="hasletpara.20131128093200.1860"
expanded="hasletpara.20131128093200.1863,hasletpara.20131128093200.1864,hasletpara.20131128093200.1865,hasletpara.20131128093200.1866,hasletpara.20131128093200.1873,hasletpara.20131128093200.1883,"><vh>@shadow ./notes/Tex/Thesis.tex</vh></v>
</v>
<v t="hasletpara.20131127121911.1852"
expanded="hasletpara.20131128093200.1989,paranhaslett.20130826181255.3120,paranhaslett.20130826181255.3139,"><vh>@shadow ./notes/ScratchPad.rst</vh></v>
</v>
<v t="paranhaslett.20130826181255.2959" a="E"><vh>Documents</vh>
<v t="hasletpara.20131128093200.1957"><vh>Proposal</vh>
<v t="hasletpara.20130905084546.1629" a="E"
expanded="hasletpara.20130905084546.1632,hasletpara.20130905084546.1650,hasletpara.20130905084546.1662,hasletpara.20130905084546.1653,hasletpara.20130905084546.1652,"><vh>@shadow ./fmpp/Tex/Proposal/Proposal.tex</vh></v>
</v>
<v t="hasletpara.20131128093200.1956" a="E"><vh>Thesis</vh>
<v t="paran.20140603095349.1947"><vh>Outline</vh>
<v t="paran.20140604132703.2057" a="E"><vh>&lt;&lt;Background&gt;&gt;</vh>
<v t="paran.20140604132703.2058" a="E"><vh>&lt;&lt;VersionControlSystems&gt;&gt;</vh>
<v t="paran.20140604132703.2059"><vh>&lt;&lt;Reasons for using version control&gt;&gt;</vh></v>
<v t="paran.20140604132703.2064"><vh>&lt;&lt;LockvsMerge&gt;&gt;</vh></v>
<v t="paran.20140604132703.2070"><vh>&lt;&lt;architecture&gt;&gt;</vh></v>
</v>
<v t="paran.20140604132703.2074"><vh>&lt;&lt;GitHub&gt;&gt;</vh></v>
<v t="paran.20140604132703.2075"><vh>&lt;&lt;LCS&gt;&gt;</vh></v>
<v t="paran.20140604132703.2083"><vh>&lt;&lt;Refactoring&gt;&gt;</vh></v>
<v t="paran.20140604132703.2088"><vh>&lt;&lt;JDime&gt;&gt;</vh>
<v t="paran.20140604132703.2089"><vh>&lt;&lt;What Jdime can be used for&gt;&gt;</vh></v>
<v t="paran.20140604132703.2090"><vh>&lt;&lt;How Jdime works&gt;&gt;</vh></v>
<v t="paran.20140604132703.2091"><vh>&lt;&lt;Testing Jdimes suitability&gt;&gt;</vh></v>
<v t="paran.20140604132703.2092"><vh>&lt;&lt;Conclusion&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="paran.20140605091816.1990" a="E"><vh>Thesis</vh>
<v t="paranhaslett.20131205091806.1894"><vh>Da Plan</vh>
<v t="hasletpara.20140227093334.1831"><vh>To normalise or not to normalise that is the question</vh></v>
<v t="hasletpara.20140227093334.1830"><vh>To detect code moves</vh></v>
<v t="paran.20140423092515.1913"><vh>Datsets</vh></v>
</v>
<v t="paran.20140605091816.1995"><vh>@shadow thes.tex</vh></v>
<v t="paran.20140801074838.2010"><vh>@shadow thesis-acknowledge.tex</vh></v>
<v t="hasletpara.20131202100421.2130"><vh>@shadow Chapters/thesis-introduction.tex</vh></v>
<v t="hasletpara.20131202100421.2132" a="E"><vh>Chapters</vh>
<v t="hasletpara.20131202100421.2134"><vh>@shadow testing.tex</vh></v>
<v t="paran.20140515173914.6982" a="E"
expanded="paran.20140528183434.1974,paran.20140530135904.1945,paran.20140529075353.1935,paran.20140528183434.2055,paran.20140530135904.1946,paran.20140528183434.2009,paran.20140528183434.2011,paran.20140530135904.1958,paran.20140528183434.2021,paran.20140604093616.2026,"><vh>@shadow Background.tex</vh></v>
<v t="paran.20140731220748.2032" a="E"
expanded="paran.20140731220748.2034,"><vh>@shadow Motivation.tex</vh></v>
<v t="paran.20140514103950.1918" a="E"
expanded="paran.20140605081907.1971,paran.20140514132312.1919,paran.20140605081907.1972,"><vh>@shadow theTool.tex</vh></v>
<v t="paran.20140605081907.1988"><vh>@shadow expirimentalResults.tex</vh></v>
<v t="paran.20140605081907.1978"><vh>@shadow futureWork.tex</vh></v>
</v>
<v t="hasletpara.20131202100421.2131"><vh>@shadow Chapters/thesis-conclusion.tex</vh></v>
</v>
</v>
</v>
<v t="paranhaslett.20130826181255.3062" a="E"><vh>Web Pages</vh>
<v t="hasletpara.20131127144906.1860" a="E"><vh>Fmpp</vh>
<v t="hasletpara.20131121100256.1776" a="E"><vh>Data</vh>
<v t="hasletpara.20131121100256.1777"><vh>@shadow ./fmpp/data/tabbedPages.csv</vh></v>
</v>
<v t="hasletpara.20130905134207.1647"><vh>@shadow ./create.sh</vh></v>
<v t="hasletpara.20131121100256.1774"><vh>@shadow ./config.fmpp</vh></v>
</v>
<v t="paranhaslett.20130826181255.3063"><vh>Personal Uni Home</vh>
<v t="hasletpara.20130905131851.1629"><vh>@shadow ./config.fmpp</vh></v>
<v t="hasletpara.20130905134207.1629"
expanded="hasletpara.20130905134207.1633,"><vh>@shadow ./fmpp/public_html/generic.html</vh></v>
</v>
<v t="paranhaslett.20130826181255.3068" a="E"><vh>Ema Wiki</vh>
<v t="paranhaslett.20130826181255.3069"><vh>@shadow ./fmpp/ema/T_Study.txt</vh></v>
<v t="paranhaslett.20130826181255.3073"
expanded="paranhaslett.20130826181255.3074,paranhaslett.20130826181255.3103,paranhaslett.20130826181255.3110,"><vh>@shadow ./fmpp/ema/T_Notes.txt</vh></v>
<v t="hasletpara.20131202100421.2178" a="E"><vh>@shadow ./fmpp/ema/T_To_Do.txt</vh></v>
<v t="paranhaslett.20130826181255.3151"
expanded="paranhaslett.20130826181255.3057,"><vh>@shadow ./fmpp/ema/T_Structures.txt</vh></v>
<v t="hasletpara.20131202100421.2203"><vh>Thesis</vh>
<v t="paranhaslett.20130826181255.3070"><vh>@shadow ./fmpp/ema/T_Thesis.txt</vh></v>
<v t="hasletpara.20131202100421.2139" a="E"><vh>@shadow ./fmpp/ema/T_Chapters.txt</vh></v>
<v t="hasletpara.20131202100421.2146" a="E"><vh>Chapters</vh>
<v t="hasletpara.20131202100421.2155" a="E"><vh>@shadow ./fmpp/ema/T_Intro.txt</vh></v>
<v t="hasletpara.20131202100421.2144" a="E"><vh>@shadow ./fmpp/ema/T_Testing.txt</vh></v>
<v t="hasletpara.20131202100421.2151"><vh>@shadow ./fmpp/ema/T_Conclusion.txt</vh></v>
</v>
</v>
</v>
<v t="paranhaslett.20130826181255.3157" a="E"><vh>Grad Wiki</vh>
<v t="paranhaslett.20130826181255.3158" a="E"
expanded="paranhaslett.20130826181255.3120,paranhaslett.20130826181255.3139,"><vh>@shadow ./fmpp/GradWiki/Wiki.txt</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="hasletpara.20131121100256.1776"></t>
<t tx="hasletpara.20131127144906.1860"></t>
<t tx="hasletpara.20131128093200.1956"></t>
<t tx="hasletpara.20131128093200.1957"></t>
<t tx="hasletpara.20131128093200.1969">RCS was one of the original versioning systems 

Instead of keeping multiple copies of the file that had changed it kept the original file and any of the subsequent change sets.
This meant that any revision could be revisited and changed.

By recording both the original file and the change sets the amount of disk space used was reduced. 
differed form sccs because it used backwards revision rather than forward revisions

It allowed a small amount of collaboration by locking files that had been checked out.
This ensured that the checked out file could only be edited by one person at a time.

This is a limitation which would not suit companies that have many developers working on the same source code.  
There has to be a lot of communication and agreement about who is working on what.</t>
<t tx="hasletpara.20131128093200.1990"></t>
<t tx="hasletpara.20131129101631.1874"></t>
<t tx="hasletpara.20131202100421.2132">@path Chapters</t>
<t tx="hasletpara.20131202100421.2146"></t>
<t tx="hasletpara.20131202100421.2203"></t>
<t tx="hasletpara.20140227093334.1830">Do the deletes make any change to the code?
Do the inserts make any change to the code?</t>
<t tx="hasletpara.20140227093334.1831">
I think that I am going to have to put all the changes in the merge
need to figure out where the top diff is enacted so that the file can be checked for the following

Is it Java?
what line number region are we comparing
have we got all the change-sets</t>
<t tx="paran.20140423092515.1913">Possible datasets
&lt;A HREF="https://github.com/clojure/clojure" &gt;clojure/clojure · GitHub&lt;/A&gt;
A lisp like language written in Java and targeting the JVM
&lt;A HREF="https://github.com/rzwitserloot/lombok" &gt;rzwitserloot/lombok · GitHub&lt;/A&gt;
A Java library that uses annotations to simplify commonly written code
&lt;A HREF="https://github.com/maandree/jpp" &gt;maandree/jpp · GitHub&lt;/A&gt;
A preprocessor for Java
&lt;A HREF="https://github.com/klangner/ast-java"&gt;klangner/ast-java · GitHub&lt;/A&gt;
parses and represents Java as an AST
&lt;A HREF="https://github.com/antlr/antlr4"&gt;antlr/antlr4 · GitHub&lt;/A&gt;
A parser for any language you have language definition for</t>
<t tx="paran.20140603095349.1947">Outline
 Background
  &lt;&lt;Background&gt;&gt;</t>
<t tx="paran.20140604132703.2057">Present some of the background needed to understand the tool.  This background includes an introduction to version control, merging, along with what refactoring is and how it dramatically can change the source code.   We will then look at the issues with the current Longest Common subsquence method of determining differences. Finally we will look at JDime that has some form of managing two copies of the same program that have been refactored differently. We will look inot Jdimes shortcomings for refactoring aware version control  

 Version Control Systems
  &lt;&lt;VersionControlSystems&gt;&gt;

 Collaborating online
  &lt;&lt;GitHub&gt;&gt;

 Longest Common Subsequence
  &lt;&lt;LCS&gt;&gt;

 Refactoring
  &lt;&lt;Refactoring&gt;&gt;

 JDime
  &lt;&lt;JDime&gt;&gt;
 
 


</t>
<t tx="paran.20140604132703.2058">Introduce what version control is and how it can be used. Show how it is different to other revision-like systems. Explain some of the features and differences between different types of version control. Finally talk about the history of version control and how it is changed.

What is version control and why should we use it
&lt;&lt;Reasons for using version control&gt;&gt;

Dealing with conflicts
&lt;&lt;LockvsMerge&gt;&gt;

Architecture
&lt;&lt;architecture&gt;&gt;

</t>
<t tx="paran.20140604132703.2059">Explain that it can be used for backups braching associating matadata to a change and collaboration with examples


</t>
<t tx="paran.20140604132703.2064">Go through the methods of dealing with conflicts including locking and merging

Locking

 Explain what locking is and how it works

Smaller structured units
 Talk about using smaller items of granuality than a file or file based locking
 
Merging two documents
 Describe merging of two documents and how a 3 way merge can be done automatically.
</t>
<t tx="paran.20140604132703.2070">Explain the difference between centrailised and distributed version control systems </t>
<t tx="paran.20140604132703.2074">Describe how github provides more collaboration and how because of this finding better ways to merge code becomes important  

put down the number of collaborators for a particular project</t>
<t tx="paran.20140604132703.2075">Describe the longest common subsequence algorithm and the issue that it attemts to resolve. Point out the reordering issues it has difficulty with.
 
 


</t>
<t tx="paran.20140604132703.2083">Describe refactoring with examples.  Potential global changes can have a large impact upon the code. 
</t>
<t tx="paran.20140604132703.2088">Describe JDime and explain how it is not suitable

&lt;&lt;What Jdime can be used for&gt;&gt;

&lt;&lt;How Jdime works&gt;&gt;

&lt;&lt;Testing Jdimes suitability&gt;&gt;

&lt;&lt;Conclusion&gt;&gt;





 







</t>
<t tx="paran.20140604132703.2089">Explain what Jdime is</t>
<t tx="paran.20140604132703.2090">Explain How Jdime works</t>
<t tx="paran.20140604132703.2091">go through the test to show that the methods are not outputted in order

</t>
<t tx="paran.20140604132703.2092">Come to the conclusion it  </t>
<t tx="paran.20140605091816.1990">@path ./fmpp/Tex/Thesis</t>
<t tx="paran.20140618094449.2025">Git is a repository which is used mostly for software development.

This is done by combining all the changes to a document in a process called merging. 
In order to merge, any change an editor makes needs to be recorded and compared against the changes made by other editors.
If it is possible for those changes to co-exist then the changes will be made.
An example of changes that are considered to be able to co-exist is if all editors change a different part of the document.
If it is not possible for those changes to co-exist then there is a \"merge conflict\".
An example of a merge conflict is if any two changes on the document overlap with different values.
Before any merging can be done all of the changes need to be determined

In GIT there are a number of changes recorded for a file differences,  A file could be added, deleted, moved, copied, or modified.  The same is not true of changes within the file with only insert, delete, and modify being available.</t>
<t tx="paran.20140723095158.2026">

@ 
change this to diagrams
@c

\begin{verbatim}

"The quick brown fox jumps over the lazy dog"

"The lazy brown dog jumps over the quick fox"

\end{verbatim}

The longest common subsequence of this would be

\begin{verbatim}
"The \"," brown ","o"," jumps over the ","o"
\end{verbatim}

Without further analysing the changes it is possible to conclude that instead of swapping certain words that:

\begin{verbatim}
"quick" transforms into "lazy"
"f" transforms into "d"
\"x\" transforms into \"g\"
\"lazy d\" transforms into \"quick f\"
\"g\" transforms into \"x\"
\end{verbatim}

What this thesis aims to do is to more accurately portray these changes.
In order to do this we require some information about the structure of the document.
For the above example if the computer was aware that the sentence was structured into words rather than characters the result would have been slightly different.

\begin{verbatim}
\"The \",?,\" brown \",?,\"jumps \", \"over \", \"the \",?,?
\end{verbatim}

in this situation in becomes easier to recognise that words have been swapped by comparing each of the changes with each other.  

\begin{verbatim}
\"quick \" transforms into \"lazy \" matches \"lazy\" transforms into \"quick\"
\"fox \" transforms into \"dog\" matches \"dog\" transforms into \"fox\" 
\end{verbatim}

The English language is also far too complex to notice anything that is more basic than a word for word swap.
There are words and sentences that have similar meanings but are spelled and structured differently.</t>
<t tx="paranhaslett.20130826181255.2958"></t>
<t tx="paranhaslett.20130826181255.2959">DOCUMENTS
@others</t>
<t tx="paranhaslett.20130826181255.3062"></t>
<t tx="paranhaslett.20130826181255.3063"></t>
<t tx="paranhaslett.20130826181255.3068"></t>
<t tx="paranhaslett.20130826181255.3157"></t>
<t tx="paranhaslett.20131205091806.1894">fix program
write about comments and why comments are included
do write up of expiriment
add Diagrams to background on git
do research and add references



_________________________
normalization



What has already been done by Apel is to i


What we are going to do is
do what Apel has done again
figure out how JGit works
add tuned sort to JGit 
run it over the files

also add some stuff for of equivalence


it already ignores comments (prove this using tests)

does not retain the original order for disordered sections of code






</t>
</tnodes>
</leo_file>
