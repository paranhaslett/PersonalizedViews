#@+leo-ver=4-thin
#@+node:paranhaslett.20130826181255.3158:@shadow ./Wiki.txt
#@@language html
%INCLUDE{"GraduateTemplate"}%

#@+others
#@+node:paranhaslett.20130826181255.3159:Research Interests
---+++ Research Interests

Adapting the viewed structure of Java code on a case by case basis for individuals whilst retaining a degree of collaboration.
#@nonl
#@-node:paranhaslett.20130826181255.3159:Research Interests
#@+node:paranhaslett.20130826181255.3120:Papers being read
---+++ Papers I am currently reading
#@+node:paranhaslett.20130826181255.3121:Code Source Mining
---++++ Code Source Mining
#@+node:hasletpara.20130902092846.1747:Article: FRUIt
---++++++ Article: FRUIt
 
Uses data mining techniques to produce views inside an eclipse plugin.  This was done to help developers cope with the overhead of understanding frameworks.

Possible followup

   * G. I. Webb and S. Zhang. Beyond association rules: Generalized rule discovery. http://www.csse.monash.edu.au/~webb/Files/WebbZhang03.pdf.

   * A. Michail. Data mining library reuse patterns using generalized association rules. In Proceedings of the International Conference on Software Engineering, pages 167â€“176. ACM Press, 2000.

   * Learning from examples to improve code completion systems http://dl.acm.org/citation.cfm?id=1595728
#@nonl
#@-node:hasletpara.20130902092846.1747:Article: FRUIt
#@+node:paranhaslett.20130826181255.3122:Article: Mining Software Repositories with iSPAROL and a Software Evolution Ontology
---++++++ Article: Mining Software Repositories with iSPAROL and a Software Evolution Ontology

http://dl.acm.org/citation.cfm?id=1268983.1269048

In this paper they present EvoOnt which is a common language useful for extracting informtion out of code repositories. As it is based on the existing Web Ontology Language (OWL) they believe that it is extendable.  They claim that it can be used to detect bad smells in Java code. Although this would be useful as a tool to view existing code it only appears capable of representing subsets of a central code repository. Thats said the underlying language which they are using deserves further study as it may be able to help two seperate views negotiate what is common between them. This would be a step towards discovering code equivlencies.

Possible followup
   * Using information fragments to answer the questions developers ask http://dl.acm.org/citation.cfm?id=1806828
   * Sample Spaces and Feature Models: There and Back Again http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4626837&tag=1
   
#@nonl
#@-node:paranhaslett.20130826181255.3122:Article: Mining Software Repositories with iSPAROL and a Software Evolution Ontology
#@+node:paranhaslett.20130826181255.3123:Article: TARE An Exchange Language for Mining Software Repositories
---++++++ Article: TARE An Exchange Language for Mining Software Repositories
http://dl.acm.org/citation.cfm?id=1137983.1137990

Another exchange language useful for data mining. It differs in that it is not based on an existing language. 
#@-node:paranhaslett.20130826181255.3123:Article: TARE An Exchange Language for Mining Software Repositories
#@-node:paranhaslett.20130826181255.3121:Code Source Mining
#@+node:paranhaslett.20130826181255.3124:CSCW

Another language useful for data mining. It differs in that it is not based on an existing language. 
---++++ CSCW

---+++++ What is CSCW?
Computer supported cooperative work 

http://en.wikipedia.org/wiki/Computer-supported_cooperative_work

#@+others
#@+node:paranhaslett.20130826181255.3125:Article: CSCW and Education
---+++++ Article: CSCW and Education

http://dl.acm.org/citation.cfm?id=2441955.2442035
#@-node:paranhaslett.20130826181255.3125:Article: CSCW and Education
#@+node:paranhaslett.20130826181255.3126:Article: Why CSCW needs Science Policy
---+++++ Article: Why CSCW needs Science Policy

http://dl.acm.org/citation.cfm?doid=2441776.2441902
#@-node:paranhaslett.20130826181255.3126:Article: Why CSCW needs Science Policy
#@-others
#@-node:paranhaslett.20130826181255.3124:CSCW
#@+node:paranhaslett.20130826181255.3127:Modeling and Code Viewing
---++++ Modeling and Graphical Code viewing

#@+others
#@+node:paranhaslett.20130826181255.3128:Article: An EXtensible Framework for providing Dynamic Data Structure Visualisations
---++++++ Article: An EXtensible Framework for providing Dynamic Data Structure Visualisations

http://dl.acm.org/citation.cfm?id=1028174.971433
#@-node:paranhaslett.20130826181255.3128:Article: An EXtensible Framework for providing Dynamic Data Structure Visualisations
#@+node:paranhaslett.20130826181255.3129:Article: Constructing  Multi-View Editing Eviroments Using MViews
---+++++ Article: Constructing  Multi-View Editing Eviroments Using MViews

   * Developing multiple grapical front ends for programming
   * SNART

It focuses on making each subset view a part of a central whole. It uses a central database to hold information about program structure and semantics. What I am attempting to do with my concept of views is to treat each view as its individual whole with items deamed to be equivilent syncronsised with the views they are equivilent to.  There need to be some way of detecting these code equivlencies.

Futher articles about Mviews and other products that involve co-operating view can be found on John C Grundys home page

https://sites.google.com/site/johncgrundy/Home
#@-node:paranhaslett.20130826181255.3129:Article: Constructing  Multi-View Editing Eviroments Using MViews
#@+node:paranhaslett.20130826181255.3130:Article: FRUIt
#@-node:paranhaslett.20130826181255.3130:Article: FRUIt
#@+node:paranhaslett.20130826181255.3131:Article: Software Dev enviroments on the web
---++++++ Article: Software Dev enviroments on the web

http://dl.acm.org/citation.cfm?id=2384592.2384603
#@-node:paranhaslett.20130826181255.3131:Article: Software Dev enviroments on the web
#@+node:paranhaslett.20130826181255.3132:Article:Shrimp
---++++++ Article:Shrimp
#@-node:paranhaslett.20130826181255.3132:Article:Shrimp
#@+node:paranhaslett.20130826181255.3133:Article: Towards a Prctical Visual OO Programming environment
---++++++ Article: Towards a Prctical Visual OO Programming environment
What parts of Java could be reperesented by a visual represatation alone?
Can all of the OO be represented by a visual design rather than by text
#@-node:paranhaslett.20130826181255.3133:Article: Towards a Prctical Visual OO Programming environment
#@-others
#@-node:paranhaslett.20130826181255.3127:Modeling and Code Viewing
#@+node:hasletpara.20130829091513.1651:Program Slicing
---++++ Program Slicing

http://pages.cs.wisc.edu/~reps/
#@nonl
#@-node:hasletpara.20130829091513.1651:Program Slicing
#@+node:hasletpara.20130828093505.1608:Syntactically aware comparison tools
http://en.wikipedia.org/wiki/Compare%2B%2B

http://discuss.fogcreek.com/joelonsoftware5/default.asp?cmd=show&ixPost=155585&ixReplies=18

http://www.drdobbs.com/tools/worlds-first-language-aware-source-code/240153121

http://stackoverflow.com/questions/77931/do-you-know-of-any-language-aware-diffing-tools

http://www.modelmakertools.com/structured-diff-viewer/index.html
---++++ Syntactically aware comparison tools

Beyond compare seems to use some of these features to compare similar files against each other (not sure how effectivly is does this however)
http://www.scootersoftware.com/moreinfo.php

Altova also has a tool however it is focused on being solely xml aware
http://www.altova.com/diffdog.html

With semantic merge the name says it all. Hopefully they live up to this reputation 
http://www.semanticmerge.com/
This also seems to be about semantic merge
http://rlbisbe.wordpress.com/2013/04/15/semantic-merge-as-the-default-merge-tool-with-git-on-windows/

I am not sure if this is a new one or just is a rehash of semantic merge, SemanticMerge is adverstised on the side bar however some of the converstaion seems to be aimed at the effectiveness of plain text based merging.
http://codicesoftware.blogspot.com/2013/04/put-your-hands-on-programming-language.html


blog on Semantic Conflict by Martin Fowler no less 
http://martinfowler.com/bliki/SemanticConflict.html

Git Diff implemantations (not semantic currently)
https://www.kernel.org/pub/software/scm/git/docs/git-diff.html
#@nonl
#@-node:hasletpara.20130828093505.1608:Syntactically aware comparison tools
#@+node:paranhaslett.20130826181255.3134:Templates and Macros
---++++  Templates and Macros
#@+others
#@+node:paranhaslett.20130826181255.3135:Article: Behaviorial Similarity Matching using Concrete Source Code Templates in Logic Queries
---++++++ Article: Behaviorial Similarity Matching using Concrete Source Code Templates in Logic Queries

http://dl.acm.org/citation.cfm?doid=1244381.1244398

This Paper is about identifing pattern with a particular code
#@-node:paranhaslett.20130826181255.3135:Article: Behaviorial Similarity Matching using Concrete Source Code Templates in Logic Queries
#@+node:paranhaslett.20130826181255.3136:Article: Code Templete Inference Using Langugauge Models
---++++++ Article: Code Templete Inference Using Langugauge Models

http://dl.acm.org/citation.cfm?doid=1900008.1900143
#@-node:paranhaslett.20130826181255.3136:Article: Code Templete Inference Using Langugauge Models
#@+node:paranhaslett.20130826181255.3137:Article: Marco: safe, expressive macros for any language
---++++++ Article: Marco: safe, expressive macros for any language

http://dl.acm.org/citation.cfm?id=2367163.2367199

The reason why I was intersted in this paper is that one way to implement a seperate view would be to write programs that are responsible for assembling the program end product.  The reason I have gone off that idea is that this still requires a central point that contains the "truth" while the seperate views are considered as being simply small subsets of that "truth". I still admire the ability to be language agnostic however.
#@-node:paranhaslett.20130826181255.3137:Article: Marco: safe, expressive macros for any language
#@+node:paranhaslett.20130826181255.3138:Article: Towards Modular Code Generators Using Symmetric Language-Aware Aspects
---++++++ Article: Towards Modular Code Generators Using Symmetric Language-Aware Aspects

http://dl.acm.org/citation.cfm?doid=2068776.2068782
#@-node:paranhaslett.20130826181255.3138:Article: Towards Modular Code Generators Using Symmetric Language-Aware Aspects
#@-others
#@-node:paranhaslett.20130826181255.3134:Templates and Macros
#@+node:paranhaslett.20130826181255.3139:Version Control
---++++  Version Control
#@+others
#@+node:paranhaslett.20130826181255.3140:Article: Modern Version Control
---+++++ Article: Modern Version Control

http://dl.acm.org/citation.cfm?id=2382456.2382510
#@-node:paranhaslett.20130826181255.3140:Article: Modern Version Control
#@+node:paranhaslett.20130826181255.3141:Article: Version Control in Crosscutting Framework-Based Development
---+++++ Article: Version Control in Crosscutting Framework-Based Development

http://portal.acm.org/citation.cfm?doid=1363686.1363862

This article highlights the some of the conditions where version control may not understand or cater for code structured in a particular manner. although they mention that this also could be an issue with Object Oriented Frameworks OOF they focus more on Aspect Oriented and crosscutting frameworks. They also have developed TOFRA to deal with changes in an Aspect. As a personalized view could be cross cutting this article could be of interest. The way in which aspect oriented programming links with vastly different parts of the same structure could be similar to how one personalized view would appear to another. The fact that a small configuration change within an aspect can affect vastly different parts of the application will cause similar complexities as changing items that might be related in one personal view but unrelated in another. Even worse would be changing items that appear unrelated in one view but are connected in another.
#@-node:paranhaslett.20130826181255.3141:Article: Version Control in Crosscutting Framework-Based Development
#@+node:hasletpara.20130903084319.1538:Git
---+++++ Git web pages
Comparison between Git and Mecurial
http://alblue.bandlem.com/2011/03/mercurial-and-git-technical-comparison.html
#@nonl
#@-node:hasletpara.20130903084319.1538:Git
#@-others
#@-node:paranhaslett.20130826181255.3139:Version Control
#@+node:paranhaslett.20130826181255.3142:View Mapping Language
---++++  View Mapping Language

#@+others
#@+node:paranhaslett.20130826181255.3143:Article: Mappings the glue in an integrated system
---+++++ Article: Mappings the glue in an integrated system
   * View mapping language
   * VML
   * Code equivlency
#@-node:paranhaslett.20130826181255.3143:Article: Mappings the glue in an integrated system
#@+node:paranhaslett.20130826181255.3144:Article:User-centered design of a visual data mapping tool
---+++++ Article:User-centered design of a visual data mapping tool
 http://dl.acm.org/citation.cfm?id=2254556.2254646
#@-node:paranhaslett.20130826181255.3144:Article:User-centered design of a visual data mapping tool
#@+node:paranhaslett.20130826181255.3145:Article:Domain-specific visual languages for specifying and generating data mapping systems
---+++++ Article:Domain-specific visual languages for specifying and generating data mapping systems
http://www.sciencedirect.com/science/article/pii/S1045926X04000102#

This is also by John Grundy of Mviews Fame
#@-node:paranhaslett.20130826181255.3145:Article:Domain-specific visual languages for specifying and generating data mapping systems
#@-others
#@-node:paranhaslett.20130826181255.3142:View Mapping Language
#@+node:paranhaslett.20130826181255.3146:Article: Building Usage Contexts During Program Comprehension
---++++++ Article: Building Usage Contexts During Program Comprehension
#@-node:paranhaslett.20130826181255.3146:Article: Building Usage Contexts During Program Comprehension
#@-node:paranhaslett.20130826181255.3120:Papers being read
#@+node:paranhaslett.20130826181255.3187:Git Repo
---+++ Git Repo (mostly for experimentation)

https://github.com/paranhaslett/PersonalizedViews
#@nonl
#@-node:paranhaslett.20130826181255.3187:Git Repo
#@+node:paranhaslett.20130826181255.3188:Other Stuff
---+++ Other Stuff

#@+others
#@+node:paranhaslett.20130826181255.3189:Video: Invent on priciple
---++++++ Bret Victor - Inventing on Principle

http://vimeo.com/36579366

#@+at 
#@nonl
# <!-- My principle "Own your own creations"? -->
# 
#@-at
#@@c
#@nonl
#@-node:paranhaslett.20130826181255.3189:Video: Invent on priciple
#@-others
#@-node:paranhaslett.20130826181255.3188:Other Stuff
#@-others
#@-node:paranhaslett.20130826181255.3158:@shadow ./Wiki.txt
#@-leo
